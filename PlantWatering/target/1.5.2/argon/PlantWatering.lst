
c:/Users/mauri/Documents/IoTc2/git_hub/l14-soilmoisture-MVilla99/PlantWatering/target/1.5.2/argon/PlantWatering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000088a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc8c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004c4  2003dcf4  000dc8c4  0001dcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000638  2003e1b8  2003e1b8  0002e1b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dcd88  000dcd88  0002cd88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dcdb0  000dcdb0  0002cdb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000faf34  00000000  00000000  0002cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014a24  00000000  00000000  00127ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000218b2  00000000  00000000  0013c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ab8  00000000  00000000  0015dfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004d68  00000000  00000000  00160a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d03f  00000000  00000000  001657de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00034961  00000000  00000000  001a281d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a876  00000000  00000000  001d717e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e348  00000000  00000000  002e19f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fe33 	bl	d9c9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fe53 	bl	d9ce8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcf4 	.word	0x2003dcf4
   d404c:	000dc8c4 	.word	0x000dc8c4
   d4050:	2003e1b8 	.word	0x2003e1b8
   d4054:	2003e1b8 	.word	0x2003e1b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 feb5 	bl	d6dcc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc8b4 	.word	0x000dc8b4
   d4084:	000dc864 	.word	0x000dc864

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b846 	b.w	d4118 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa89 	bl	d45a4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 be5b 	b.w	d6d50 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bb4d 	b.w	d6738 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bb53 	b.w	d6748 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bb51 	b.w	d6748 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fab6 	bl	d6620 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6381 	.word	0x000d6381

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40cc:	4770      	bx	lr

000d40ce <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d2:	6984      	ldr	r4, [r0, #24]
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN9TCPClientD1Ev+0x30>)
   d40d6:	6003      	str	r3, [r0, #0]
   d40d8:	4605      	mov	r5, r0
   d40da:	b17c      	cbz	r4, d40fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}
   d4100:	000dc4c0 	.word	0x000dc4c0

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f003 fe06 	bl	d7d20 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <setup>:

int quality;
int AQval;
int AQCodeVal;

void setup() {
   d4118:	b510      	push	{r4, lr}
mqtt.subscribe(&SubData);
   d411a:	491b      	ldr	r1, [pc, #108]	; (d4188 <setup+0x70>)
Wire.begin();
display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d411c:	4c1b      	ldr	r4, [pc, #108]	; (d418c <setup+0x74>)
int quality;
int AQval;
int AQCodeVal;

void setup() {
mqtt.subscribe(&SubData);
   d411e:	481c      	ldr	r0, [pc, #112]	; (d4190 <setup+0x78>)
   d4120:	f001 fdb2 	bl	d5c88 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
Wire.begin();
   d4124:	f003 fdc8 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d4128:	f003 f84c 	bl	d71c4 <_ZN7TwoWire5beginEv>
display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d412c:	223c      	movs	r2, #60	; 0x3c
   d412e:	2102      	movs	r1, #2
   d4130:	4620      	mov	r0, r4
   d4132:	f001 f931 	bl	d5398 <_ZN16Adafruit_SSD13065beginEhh>
display.display();
   d4136:	4620      	mov	r0, r4
   d4138:	f001 fa00 	bl	d553c <_ZN16Adafruit_SSD13067displayEv>
display.clearDisplay();
   d413c:	4620      	mov	r0, r4
   d413e:	f001 f8db 	bl	d52f8 <_ZN16Adafruit_SSD130612clearDisplayEv>
display.display();
   d4142:	4620      	mov	r0, r4
   d4144:	f001 f9fa 	bl	d553c <_ZN16Adafruit_SSD13067displayEv>
bme.begin(0x76);
   d4148:	2176      	movs	r1, #118	; 0x76
   d414a:	4812      	ldr	r0, [pc, #72]	; (d4194 <setup+0x7c>)
   d414c:	f000 fef0 	bl	d4f30 <_ZN15Adafruit_BME2805beginEh>
AQsensor.init();
   d4150:	4811      	ldr	r0, [pc, #68]	; (d4198 <setup+0x80>)
   d4152:	f001 fffd 	bl	d6150 <_ZN16AirQualitySensor4initEv>
pinMode(relayPin, OUTPUT); 
   d4156:	4b11      	ldr	r3, [pc, #68]	; (d419c <setup+0x84>)
   d4158:	2101      	movs	r1, #1
   d415a:	8818      	ldrh	r0, [r3, #0]
   d415c:	f003 fd18 	bl	d7b90 <pinMode>
pinMode(dustPin, INPUT);
   d4160:	4b0f      	ldr	r3, [pc, #60]	; (d41a0 <setup+0x88>)
   d4162:	2100      	movs	r1, #0
   d4164:	8818      	ldrh	r0, [r3, #0]
   d4166:	f003 fd13 	bl	d7b90 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d416a:	f002 f911 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
dustStartTime = millis();
   d416e:	4b0d      	ldr	r3, [pc, #52]	; (d41a4 <setup+0x8c>)
   d4170:	6018      	str	r0, [r3, #0]
Serial.begin(9600);
   d4172:	f002 ff41 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4176:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d417a:	f002 ff31 	bl	d6fe0 <_ZN9USBSerial5beginEl>
delay(100);
   d417e:	2064      	movs	r0, #100	; 0x64

}
   d4180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
AQsensor.init();
pinMode(relayPin, OUTPUT); 
pinMode(dustPin, INPUT);
dustStartTime = millis();
Serial.begin(9600);
delay(100);
   d4184:	f002 bda6 	b.w	d6cd4 <delay>
   d4188:	2003e2fc 	.word	0x2003e2fc
   d418c:	2003e334 	.word	0x2003e334
   d4190:	2003e214 	.word	0x2003e214
   d4194:	2003e1d0 	.word	0x2003e1d0
   d4198:	2003e35c 	.word	0x2003e35c
   d419c:	2003dcf4 	.word	0x2003dcf4
   d41a0:	2003dcfc 	.word	0x2003dcfc
   d41a4:	2003e3b8 	.word	0x2003e3b8

000d41a8 <_Z12MQTT_connectv>:
  }

  
}

void  MQTT_connect(){
   d41a8:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;

  if(mqtt.connected()){
   d41aa:	4817      	ldr	r0, [pc, #92]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41ac:	f001 fc10 	bl	d59d0 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d41b0:	bb40      	cbnz	r0, d4204 <_Z12MQTT_connectv+0x5c>
    return;
  }

  Serial.print("connecting to MQTT..");
   d41b2:	f002 ff21 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d41b6:	4915      	ldr	r1, [pc, #84]	; (d420c <_Z12MQTT_connectv+0x64>)
   d41b8:	f002 fd02 	bl	d6bc0 <_ZN5Print5printEPKc>
  while((ret = mqtt.connect()) != 0){
   d41bc:	4812      	ldr	r0, [pc, #72]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41be:	f001 ff26 	bl	d600e <_ZN13Adafruit_MQTT7connectEv>
   d41c2:	4604      	mov	r4, r0
   d41c4:	b1b8      	cbz	r0, d41f6 <_Z12MQTT_connectv+0x4e>
    Serial.println(mqtt.connectErrorString(ret));
   d41c6:	f002 ff17 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d41ca:	4621      	mov	r1, r4
   d41cc:	4605      	mov	r5, r0
   d41ce:	480e      	ldr	r0, [pc, #56]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41d0:	f001 fd38 	bl	d5c44 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d41d4:	4601      	mov	r1, r0
   d41d6:	4628      	mov	r0, r5
   d41d8:	f002 fd05 	bl	d6be6 <_ZN5Print7printlnEPKc>
    Serial.println("retrying MQTT connectioon in 5 seconds...");
   d41dc:	f002 ff0c 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d41e0:	490b      	ldr	r1, [pc, #44]	; (d4210 <_Z12MQTT_connectv+0x68>)
   d41e2:	f002 fd00 	bl	d6be6 <_ZN5Print7printlnEPKc>
    mqtt.disconnect();
   d41e6:	4808      	ldr	r0, [pc, #32]	; (d4208 <_Z12MQTT_connectv+0x60>)
   d41e8:	f001 fd3a 	bl	d5c60 <_ZN13Adafruit_MQTT10disconnectEv>
    delay(5000);
   d41ec:	f241 3088 	movw	r0, #5000	; 0x1388
   d41f0:	f002 fd70 	bl	d6cd4 <delay>
   d41f4:	e7e2      	b.n	d41bc <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT connected!");
   d41f6:	f002 feff 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d41fa:	4906      	ldr	r1, [pc, #24]	; (d4214 <_Z12MQTT_connectv+0x6c>)
}
   d41fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("retrying MQTT connectioon in 5 seconds...");
    mqtt.disconnect();
    delay(5000);
  }
  Serial.println("MQTT connected!");
   d4200:	f002 bcf1 	b.w	d6be6 <_ZN5Print7printlnEPKc>
   d4204:	bd38      	pop	{r3, r4, r5, pc}
   d4206:	bf00      	nop
   d4208:	2003e214 	.word	0x2003e214
   d420c:	000db894 	.word	0x000db894
   d4210:	000db8a9 	.word	0x000db8a9
   d4214:	000db8d3 	.word	0x000db8d3

000d4218 <_Z9bmeValuesv>:
}
void bmeValues(){ // function for reading the bme280 sensor
   d4218:	b510      	push	{r4, lr}
  temp = (bme.readTemperature() * 9/5)+32;
   d421a:	4c0d      	ldr	r4, [pc, #52]	; (d4250 <_Z9bmeValuesv+0x38>)
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fbeb 	bl	d49f8 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4222:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4226:	ee20 0a27 	vmul.f32	s0, s0, s15
   d422a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d422e:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4232:	4b08      	ldr	r3, [pc, #32]	; (d4254 <_Z9bmeValuesv+0x3c>)
  hum = bme.readHumidity();
   d4234:	4620      	mov	r0, r4
    delay(5000);
  }
  Serial.println("MQTT connected!");
}
void bmeValues(){ // function for reading the bme280 sensor
  temp = (bme.readTemperature() * 9/5)+32;
   d4236:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4258 <_Z9bmeValuesv+0x40>
   d423a:	ee77 7a87 	vadd.f32	s15, s15, s14
   d423e:	edc3 7a00 	vstr	s15, [r3]
  hum = bme.readHumidity();
   d4242:	f000 fc71 	bl	d4b28 <_ZN15Adafruit_BME28012readHumidityEv>
   d4246:	4b05      	ldr	r3, [pc, #20]	; (d425c <_Z9bmeValuesv+0x44>)
   d4248:	ed83 0a00 	vstr	s0, [r3]
   d424c:	bd10      	pop	{r4, pc}
   d424e:	bf00      	nop
   d4250:	2003e1d0 	.word	0x2003e1d0
   d4254:	2003e394 	.word	0x2003e394
   d4258:	42000000 	.word	0x42000000
   d425c:	2003e2f8 	.word	0x2003e2f8

000d4260 <_Z9oledPrintv>:
}
void oledPrint(){ // function for printing values to the oled screen
   d4260:	b513      	push	{r0, r1, r4, lr}
  display.clearDisplay(); // for displaying BME readings.
   d4262:	4c2e      	ldr	r4, [pc, #184]	; (d431c <_Z9oledPrintv+0xbc>)
   d4264:	4620      	mov	r0, r4
   d4266:	f001 f847 	bl	d52f8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d426a:	4620      	mov	r0, r4
   d426c:	f001 f966 	bl	d553c <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d4270:	4620      	mov	r0, r4
   d4272:	2101      	movs	r1, #1
   d4274:	f001 fb9a 	bl	d59ac <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4278:	4620      	mov	r0, r4
   d427a:	2101      	movs	r1, #1
   d427c:	f001 fb9b 	bl	d59b6 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d4280:	2200      	movs	r2, #0
   d4282:	4611      	mov	r1, r2
   d4284:	4620      	mov	r0, r4
   d4286:	f001 fb8e 	bl	d59a6 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("temperature is: %0.02f\n",temp);
   d428a:	4b25      	ldr	r3, [pc, #148]	; (d4320 <_Z9oledPrintv+0xc0>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d428c:	6818      	ldr	r0, [r3, #0]
   d428e:	f005 f93f 	bl	d9510 <__aeabi_f2d>
   d4292:	4a24      	ldr	r2, [pc, #144]	; (d4324 <_Z9oledPrintv+0xc4>)
   d4294:	e9cd 0100 	strd	r0, r1, [sp]
   d4298:	2100      	movs	r1, #0
   d429a:	4620      	mov	r0, r4
   d429c:	f002 fccd 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
  display.display();
   d42a0:	4620      	mov	r0, r4
   d42a2:	f001 f94b 	bl	d553c <_ZN16Adafruit_SSD13067displayEv>
  Serial.println("display working");
   d42a6:	f002 fea7 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d42aa:	491f      	ldr	r1, [pc, #124]	; (d4328 <_Z9oledPrintv+0xc8>)
   d42ac:	f002 fc9b 	bl	d6be6 <_ZN5Print7printlnEPKc>
  display.setCursor(0,10);
   d42b0:	4620      	mov	r0, r4
   d42b2:	220a      	movs	r2, #10
   d42b4:	2100      	movs	r1, #0
   d42b6:	f001 fb76 	bl	d59a6 <_ZN12Adafruit_GFX9setCursorEss>
   d42ba:	4b1c      	ldr	r3, [pc, #112]	; (d432c <_Z9oledPrintv+0xcc>)
   d42bc:	4a1c      	ldr	r2, [pc, #112]	; (d4330 <_Z9oledPrintv+0xd0>)
   d42be:	681b      	ldr	r3, [r3, #0]
   d42c0:	2100      	movs	r1, #0
   d42c2:	4620      	mov	r0, r4
   d42c4:	f002 fcb9 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
  display.printf("soil value is: %i\n",probeVal);

  display.setCursor(0,20); // for display dust sensor values
   d42c8:	2214      	movs	r2, #20
   d42ca:	4620      	mov	r0, r4
   d42cc:	2100      	movs	r1, #0
   d42ce:	f001 fb6a 	bl	d59a6 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("concentration = %0.02f\n",concentration);
   d42d2:	4b18      	ldr	r3, [pc, #96]	; (d4334 <_Z9oledPrintv+0xd4>)
   d42d4:	6818      	ldr	r0, [r3, #0]
   d42d6:	f005 f91b 	bl	d9510 <__aeabi_f2d>
   d42da:	4a17      	ldr	r2, [pc, #92]	; (d4338 <_Z9oledPrintv+0xd8>)
   d42dc:	e9cd 0100 	strd	r0, r1, [sp]
   d42e0:	2100      	movs	r1, #0
   d42e2:	4620      	mov	r0, r4
   d42e4:	f002 fca9 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
   d42e8:	4a14      	ldr	r2, [pc, #80]	; (d433c <_Z9oledPrintv+0xdc>)
   d42ea:	2100      	movs	r1, #0
   d42ec:	4620      	mov	r0, r4
   d42ee:	f002 fca4 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
  display.printf("pcs/0.01cf \n");
  display.display(); 
   d42f2:	4620      	mov	r0, r4
   d42f4:	f001 f922 	bl	d553c <_ZN16Adafruit_SSD13067displayEv>

  display.setCursor(0,25); // for displaying air quality code value.
   d42f8:	4620      	mov	r0, r4
   d42fa:	2219      	movs	r2, #25
   d42fc:	2100      	movs	r1, #0
   d42fe:	f001 fb52 	bl	d59a6 <_ZN12Adafruit_GFX9setCursorEss>
   d4302:	4b0f      	ldr	r3, [pc, #60]	; (d4340 <_Z9oledPrintv+0xe0>)
   d4304:	4a0f      	ldr	r2, [pc, #60]	; (d4344 <_Z9oledPrintv+0xe4>)
   d4306:	681b      	ldr	r3, [r3, #0]
   d4308:	2100      	movs	r1, #0
   d430a:	4620      	mov	r0, r4
   d430c:	f002 fc95 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
  display.printf("AQ code: %i\n",AQCodeVal);
  display.display();
   d4310:	4620      	mov	r0, r4
}
   d4312:	b002      	add	sp, #8
   d4314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.printf("pcs/0.01cf \n");
  display.display(); 

  display.setCursor(0,25); // for displaying air quality code value.
  display.printf("AQ code: %i\n",AQCodeVal);
  display.display();
   d4318:	f001 b910 	b.w	d553c <_ZN16Adafruit_SSD13067displayEv>
   d431c:	2003e334 	.word	0x2003e334
   d4320:	2003e394 	.word	0x2003e394
   d4324:	000db8e3 	.word	0x000db8e3
   d4328:	000db8fb 	.word	0x000db8fb
   d432c:	2003e358 	.word	0x2003e358
   d4330:	000db90b 	.word	0x000db90b
   d4334:	2003e1bc 	.word	0x2003e1bc
   d4338:	000db91e 	.word	0x000db91e
   d433c:	000db936 	.word	0x000db936
   d4340:	2003e1c4 	.word	0x2003e1c4
   d4344:	000db943 	.word	0x000db943

000d4348 <_Z4pumpv>:
}
void pump(){ // function for using the relay to engage the pump and water for half a second
   d4348:	b538      	push	{r3, r4, r5, lr}
   d434a:	f002 f821 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
   d434e:	4c0f      	ldr	r4, [pc, #60]	; (d438c <_Z4pumpv+0x44>)
   d4350:	4605      	mov	r5, r0
   d4352:	f002 f81d 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
  unsigned long startMillis;
    startMillis = millis();
    while(millis()-startMillis<=500){
   d4356:	1b40      	subs	r0, r0, r5
   d4358:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d435c:	d809      	bhi.n	d4372 <_Z4pumpv+0x2a>
      digitalWrite(relayPin, HIGH);
   d435e:	2101      	movs	r1, #1
   d4360:	8820      	ldrh	r0, [r4, #0]
   d4362:	f003 fc26 	bl	d7bb2 <digitalWrite>
      Serial.println("pumping");
   d4366:	f002 fe47 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d436a:	4909      	ldr	r1, [pc, #36]	; (d4390 <_Z4pumpv+0x48>)
   d436c:	f002 fc3b 	bl	d6be6 <_ZN5Print7printlnEPKc>
  display.display();
}
void pump(){ // function for using the relay to engage the pump and water for half a second
  unsigned long startMillis;
    startMillis = millis();
    while(millis()-startMillis<=500){
   d4370:	e7ef      	b.n	d4352 <_Z4pumpv+0xa>
      digitalWrite(relayPin, HIGH);
      Serial.println("pumping");
    }
  digitalWrite(relayPin,LOW);
   d4372:	4b06      	ldr	r3, [pc, #24]	; (d438c <_Z4pumpv+0x44>)
   d4374:	2100      	movs	r1, #0
   d4376:	8818      	ldrh	r0, [r3, #0]
   d4378:	f003 fc1b 	bl	d7bb2 <digitalWrite>
  Serial.println("not pumped");
   d437c:	f002 fe3c 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4380:	4904      	ldr	r1, [pc, #16]	; (d4394 <_Z4pumpv+0x4c>)
}
   d4382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    while(millis()-startMillis<=500){
      digitalWrite(relayPin, HIGH);
      Serial.println("pumping");
    }
  digitalWrite(relayPin,LOW);
  Serial.println("not pumped");
   d4386:	f002 bc2e 	b.w	d6be6 <_ZN5Print7printlnEPKc>
   d438a:	bf00      	nop
   d438c:	2003dcf4 	.word	0x2003dcf4
   d4390:	000db9dc 	.word	0x000db9dc
   d4394:	000db950 	.word	0x000db950

000d4398 <_Z10dustSensorv>:
}

void dustSensor(){ // function for measuring dust sensor values
   d4398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d439c:	ed2d 8b02 	vpush	{d8}
  dustDuration = pulseIn(dustPin, LOW);
   d43a0:	4b49      	ldr	r3, [pc, #292]	; (d44c8 <_Z10dustSensorv+0x130>)
  lowPulseOccupancy = lowPulseOccupancy+dustDuration;
   d43a2:	4c4a      	ldr	r4, [pc, #296]	; (d44cc <_Z10dustSensorv+0x134>)
  digitalWrite(relayPin,LOW);
  Serial.println("not pumped");
}

void dustSensor(){ // function for measuring dust sensor values
  dustDuration = pulseIn(dustPin, LOW);
   d43a4:	8818      	ldrh	r0, [r3, #0]
  lowPulseOccupancy = lowPulseOccupancy+dustDuration;

  if((millis()-dustStartTime)>ReplaceThisTime){
   d43a6:	4d4a      	ldr	r5, [pc, #296]	; (d44d0 <_Z10dustSensorv+0x138>)
    }
  digitalWrite(relayPin,LOW);
  Serial.println("not pumped");
}

void dustSensor(){ // function for measuring dust sensor values
   d43a8:	b083      	sub	sp, #12
  dustDuration = pulseIn(dustPin, LOW);
   d43aa:	2100      	movs	r1, #0
   d43ac:	f003 fc67 	bl	d7c7e <pulseIn>
   d43b0:	4b48      	ldr	r3, [pc, #288]	; (d44d4 <_Z10dustSensorv+0x13c>)
   d43b2:	6018      	str	r0, [r3, #0]
  lowPulseOccupancy = lowPulseOccupancy+dustDuration;
   d43b4:	6823      	ldr	r3, [r4, #0]
   d43b6:	4418      	add	r0, r3
   d43b8:	6020      	str	r0, [r4, #0]
   d43ba:	f001 ffe9 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>

  if((millis()-dustStartTime)>ReplaceThisTime){
   d43be:	4b46      	ldr	r3, [pc, #280]	; (d44d8 <_Z10dustSensorv+0x140>)
   d43c0:	681e      	ldr	r6, [r3, #0]
   d43c2:	682b      	ldr	r3, [r5, #0]
   d43c4:	1ac0      	subs	r0, r0, r3
   d43c6:	42b0      	cmp	r0, r6
   d43c8:	d966      	bls.n	d4498 <_Z10dustSensorv+0x100>
    ratio = lowPulseOccupancy/(ReplaceThisTime*10.0);
   d43ca:	6820      	ldr	r0, [r4, #0]
   d43cc:	f005 f87e 	bl	d94cc <__aeabi_ui2d>
   d43d0:	4680      	mov	r8, r0
   d43d2:	4630      	mov	r0, r6
   d43d4:	4689      	mov	r9, r1
   d43d6:	f005 f879 	bl	d94cc <__aeabi_ui2d>
   d43da:	2200      	movs	r2, #0
   d43dc:	4b3f      	ldr	r3, [pc, #252]	; (d44dc <_Z10dustSensorv+0x144>)
   d43de:	4e40      	ldr	r6, [pc, #256]	; (d44e0 <_Z10dustSensorv+0x148>)
   d43e0:	f005 f8ea 	bl	d95b8 <__aeabi_dmul>
   d43e4:	4602      	mov	r2, r0
   d43e6:	460b      	mov	r3, r1
   d43e8:	4640      	mov	r0, r8
   d43ea:	4649      	mov	r1, r9
   d43ec:	f005 fa0e 	bl	d980c <__aeabi_ddiv>
   d43f0:	f005 fbda 	bl	d9ba8 <__aeabi_d2f>
   d43f4:	6030      	str	r0, [r6, #0]
    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62;
   d43f6:	f005 f88b 	bl	d9510 <__aeabi_f2d>
   d43fa:	ed9f 1b2b 	vldr	d1, [pc, #172]	; d44a8 <_Z10dustSensorv+0x110>
   d43fe:	ec41 0b10 	vmov	d0, r0, r1
   d4402:	f003 fde9 	bl	d7fd8 <pow>
   d4406:	ed96 8a00 	vldr	s16, [r6]
   d440a:	ee18 0a10 	vmov	r0, s16
   d440e:	ed8d 0b00 	vstr	d0, [sp]
   d4412:	f005 f87d 	bl	d9510 <__aeabi_f2d>
   d4416:	ed9d 0b00 	vldr	d0, [sp]
   d441a:	4680      	mov	r8, r0
   d441c:	4689      	mov	r9, r1
   d441e:	a324      	add	r3, pc, #144	; (adr r3, d44b0 <_Z10dustSensorv+0x118>)
   d4420:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4424:	ec51 0b10 	vmov	r0, r1, d0
   d4428:	f005 f8c6 	bl	d95b8 <__aeabi_dmul>
   d442c:	4642      	mov	r2, r8
   d442e:	4606      	mov	r6, r0
   d4430:	460f      	mov	r7, r1
   d4432:	464b      	mov	r3, r9
   d4434:	4640      	mov	r0, r8
   d4436:	4649      	mov	r1, r9
   d4438:	f005 f8be 	bl	d95b8 <__aeabi_dmul>
   d443c:	a31e      	add	r3, pc, #120	; (adr r3, d44b8 <_Z10dustSensorv+0x120>)
   d443e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4442:	f005 f8b9 	bl	d95b8 <__aeabi_dmul>
   d4446:	4602      	mov	r2, r0
   d4448:	460b      	mov	r3, r1
   d444a:	4630      	mov	r0, r6
   d444c:	4639      	mov	r1, r7
   d444e:	f004 feff 	bl	d9250 <__aeabi_dsub>
   d4452:	eddf 7a24 	vldr	s15, [pc, #144]	; d44e4 <_Z10dustSensorv+0x14c>
   d4456:	ee68 7a27 	vmul.f32	s15, s16, s15
   d445a:	4606      	mov	r6, r0
   d445c:	ee17 0a90 	vmov	r0, s15
   d4460:	460f      	mov	r7, r1
   d4462:	f005 f855 	bl	d9510 <__aeabi_f2d>
   d4466:	4602      	mov	r2, r0
   d4468:	460b      	mov	r3, r1
   d446a:	4630      	mov	r0, r6
   d446c:	4639      	mov	r1, r7
   d446e:	f004 fef1 	bl	d9254 <__adddf3>
   d4472:	a313      	add	r3, pc, #76	; (adr r3, d44c0 <_Z10dustSensorv+0x128>)
   d4474:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4478:	f004 feec 	bl	d9254 <__adddf3>
   d447c:	f005 fb94 	bl	d9ba8 <__aeabi_d2f>
   d4480:	4b19      	ldr	r3, [pc, #100]	; (d44e8 <_Z10dustSensorv+0x150>)
   d4482:	6018      	str	r0, [r3, #0]
    Serial.println("dust sensor engaged");
   d4484:	f002 fdb8 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4488:	4918      	ldr	r1, [pc, #96]	; (d44ec <_Z10dustSensorv+0x154>)
   d448a:	f002 fbac 	bl	d6be6 <_ZN5Print7printlnEPKc>
    lowPulseOccupancy = 0;
   d448e:	2300      	movs	r3, #0
   d4490:	6023      	str	r3, [r4, #0]
   d4492:	f001 ff7d 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
    dustStartTime = millis();
   d4496:	6028      	str	r0, [r5, #0]
  }
}
   d4498:	b003      	add	sp, #12
   d449a:	ecbd 8b02 	vpop	{d8}
   d449e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44a2:	bf00      	nop
   d44a4:	f3af 8000 	nop.w
   d44a8:	00000000 	.word	0x00000000
   d44ac:	40080000 	.word	0x40080000
   d44b0:	9999999a 	.word	0x9999999a
   d44b4:	3ff19999 	.word	0x3ff19999
   d44b8:	66666666 	.word	0x66666666
   d44bc:	400e6666 	.word	0x400e6666
   d44c0:	3d70a3d7 	.word	0x3d70a3d7
   d44c4:	3fe3d70a 	.word	0x3fe3d70a
   d44c8:	2003dcfc 	.word	0x2003dcfc
   d44cc:	2003e3cc 	.word	0x2003e3cc
   d44d0:	2003e3b8 	.word	0x2003e3b8
   d44d4:	2003e3b4 	.word	0x2003e3b4
   d44d8:	2003dcf8 	.word	0x2003dcf8
   d44dc:	40240000 	.word	0x40240000
   d44e0:	2003e1c0 	.word	0x2003e1c0
   d44e4:	44020000 	.word	0x44020000
   d44e8:	2003e1bc 	.word	0x2003e1bc
   d44ec:	000db95b 	.word	0x000db95b

000d44f0 <_Z16airQualitySensorv>:
void airQualitySensor(){ // function for measuring air quality
   d44f0:	b570      	push	{r4, r5, r6, lr}
  quality = AQsensor.slope();
   d44f2:	4824      	ldr	r0, [pc, #144]	; (d4584 <_Z16airQualitySensorv+0x94>)
   d44f4:	4d24      	ldr	r5, [pc, #144]	; (d4588 <_Z16airQualitySensorv+0x98>)
  AQval = AQsensor.getValue();
  AQCodeVal = 0;
   d44f6:	4c25      	ldr	r4, [pc, #148]	; (d458c <_Z16airQualitySensorv+0x9c>)
    lowPulseOccupancy = 0;
    dustStartTime = millis();
  }
}
void airQualitySensor(){ // function for measuring air quality
  quality = AQsensor.slope();
   d44f8:	f001 fe5a 	bl	d61b0 <_ZN16AirQualitySensor5slopeEv>
   d44fc:	6028      	str	r0, [r5, #0]
  AQval = AQsensor.getValue();
   d44fe:	4821      	ldr	r0, [pc, #132]	; (d4584 <_Z16airQualitySensorv+0x94>)
   d4500:	f001 fe3b 	bl	d617a <_ZN16AirQualitySensor8getValueEv>
  AQCodeVal = 0;
  if (quality == AirQualitySensor::FORCE_SIGNAL) {
   d4504:	4922      	ldr	r1, [pc, #136]	; (d4590 <_Z16airQualitySensorv+0xa0>)
    dustStartTime = millis();
  }
}
void airQualitySensor(){ // function for measuring air quality
  quality = AQsensor.slope();
  AQval = AQsensor.getValue();
   d4506:	4a23      	ldr	r2, [pc, #140]	; (d4594 <_Z16airQualitySensorv+0xa4>)
  AQCodeVal = 0;
  if (quality == AirQualitySensor::FORCE_SIGNAL) {
   d4508:	6809      	ldr	r1, [r1, #0]
    dustStartTime = millis();
  }
}
void airQualitySensor(){ // function for measuring air quality
  quality = AQsensor.slope();
  AQval = AQsensor.getValue();
   d450a:	6010      	str	r0, [r2, #0]
  AQCodeVal = 0;
   d450c:	2300      	movs	r3, #0
   d450e:	6023      	str	r3, [r4, #0]
  if (quality == AirQualitySensor::FORCE_SIGNAL) {
   d4510:	682b      	ldr	r3, [r5, #0]
   d4512:	428b      	cmp	r3, r1
   d4514:	4615      	mov	r5, r2
   d4516:	d00b      	beq.n	d4530 <_Z16airQualitySensorv+0x40>
    AQCodeVal = AirQualitySensor::FORCE_SIGNAL;
  }
  else if (quality == AirQualitySensor::HIGH_POLLUTION) {
   d4518:	4a1f      	ldr	r2, [pc, #124]	; (d4598 <_Z16airQualitySensorv+0xa8>)
   d451a:	6812      	ldr	r2, [r2, #0]
   d451c:	4293      	cmp	r3, r2
   d451e:	d007      	beq.n	d4530 <_Z16airQualitySensorv+0x40>
    AQCodeVal = AirQualitySensor::HIGH_POLLUTION;
  }
  else if (quality == AirQualitySensor::LOW_POLLUTION) {
   d4520:	4a1e      	ldr	r2, [pc, #120]	; (d459c <_Z16airQualitySensorv+0xac>)
   d4522:	6812      	ldr	r2, [r2, #0]
   d4524:	4293      	cmp	r3, r2
   d4526:	d003      	beq.n	d4530 <_Z16airQualitySensorv+0x40>
    AQCodeVal = AirQualitySensor::LOW_POLLUTION;
  }
  else if (quality == AirQualitySensor::FRESH_AIR) {
   d4528:	4a1d      	ldr	r2, [pc, #116]	; (d45a0 <_Z16airQualitySensorv+0xb0>)
   d452a:	6812      	ldr	r2, [r2, #0]
   d452c:	4293      	cmp	r3, r2
   d452e:	d100      	bne.n	d4532 <_Z16airQualitySensorv+0x42>
    AQCodeVal = AirQualitySensor::FRESH_AIR;
   d4530:	6023      	str	r3, [r4, #0]
  }
  Serial.println(AQval);
   d4532:	f002 fd61 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4536:	682d      	ldr	r5, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4538:	2d00      	cmp	r5, #0
   d453a:	4606      	mov	r6, r0
   d453c:	da04      	bge.n	d4548 <_Z16airQualitySensorv+0x58>
            t = print('-');
   d453e:	212d      	movs	r1, #45	; 0x2d
   d4540:	f002 fb42 	bl	d6bc8 <_ZN5Print5printEc>
            val = -n;
   d4544:	4269      	negs	r1, r5
   d4546:	e000      	b.n	d454a <_Z16airQualitySensorv+0x5a>
        } else {
            val = n;
   d4548:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
   d454a:	220a      	movs	r2, #10
   d454c:	4630      	mov	r0, r6
   d454e:	f002 fb54 	bl	d6bfa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4552:	4630      	mov	r0, r6
   d4554:	f002 fb3b 	bl	d6bce <_ZN5Print7printlnEv>
  Serial.println(AQCodeVal);
   d4558:	f002 fd4e 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d455c:	6824      	ldr	r4, [r4, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d455e:	2c00      	cmp	r4, #0
   d4560:	4605      	mov	r5, r0
   d4562:	da04      	bge.n	d456e <_Z16airQualitySensorv+0x7e>
            t = print('-');
   d4564:	212d      	movs	r1, #45	; 0x2d
   d4566:	f002 fb2f 	bl	d6bc8 <_ZN5Print5printEc>
            val = -n;
   d456a:	4261      	negs	r1, r4
   d456c:	e000      	b.n	d4570 <_Z16airQualitySensorv+0x80>
        } else {
            val = n;
   d456e:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4570:	4628      	mov	r0, r5
   d4572:	220a      	movs	r2, #10
   d4574:	f002 fb41 	bl	d6bfa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4578:	4628      	mov	r0, r5
   d457a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d457e:	f002 bb26 	b.w	d6bce <_ZN5Print7printlnEv>
   d4582:	bf00      	nop
   d4584:	2003e35c 	.word	0x2003e35c
   d4588:	2003e3bc 	.word	0x2003e3bc
   d458c:	2003e1c4 	.word	0x2003e1c4
   d4590:	000dc290 	.word	0x000dc290
   d4594:	2003e398 	.word	0x2003e398
   d4598:	000dc28c 	.word	0x000dc28c
   d459c:	000dc284 	.word	0x000dc284
   d45a0:	000dc288 	.word	0x000dc288

000d45a4 <loop>:
delay(100);

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d45a4:	b570      	push	{r4, r5, r6, lr}
  // The core of your code will likely live here.
  probeRead = analogRead(A1);
   d45a6:	2012      	movs	r0, #18
   d45a8:	f003 fb2f 	bl	d7c0a <analogRead>
  probeVal = probeRead;
   d45ac:	4d3c      	ldr	r5, [pc, #240]	; (d46a0 <loop+0xfc>)
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  probeRead = analogRead(A1);
   d45ae:	4b3d      	ldr	r3, [pc, #244]	; (d46a4 <loop+0x100>)
  dustSensor();
  airQualitySensor();
  oledPrint();  
  MQTT_connect();

  if((millis()-last)>120000){
   d45b0:	4c3d      	ldr	r4, [pc, #244]	; (d46a8 <loop+0x104>)
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  probeRead = analogRead(A1);
   d45b2:	6018      	str	r0, [r3, #0]
  probeVal = probeRead;
   d45b4:	6028      	str	r0, [r5, #0]
 // if(probeVal>=2450){
 //   pump();
 // }
  bmeValues();
   d45b6:	f7ff fe2f 	bl	d4218 <_Z9bmeValuesv>
  dustSensor();
   d45ba:	f7ff feed 	bl	d4398 <_Z10dustSensorv>
  airQualitySensor();
   d45be:	f7ff ff97 	bl	d44f0 <_Z16airQualitySensorv>
  oledPrint();  
   d45c2:	f7ff fe4d 	bl	d4260 <_Z9oledPrintv>
  MQTT_connect();
   d45c6:	f7ff fdef 	bl	d41a8 <_Z12MQTT_connectv>
   d45ca:	f001 fee1 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>

  if((millis()-last)>120000){
   d45ce:	6823      	ldr	r3, [r4, #0]
   d45d0:	1ac0      	subs	r0, r0, r3
   d45d2:	4b36      	ldr	r3, [pc, #216]	; (d46ac <loop+0x108>)
   d45d4:	4298      	cmp	r0, r3
   d45d6:	462e      	mov	r6, r5
   d45d8:	d917      	bls.n	d460a <loop+0x66>
    Serial.printf("pinging MQTT\n");
   d45da:	f002 fd0d 	bl	d6ff8 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45de:	4a34      	ldr	r2, [pc, #208]	; (d46b0 <loop+0x10c>)
   d45e0:	2100      	movs	r1, #0
   d45e2:	f002 fb2a 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
    if(!mqtt.ping()){
   d45e6:	2101      	movs	r1, #1
   d45e8:	4832      	ldr	r0, [pc, #200]	; (d46b4 <loop+0x110>)
   d45ea:	f001 fbe7 	bl	d5dbc <_ZN13Adafruit_MQTT4pingEh>
   d45ee:	4605      	mov	r5, r0
   d45f0:	b940      	cbnz	r0, d4604 <loop+0x60>
      Serial.printf("disconnecting \n");
   d45f2:	f002 fd01 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d45f6:	4a30      	ldr	r2, [pc, #192]	; (d46b8 <loop+0x114>)
   d45f8:	4629      	mov	r1, r5
   d45fa:	f002 fb1e 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
      mqtt.disconnect();
   d45fe:	482d      	ldr	r0, [pc, #180]	; (d46b4 <loop+0x110>)
   d4600:	f001 fb2e 	bl	d5c60 <_ZN13Adafruit_MQTT10disconnectEv>
   d4604:	f001 fec4 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
    }
    last = millis();
   d4608:	6020      	str	r0, [r4, #0]
    }
/*      for subscribing       */
  Adafruit_MQTT_Subscribe *subscription;
  while((subscription = mqtt.readSubscription(5000))){
    if(subscription == &SubData){
   d460a:	4d2c      	ldr	r5, [pc, #176]	; (d46bc <loop+0x118>)
    }
    last = millis();
    }
/*      for subscribing       */
  Adafruit_MQTT_Subscribe *subscription;
  while((subscription = mqtt.readSubscription(5000))){
   d460c:	4829      	ldr	r0, [pc, #164]	; (d46b4 <loop+0x110>)
   d460e:	f241 3188 	movw	r1, #5000	; 0x1388
   d4612:	f001 fb55 	bl	d5cc0 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d4616:	b1b0      	cbz	r0, d4646 <loop+0xa2>
    if(subscription == &SubData){
   d4618:	42a8      	cmp	r0, r5
   d461a:	d1f7      	bne.n	d460c <loop+0x68>
      value = atof((char *)SubData.lastread);
   d461c:	1d68      	adds	r0, r5, #5
   d461e:	f005 fb13 	bl	d9c48 <atof>
   d4622:	ec51 0b10 	vmov	r0, r1, d0
   d4626:	f005 fabf 	bl	d9ba8 <__aeabi_d2f>
   d462a:	ee07 0a90 	vmov	s15, r0
      if(value ==1){
   d462e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    }
/*      for subscribing       */
  Adafruit_MQTT_Subscribe *subscription;
  while((subscription = mqtt.readSubscription(5000))){
    if(subscription == &SubData){
      value = atof((char *)SubData.lastread);
   d4632:	4b23      	ldr	r3, [pc, #140]	; (d46c0 <loop+0x11c>)
      if(value ==1){
   d4634:	eef4 7a47 	vcmp.f32	s15, s14
   d4638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
/*      for subscribing       */
  Adafruit_MQTT_Subscribe *subscription;
  while((subscription = mqtt.readSubscription(5000))){
    if(subscription == &SubData){
      value = atof((char *)SubData.lastread);
   d463c:	6018      	str	r0, [r3, #0]
      if(value ==1){
   d463e:	d1e5      	bne.n	d460c <loop+0x68>
        pump();
   d4640:	f7ff fe82 	bl	d4348 <_Z4pumpv>
   d4644:	e7e2      	b.n	d460c <loop+0x68>
   d4646:	f001 fea3 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
      }
    }
  }
  /*      for publishing       */
  if((millis()-last>15000)){
   d464a:	6823      	ldr	r3, [r4, #0]
   d464c:	1ac0      	subs	r0, r0, r3
   d464e:	f643 2398 	movw	r3, #15000	; 0x3a98
   d4652:	4298      	cmp	r0, r3
   d4654:	d923      	bls.n	d469e <loop+0xfa>
    if(mqtt.Update()){
   d4656:	4817      	ldr	r0, [pc, #92]	; (d46b4 <loop+0x110>)
   d4658:	f001 fa38 	bl	d5acc <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d465c:	b1e0      	cbz	r0, d4698 <loop+0xf4>
      PubProbeVal.publish(probeVal);
   d465e:	6831      	ldr	r1, [r6, #0]
   d4660:	4818      	ldr	r0, [pc, #96]	; (d46c4 <loop+0x120>)
   d4662:	f001 fd41 	bl	d60e8 <_ZN21Adafruit_MQTT_Publish7publishEi>
      PubTemp.publish(temp);
   d4666:	4b18      	ldr	r3, [pc, #96]	; (d46c8 <loop+0x124>)
   d4668:	6818      	ldr	r0, [r3, #0]
   d466a:	f004 ff51 	bl	d9510 <__aeabi_f2d>
   d466e:	ec41 0b10 	vmov	d0, r0, r1
   d4672:	2102      	movs	r1, #2
   d4674:	4815      	ldr	r0, [pc, #84]	; (d46cc <loop+0x128>)
   d4676:	f001 fd39 	bl	d60ec <_ZN21Adafruit_MQTT_Publish7publishEdh>
      PubAQ.publish(AQval);
   d467a:	4b15      	ldr	r3, [pc, #84]	; (d46d0 <loop+0x12c>)
   d467c:	4815      	ldr	r0, [pc, #84]	; (d46d4 <loop+0x130>)
   d467e:	6819      	ldr	r1, [r3, #0]
   d4680:	f001 fd32 	bl	d60e8 <_ZN21Adafruit_MQTT_Publish7publishEi>
      PubDust.publish(concentration);
   d4684:	4b14      	ldr	r3, [pc, #80]	; (d46d8 <loop+0x134>)
   d4686:	6818      	ldr	r0, [r3, #0]
   d4688:	f004 ff42 	bl	d9510 <__aeabi_f2d>
   d468c:	ec41 0b10 	vmov	d0, r0, r1
   d4690:	2102      	movs	r1, #2
   d4692:	4812      	ldr	r0, [pc, #72]	; (d46dc <loop+0x138>)
   d4694:	f001 fd2a 	bl	d60ec <_ZN21Adafruit_MQTT_Publish7publishEdh>
   d4698:	f001 fe7a 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
    }
  last = millis();
   d469c:	6020      	str	r0, [r4, #0]
   d469e:	bd70      	pop	{r4, r5, r6, pc}
   d46a0:	2003e358 	.word	0x2003e358
   d46a4:	2003e1cc 	.word	0x2003e1cc
   d46a8:	2003e1c8 	.word	0x2003e1c8
   d46ac:	0001d4c0 	.word	0x0001d4c0
   d46b0:	000db96f 	.word	0x000db96f
   d46b4:	2003e214 	.word	0x2003e214
   d46b8:	000db97d 	.word	0x000db97d
   d46bc:	2003e2fc 	.word	0x2003e2fc
   d46c0:	2003e2f4 	.word	0x2003e2f4
   d46c4:	2003e39c 	.word	0x2003e39c
   d46c8:	2003e394 	.word	0x2003e394
   d46cc:	2003e2e8 	.word	0x2003e2e8
   d46d0:	2003e398 	.word	0x2003e398
   d46d4:	2003e3c0 	.word	0x2003e3c0
   d46d8:	2003e1bc 	.word	0x2003e1bc
   d46dc:	2003e3a8 	.word	0x2003e3a8

000d46e0 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d46e0:	b510      	push	{r4, lr}
   d46e2:	21d4      	movs	r1, #212	; 0xd4
   d46e4:	4604      	mov	r4, r0
   d46e6:	f003 fb1b 	bl	d7d20 <_ZdlPvj>
   d46ea:	4620      	mov	r0, r4
   d46ec:	bd10      	pop	{r4, pc}

000d46ee <_ZN16Adafruit_SSD1306D0Ev>:
   d46ee:	b510      	push	{r4, lr}
   d46f0:	2124      	movs	r1, #36	; 0x24
   d46f2:	4604      	mov	r4, r0
   d46f4:	f003 fb14 	bl	d7d20 <_ZdlPvj>
   d46f8:	4620      	mov	r0, r4
   d46fa:	bd10      	pop	{r4, pc}

000d46fc <_GLOBAL__sub_I_TheClient>:
  else if (quality == AirQualitySensor::FRESH_AIR) {
    AQCodeVal = AirQualitySensor::FRESH_AIR;
  }
  Serial.println(AQval);
  Serial.println(AQCodeVal);
   d46fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_SERVERPORT 1883
#define AIO_USERNAME "mauriciov99"
#define AIO_KEY "aio_tzOm50B3ppnXKjLlCYWlCvwf8vdK"
#define OLED_RESET A0

TCPClient TheClient;
   d46fe:	4e28      	ldr	r6, [pc, #160]	; (d47a0 <_GLOBAL__sub_I_TheClient+0xa4>)
   d4700:	4d28      	ldr	r5, [pc, #160]	; (d47a4 <_GLOBAL__sub_I_TheClient+0xa8>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4702:	4c29      	ldr	r4, [pc, #164]	; (d47a8 <_GLOBAL__sub_I_TheClient+0xac>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4704:	f001 fd94 	bl	d6230 <HAL_Pin_Map>
   d4708:	4630      	mov	r0, r6
   d470a:	f003 f90b 	bl	d7924 <_ZN9TCPClientC1Ev>
   d470e:	462a      	mov	r2, r5
   d4710:	4926      	ldr	r1, [pc, #152]	; (d47ac <_GLOBAL__sub_I_TheClient+0xb0>)
   d4712:	4630      	mov	r0, r6
   d4714:	f003 faf6 	bl	d7d04 <__aeabi_atexit>
   d4718:	4b25      	ldr	r3, [pc, #148]	; (d47b0 <_GLOBAL__sub_I_TheClient+0xb4>)
   d471a:	9300      	str	r3, [sp, #0]
   d471c:	f240 725b 	movw	r2, #1883	; 0x75b
   d4720:	4b24      	ldr	r3, [pc, #144]	; (d47b4 <_GLOBAL__sub_I_TheClient+0xb8>)
   d4722:	4925      	ldr	r1, [pc, #148]	; (d47b8 <_GLOBAL__sub_I_TheClient+0xbc>)
   d4724:	4620      	mov	r0, r4
   d4726:	f001 fa07 	bl	d5b38 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d472a:	4b24      	ldr	r3, [pc, #144]	; (d47bc <_GLOBAL__sub_I_TheClient+0xc0>)
   d472c:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4730:	462a      	mov	r2, r5
   d4732:	4923      	ldr	r1, [pc, #140]	; (d47c0 <_GLOBAL__sub_I_TheClient+0xc4>)

Adafruit_BME280 bme;
Adafruit_SSD1306 display(OLED_RESET);
   d4734:	4e23      	ldr	r6, [pc, #140]	; (d47c4 <_GLOBAL__sub_I_TheClient+0xc8>)
   d4736:	6023      	str	r3, [r4, #0]
#define AIO_USERNAME "mauriciov99"
#define AIO_KEY "aio_tzOm50B3ppnXKjLlCYWlCvwf8vdK"
#define OLED_RESET A0

TCPClient TheClient;
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4738:	4620      	mov	r0, r4
   d473a:	f003 fae3 	bl	d7d04 <__aeabi_atexit>

Adafruit_BME280 bme;
   d473e:	4822      	ldr	r0, [pc, #136]	; (d47c8 <_GLOBAL__sub_I_TheClient+0xcc>)
   d4740:	f000 f888 	bl	d4854 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SSD1306 display(OLED_RESET);
   d4744:	2113      	movs	r1, #19
   d4746:	4630      	mov	r0, r6
   d4748:	f000 fdc0 	bl	d52cc <_ZN16Adafruit_SSD1306C1Ea>
   d474c:	462a      	mov	r2, r5
   d474e:	491f      	ldr	r1, [pc, #124]	; (d47cc <_GLOBAL__sub_I_TheClient+0xd0>)
   d4750:	4630      	mov	r0, r6
   d4752:	f003 fad7 	bl	d7d04 <__aeabi_atexit>
AirQualitySensor AQsensor(A2); 
   d4756:	2111      	movs	r1, #17
   d4758:	481d      	ldr	r0, [pc, #116]	; (d47d0 <_GLOBAL__sub_I_TheClient+0xd4>)
   d475a:	f001 fcf4 	bl	d6146 <_ZN16AirQualitySensorC1Ei>

Adafruit_MQTT_Subscribe SubData = Adafruit_MQTT_Subscribe(&mqtt,AIO_USERNAME "/feeds/pumping");
   d475e:	4621      	mov	r1, r4
   d4760:	2300      	movs	r3, #0
   d4762:	4a1c      	ldr	r2, [pc, #112]	; (d47d4 <_GLOBAL__sub_I_TheClient+0xd8>)
   d4764:	481c      	ldr	r0, [pc, #112]	; (d47d8 <_GLOBAL__sub_I_TheClient+0xdc>)
   d4766:	f001 fcdf 	bl	d6128 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubProbeVal = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/probeValue");
   d476a:	4621      	mov	r1, r4
   d476c:	2300      	movs	r3, #0
   d476e:	4a1b      	ldr	r2, [pc, #108]	; (d47dc <_GLOBAL__sub_I_TheClient+0xe0>)
   d4770:	481b      	ldr	r0, [pc, #108]	; (d47e0 <_GLOBAL__sub_I_TheClient+0xe4>)
   d4772:	f001 fca5 	bl	d60c0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubTemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/roomTemp");
   d4776:	4621      	mov	r1, r4
   d4778:	2300      	movs	r3, #0
   d477a:	4a1a      	ldr	r2, [pc, #104]	; (d47e4 <_GLOBAL__sub_I_TheClient+0xe8>)
   d477c:	481a      	ldr	r0, [pc, #104]	; (d47e8 <_GLOBAL__sub_I_TheClient+0xec>)
   d477e:	f001 fc9f 	bl	d60c0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubAQ = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/seeedAQSensor");
   d4782:	4621      	mov	r1, r4
   d4784:	2300      	movs	r3, #0
   d4786:	4a19      	ldr	r2, [pc, #100]	; (d47ec <_GLOBAL__sub_I_TheClient+0xf0>)
   d4788:	4819      	ldr	r0, [pc, #100]	; (d47f0 <_GLOBAL__sub_I_TheClient+0xf4>)
   d478a:	f001 fc99 	bl	d60c0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubDust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/seeedDustSensor");
   d478e:	4a19      	ldr	r2, [pc, #100]	; (d47f4 <_GLOBAL__sub_I_TheClient+0xf8>)
   d4790:	4819      	ldr	r0, [pc, #100]	; (d47f8 <_GLOBAL__sub_I_TheClient+0xfc>)
   d4792:	2300      	movs	r3, #0
   d4794:	4621      	mov	r1, r4
  else if (quality == AirQualitySensor::FRESH_AIR) {
    AQCodeVal = AirQualitySensor::FRESH_AIR;
  }
  Serial.println(AQval);
  Serial.println(AQCodeVal);
   d4796:	b002      	add	sp, #8
   d4798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

Adafruit_MQTT_Subscribe SubData = Adafruit_MQTT_Subscribe(&mqtt,AIO_USERNAME "/feeds/pumping");
Adafruit_MQTT_Publish PubProbeVal = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/probeValue");
Adafruit_MQTT_Publish PubTemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/roomTemp");
Adafruit_MQTT_Publish PubAQ = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/seeedAQSensor");
Adafruit_MQTT_Publish PubDust = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/seeedDustSensor");
   d479c:	f001 bc90 	b.w	d60c0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d47a0:	2003e378 	.word	0x2003e378
   d47a4:	2003e1b8 	.word	0x2003e1b8
   d47a8:	2003e214 	.word	0x2003e214
   d47ac:	000d40d1 	.word	0x000d40d1
   d47b0:	000db9a9 	.word	0x000db9a9
   d47b4:	000db98d 	.word	0x000db98d
   d47b8:	000db999 	.word	0x000db999
   d47bc:	000dc028 	.word	0x000dc028
   d47c0:	000d40cd 	.word	0x000d40cd
   d47c4:	2003e334 	.word	0x2003e334
   d47c8:	2003e1d0 	.word	0x2003e1d0
   d47cc:	000d40cf 	.word	0x000d40cf
   d47d0:	2003e35c 	.word	0x2003e35c
   d47d4:	000db9ca 	.word	0x000db9ca
   d47d8:	2003e2fc 	.word	0x2003e2fc
   d47dc:	000db9e4 	.word	0x000db9e4
   d47e0:	2003e39c 	.word	0x2003e39c
   d47e4:	000dba01 	.word	0x000dba01
   d47e8:	2003e2e8 	.word	0x2003e2e8
   d47ec:	000dba1c 	.word	0x000dba1c
   d47f0:	2003e3c0 	.word	0x2003e3c0
   d47f4:	000dba3c 	.word	0x000dba3c
   d47f8:	2003e3a8 	.word	0x2003e3a8

000d47fc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d47fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d47fe:	4602      	mov	r2, r0
   d4800:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4802:	7913      	ldrb	r3, [r2, #4]
   d4804:	6895      	ldr	r5, [r2, #8]
   d4806:	b133      	cbz	r3, d4816 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4808:	b93d      	cbnz	r5, d481a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d480a:	490c      	ldr	r1, [pc, #48]	; (d483c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d480c:	b004      	add	sp, #16
   d480e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4812:	f002 b9d5 	b.w	d6bc0 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4816:	4b0a      	ldr	r3, [pc, #40]	; (d4840 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4818:	e000      	b.n	d481c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d481a:	4b0a      	ldr	r3, [pc, #40]	; (d4844 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d481c:	7b16      	ldrb	r6, [r2, #12]
   d481e:	4c0a      	ldr	r4, [pc, #40]	; (d4848 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4820:	490a      	ldr	r1, [pc, #40]	; (d484c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4822:	7b52      	ldrb	r2, [r2, #13]
   d4824:	9202      	str	r2, [sp, #8]
   d4826:	2e01      	cmp	r6, #1
   d4828:	bf08      	it	eq
   d482a:	4621      	moveq	r1, r4
   d482c:	9101      	str	r1, [sp, #4]
   d482e:	9500      	str	r5, [sp, #0]
   d4830:	4a07      	ldr	r2, [pc, #28]	; (d4850 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4832:	2100      	movs	r1, #0
   d4834:	f002 fa01 	bl	d6c3a <_ZN5Print11printf_implEbPKcz>
  }
   d4838:	b004      	add	sp, #16
   d483a:	bd70      	pop	{r4, r5, r6, pc}
   d483c:	000dba7d 	.word	0x000dba7d
   d4840:	000dc09d 	.word	0x000dc09d
   d4844:	000dba6c 	.word	0x000dba6c
   d4848:	000dba75 	.word	0x000dba75
   d484c:	000dba79 	.word	0x000dba79
   d4850:	000dba93 	.word	0x000dba93

000d4854 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4854:	22ff      	movs	r2, #255	; 0xff
   d4856:	7402      	strb	r2, [r0, #16]
   d4858:	7442      	strb	r2, [r0, #17]
   d485a:	7482      	strb	r2, [r0, #18]
   d485c:	74c2      	strb	r2, [r0, #19]
{ }
   d485e:	4770      	bx	lr

000d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4860:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4862:	4d09      	ldr	r5, [pc, #36]	; (d4888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4864:	6829      	ldr	r1, [r5, #0]
   d4866:	f011 0401 	ands.w	r4, r1, #1
   d486a:	d10a      	bne.n	d4882 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d486c:	4628      	mov	r0, r5
   d486e:	f7ff fc25 	bl	d40bc <__cxa_guard_acquire>
   d4872:	b130      	cbz	r0, d4882 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4874:	4621      	mov	r1, r4
   d4876:	4805      	ldr	r0, [pc, #20]	; (d488c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4878:	f001 ffd2 	bl	d6820 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d487c:	4628      	mov	r0, r5
   d487e:	f7ff fc22 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4882:	4802      	ldr	r0, [pc, #8]	; (d488c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4884:	bd38      	pop	{r3, r4, r5, pc}
   d4886:	bf00      	nop
   d4888:	2003e3d0 	.word	0x2003e3d0
   d488c:	2003e3d4 	.word	0x2003e3d4

000d4890 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4894:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4898:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d489a:	4605      	mov	r5, r0
   d489c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d489e:	d106      	bne.n	d48ae <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d48a0:	f7ff ffde 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d48a4:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d48a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d48aa:	f002 b8d5 	b.w	d6a58 <_ZN8SPIClass8transferEh>
   d48ae:	2607      	movs	r6, #7
   d48b0:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d48b2:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d48b6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d48ba:	2100      	movs	r1, #0
   d48bc:	b280      	uxth	r0, r0
   d48be:	f003 f978 	bl	d7bb2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d48c2:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d48c6:	fa08 f106 	lsl.w	r1, r8, r6
   d48ca:	4039      	ands	r1, r7
   d48cc:	b280      	uxth	r0, r0
   d48ce:	f003 f970 	bl	d7bb2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d48d2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d48d6:	2101      	movs	r1, #1
   d48d8:	b280      	uxth	r0, r0
   d48da:	f003 f96a 	bl	d7bb2 <digitalWrite>
        if (digitalRead(_miso))
   d48de:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d48e2:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d48e4:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d48e6:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d48e8:	f003 f97c 	bl	d7be4 <digitalRead>
   d48ec:	b108      	cbz	r0, d48f2 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d48ee:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d48f2:	f116 36ff 	adds.w	r6, r6, #4294967295
   d48f6:	d2de      	bcs.n	d48b6 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d48f8:	4620      	mov	r0, r4
   d48fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d48fe:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4900:	f7ff ffae 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4908:	f001 bfc7 	b.w	d689a <_ZN8SPIClass14endTransactionEv>

000d490c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d490c:	b510      	push	{r4, lr}
   d490e:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4910:	f7ff ffa6 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4914:	4621      	mov	r1, r4
    }
   d4916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d491a:	f001 bfd7 	b.w	d68cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4920 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4920:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4922:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4926:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4928:	b085      	sub	sp, #20
   d492a:	4604      	mov	r4, r0
   d492c:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d492e:	d121      	bne.n	d4974 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4930:	7901      	ldrb	r1, [r0, #4]
   d4932:	6800      	ldr	r0, [r0, #0]
   d4934:	f002 fc7d 	bl	d7232 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4938:	6820      	ldr	r0, [r4, #0]
   d493a:	6803      	ldr	r3, [r0, #0]
   d493c:	4629      	mov	r1, r5
   d493e:	689b      	ldr	r3, [r3, #8]
   d4940:	4798      	blx	r3
        _wire -> endTransmission();
   d4942:	6820      	ldr	r0, [r4, #0]
   d4944:	f002 fc80 	bl	d7248 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4948:	2203      	movs	r2, #3
   d494a:	7921      	ldrb	r1, [r4, #4]
   d494c:	6820      	ldr	r0, [r4, #0]
   d494e:	f002 fc6d 	bl	d722c <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4952:	6820      	ldr	r0, [r4, #0]
   d4954:	6803      	ldr	r3, [r0, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	4798      	blx	r3
        value <<= 8;
   d495a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d495c:	6820      	ldr	r0, [r4, #0]
   d495e:	6803      	ldr	r3, [r0, #0]
   d4960:	695b      	ldr	r3, [r3, #20]
   d4962:	4798      	blx	r3
   d4964:	4328      	orrs	r0, r5
        value <<= 8;
   d4966:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4968:	6820      	ldr	r0, [r4, #0]
   d496a:	6803      	ldr	r3, [r0, #0]
   d496c:	695b      	ldr	r3, [r3, #20]
   d496e:	4798      	blx	r3
   d4970:	4305      	orrs	r5, r0
   d4972:	e039      	b.n	d49e8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4974:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4978:	3301      	adds	r3, #1
   d497a:	d10e      	bne.n	d499a <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d497c:	4b1c      	ldr	r3, [pc, #112]	; (d49f0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d497e:	4a1d      	ldr	r2, [pc, #116]	; (d49f4 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4980:	9300      	str	r3, [sp, #0]
   d4982:	9202      	str	r2, [sp, #8]
   d4984:	2300      	movs	r3, #0
   d4986:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4988:	4668      	mov	r0, sp
   d498a:	f88d 3004 	strb.w	r3, [sp, #4]
   d498e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4992:	f88d 300d 	strb.w	r3, [sp, #13]
   d4996:	f7ff ffb9 	bl	d490c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d499a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d499e:	2100      	movs	r1, #0
   d49a0:	b280      	uxth	r0, r0
   d49a2:	f003 f906 	bl	d7bb2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d49a6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d49aa:	4620      	mov	r0, r4
   d49ac:	f7ff ff70 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d49b0:	2100      	movs	r1, #0
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff ff6c 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d49b8:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d49ba:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff ff67 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
   d49c2:	4328      	orrs	r0, r5
        value <<= 8;
   d49c4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d49c6:	2100      	movs	r1, #0
   d49c8:	4620      	mov	r0, r4
   d49ca:	f7ff ff61 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
   d49ce:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d49d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49d4:	2101      	movs	r1, #1
   d49d6:	b280      	uxth	r0, r0
   d49d8:	f003 f8eb 	bl	d7bb2 <digitalWrite>
        if (_sck == -1)
   d49dc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d49e0:	3301      	adds	r3, #1
   d49e2:	d101      	bne.n	d49e8 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d49e4:	f7ff ff8b 	bl	d48fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d49e8:	4628      	mov	r0, r5
   d49ea:	b005      	add	sp, #20
   d49ec:	bd30      	pop	{r4, r5, pc}
   d49ee:	bf00      	nop
   d49f0:	000dba68 	.word	0x000dba68
   d49f4:	0007a120 	.word	0x0007a120

000d49f8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d49f8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d49fa:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d49fc:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d49fe:	f7ff ff8f 	bl	d4920 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4a02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4a06:	d01e      	beq.n	d4a46 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4a08:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4a0a:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4a4c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4a0e:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4a12:	0052      	lsls	r2, r2, #1
   d4a14:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4a18:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4a1c:	435b      	muls	r3, r3
   d4a1e:	4350      	muls	r0, r2
   d4a20:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4a24:	131b      	asrs	r3, r3, #12
   d4a26:	4353      	muls	r3, r2
   d4a28:	139b      	asrs	r3, r3, #14
   d4a2a:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4a2e:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4a34:	3080      	adds	r0, #128	; 0x80
   d4a36:	1200      	asrs	r0, r0, #8
   d4a38:	ee07 0a90 	vmov	s15, r0
   d4a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4a40:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4a44:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4a46:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a50 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4a4a:	bd10      	pop	{r4, pc}
   d4a4c:	42c80000 	.word	0x42c80000
   d4a50:	7fc00000 	.word	0x7fc00000

000d4a54 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a54:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4a56:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a5a:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a5c:	b085      	sub	sp, #20
   d4a5e:	4604      	mov	r4, r0
   d4a60:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4a62:	d11d      	bne.n	d4aa0 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a64:	7901      	ldrb	r1, [r0, #4]
   d4a66:	6800      	ldr	r0, [r0, #0]
   d4a68:	f002 fbe3 	bl	d7232 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a6c:	6820      	ldr	r0, [r4, #0]
   d4a6e:	6803      	ldr	r3, [r0, #0]
   d4a70:	4629      	mov	r1, r5
   d4a72:	689b      	ldr	r3, [r3, #8]
   d4a74:	4798      	blx	r3
        _wire -> endTransmission();
   d4a76:	6820      	ldr	r0, [r4, #0]
   d4a78:	f002 fbe6 	bl	d7248 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4a7c:	2202      	movs	r2, #2
   d4a7e:	7921      	ldrb	r1, [r4, #4]
   d4a80:	6820      	ldr	r0, [r4, #0]
   d4a82:	f002 fbd3 	bl	d722c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4a86:	6820      	ldr	r0, [r4, #0]
   d4a88:	6803      	ldr	r3, [r0, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	4798      	blx	r3
   d4a8e:	4605      	mov	r5, r0
   d4a90:	6820      	ldr	r0, [r4, #0]
   d4a92:	6803      	ldr	r3, [r0, #0]
   d4a94:	695b      	ldr	r3, [r3, #20]
   d4a96:	4798      	blx	r3
   d4a98:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4a9c:	b285      	uxth	r5, r0
   d4a9e:	e035      	b.n	d4b0c <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4aa0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4aa4:	3301      	adds	r3, #1
   d4aa6:	d10e      	bne.n	d4ac6 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4aa8:	4b1a      	ldr	r3, [pc, #104]	; (d4b14 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4aaa:	4a1b      	ldr	r2, [pc, #108]	; (d4b18 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4aac:	9300      	str	r3, [sp, #0]
   d4aae:	9202      	str	r2, [sp, #8]
   d4ab0:	2300      	movs	r3, #0
   d4ab2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4ab4:	4668      	mov	r0, sp
   d4ab6:	f88d 3004 	strb.w	r3, [sp, #4]
   d4aba:	f88d 200c 	strb.w	r2, [sp, #12]
   d4abe:	f88d 300d 	strb.w	r3, [sp, #13]
   d4ac2:	f7ff ff23 	bl	d490c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4ac6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4aca:	2100      	movs	r1, #0
   d4acc:	b280      	uxth	r0, r0
   d4ace:	f003 f870 	bl	d7bb2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4ad2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ad6:	4620      	mov	r0, r4
   d4ad8:	f7ff feda 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4adc:	2100      	movs	r1, #0
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f7ff fed6 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	4605      	mov	r5, r0
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff fed1 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
   d4aee:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4af2:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4af4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4af8:	2101      	movs	r1, #1
   d4afa:	b280      	uxth	r0, r0
   d4afc:	f003 f859 	bl	d7bb2 <digitalWrite>
        if (_sck == -1)
   d4b00:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4b04:	3301      	adds	r3, #1
   d4b06:	d101      	bne.n	d4b0c <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4b08:	f7ff fef9 	bl	d48fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4b0c:	4628      	mov	r0, r5
   d4b0e:	b005      	add	sp, #20
   d4b10:	bd30      	pop	{r4, r5, pc}
   d4b12:	bf00      	nop
   d4b14:	000dba68 	.word	0x000dba68
   d4b18:	0007a120 	.word	0x0007a120

000d4b1c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4b1c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4b1e:	f7ff ff99 	bl	d4a54 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4b22:	ba40      	rev16	r0, r0
}
   d4b24:	b280      	uxth	r0, r0
   d4b26:	bd08      	pop	{r3, pc}

000d4b28 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4b28:	b510      	push	{r4, lr}
   d4b2a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4b2c:	f7ff ff64 	bl	d49f8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4b30:	21fd      	movs	r1, #253	; 0xfd
   d4b32:	4620      	mov	r0, r4
   d4b34:	f7ff ff8e 	bl	d4a54 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4b38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4b3c:	d038      	beq.n	d4bb0 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b3e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b42:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b44:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4b48:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b4a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b4e:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4b52:	fb02 3311 	mls	r3, r2, r1, r3
   d4b56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4b5a:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4b5c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4b60:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4b64:	4353      	muls	r3, r2
   d4b66:	12db      	asrs	r3, r3, #11
   d4b68:	4342      	muls	r2, r0
   d4b6a:	1292      	asrs	r2, r2, #10
   d4b6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4b70:	4353      	muls	r3, r2
   d4b72:	129b      	asrs	r3, r3, #10
   d4b74:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4b78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4b7c:	4353      	muls	r3, r2
   d4b7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4b82:	139b      	asrs	r3, r3, #14
   d4b84:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4b86:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4b88:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4b8c:	4352      	muls	r2, r2
   d4b8e:	11d2      	asrs	r2, r2, #7
   d4b90:	434a      	muls	r2, r1
   d4b92:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4b96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4b9a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4b9e:	bfa8      	it	ge
   d4ba0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4ba4:	131b      	asrs	r3, r3, #12
   d4ba6:	ee00 3a10 	vmov	s0, r3
   d4baa:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4bae:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4bb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4bb8 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4bb4:	bd10      	pop	{r4, pc}
   d4bb6:	bf00      	nop
   d4bb8:	7fc00000 	.word	0x7fc00000

000d4bbc <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bbc:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4bbe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4bc2:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bc4:	b085      	sub	sp, #20
   d4bc6:	4604      	mov	r4, r0
   d4bc8:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4bca:	d116      	bne.n	d4bfa <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4bcc:	7901      	ldrb	r1, [r0, #4]
   d4bce:	6800      	ldr	r0, [r0, #0]
   d4bd0:	f002 fb2f 	bl	d7232 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4bd4:	6820      	ldr	r0, [r4, #0]
   d4bd6:	6803      	ldr	r3, [r0, #0]
   d4bd8:	4629      	mov	r1, r5
   d4bda:	689b      	ldr	r3, [r3, #8]
   d4bdc:	4798      	blx	r3
        _wire -> endTransmission();
   d4bde:	6820      	ldr	r0, [r4, #0]
   d4be0:	f002 fb32 	bl	d7248 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4be4:	2201      	movs	r2, #1
   d4be6:	7921      	ldrb	r1, [r4, #4]
   d4be8:	6820      	ldr	r0, [r4, #0]
   d4bea:	f002 fb1f 	bl	d722c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4bee:	6820      	ldr	r0, [r4, #0]
   d4bf0:	6803      	ldr	r3, [r0, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	4798      	blx	r3
   d4bf6:	b2c5      	uxtb	r5, r0
   d4bf8:	e02e      	b.n	d4c58 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4bfa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4bfe:	3301      	adds	r3, #1
   d4c00:	d10e      	bne.n	d4c20 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4c02:	4b17      	ldr	r3, [pc, #92]	; (d4c60 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4c04:	4a17      	ldr	r2, [pc, #92]	; (d4c64 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4c06:	9300      	str	r3, [sp, #0]
   d4c08:	9202      	str	r2, [sp, #8]
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c0e:	4668      	mov	r0, sp
   d4c10:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c14:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c18:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c1c:	f7ff fe76 	bl	d490c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4c20:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c24:	2100      	movs	r1, #0
   d4c26:	b280      	uxth	r0, r0
   d4c28:	f002 ffc3 	bl	d7bb2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c2c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c30:	4620      	mov	r0, r4
   d4c32:	f7ff fe2d 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4c36:	2100      	movs	r1, #0
   d4c38:	4620      	mov	r0, r4
   d4c3a:	f7ff fe29 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
   d4c3e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4c40:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c44:	2101      	movs	r1, #1
   d4c46:	b280      	uxth	r0, r0
   d4c48:	f002 ffb3 	bl	d7bb2 <digitalWrite>
        if (_sck == -1)
   d4c4c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c50:	3301      	adds	r3, #1
   d4c52:	d101      	bne.n	d4c58 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4c54:	f7ff fe53 	bl	d48fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4c58:	4628      	mov	r0, r5
   d4c5a:	b005      	add	sp, #20
   d4c5c:	bd30      	pop	{r4, r5, pc}
   d4c5e:	bf00      	nop
   d4c60:	000dba68 	.word	0x000dba68
   d4c64:	0007a120 	.word	0x0007a120

000d4c68 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4c68:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4c6a:	21f3      	movs	r1, #243	; 0xf3
   d4c6c:	f7ff ffa6 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4c70:	f000 0001 	and.w	r0, r0, #1
   d4c74:	bd08      	pop	{r3, pc}

000d4c76 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c76:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c78:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c7a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c7c:	f7ff ff4e 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c80:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c82:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c84:	4620      	mov	r0, r4
   d4c86:	f7ff ff49 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4c8a:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4c8c:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c8e:	4620      	mov	r0, r4
   d4c90:	f7ff ff44 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c94:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4c96:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff ff3f 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c9e:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4ca0:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	f7ff ff3a 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4ca8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4caa:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cac:	4620      	mov	r0, r4
   d4cae:	f7ff ff35 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4cb2:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4cb4:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff ff30 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4cbc:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4cbe:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	f7ff ff2b 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4cc6:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4cc8:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cca:	4620      	mov	r0, r4
   d4ccc:	f7ff ff26 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4cd0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4cd2:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f7ff ff21 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4cda:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4cdc:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cde:	4620      	mov	r0, r4
   d4ce0:	f7ff ff1c 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
   d4ce4:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4ce6:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ce8:	4620      	mov	r0, r4
   d4cea:	f7ff ff17 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cee:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4cf0:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f7ff ff62 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cf8:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cfa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff0c 	bl	d4b1c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d04:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4d06:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f7ff ff57 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d0e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d10:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d14:	4620      	mov	r0, r4
   d4d16:	f7ff ff51 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
   d4d1a:	21e5      	movs	r1, #229	; 0xe5
   d4d1c:	4605      	mov	r5, r0
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f7ff ff4c 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
   d4d24:	f000 000f 	and.w	r0, r0, #15
   d4d28:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d2c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4d2e:	21e6      	movs	r1, #230	; 0xe6
   d4d30:	4620      	mov	r0, r4
   d4d32:	f7ff ff43 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
   d4d36:	21e5      	movs	r1, #229	; 0xe5
   d4d38:	4605      	mov	r5, r0
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f7ff ff3e 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
   d4d40:	1100      	asrs	r0, r0, #4
   d4d42:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d46:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4d48:	21e7      	movs	r1, #231	; 0xe7
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ff36 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
   d4d50:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4d54:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d58 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4d5a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d5e:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d60:	4604      	mov	r4, r0
   d4d62:	460e      	mov	r6, r1
   d4d64:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4d66:	d111      	bne.n	d4d8c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d68:	7901      	ldrb	r1, [r0, #4]
   d4d6a:	6800      	ldr	r0, [r0, #0]
   d4d6c:	f002 fa61 	bl	d7232 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d70:	6820      	ldr	r0, [r4, #0]
   d4d72:	6803      	ldr	r3, [r0, #0]
   d4d74:	4631      	mov	r1, r6
   d4d76:	689b      	ldr	r3, [r3, #8]
   d4d78:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4d7a:	6820      	ldr	r0, [r4, #0]
   d4d7c:	6803      	ldr	r3, [r0, #0]
   d4d7e:	4629      	mov	r1, r5
   d4d80:	689b      	ldr	r3, [r3, #8]
   d4d82:	4798      	blx	r3
        _wire -> endTransmission();
   d4d84:	6820      	ldr	r0, [r4, #0]
   d4d86:	f002 fa5f 	bl	d7248 <_ZN7TwoWire15endTransmissionEv>
   d4d8a:	e02d      	b.n	d4de8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4d8c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d90:	3301      	adds	r3, #1
   d4d92:	d10e      	bne.n	d4db2 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4d94:	4b15      	ldr	r3, [pc, #84]	; (d4dec <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4d96:	4a16      	ldr	r2, [pc, #88]	; (d4df0 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4d98:	9300      	str	r3, [sp, #0]
   d4d9a:	9202      	str	r2, [sp, #8]
   d4d9c:	2300      	movs	r3, #0
   d4d9e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4da0:	4668      	mov	r0, sp
   d4da2:	f88d 3004 	strb.w	r3, [sp, #4]
   d4da6:	f88d 200c 	strb.w	r2, [sp, #12]
   d4daa:	f88d 300d 	strb.w	r3, [sp, #13]
   d4dae:	f7ff fdad 	bl	d490c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4db2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4db6:	2100      	movs	r1, #0
   d4db8:	b280      	uxth	r0, r0
   d4dba:	f002 fefa 	bl	d7bb2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4dbe:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	f7ff fd64 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4dc8:	4629      	mov	r1, r5
   d4dca:	4620      	mov	r0, r4
   d4dcc:	f7ff fd60 	bl	d4890 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4dd0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dd4:	2101      	movs	r1, #1
   d4dd6:	b280      	uxth	r0, r0
   d4dd8:	f002 feeb 	bl	d7bb2 <digitalWrite>
    if (_sck == -1)
   d4ddc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4de0:	3301      	adds	r3, #1
   d4de2:	d101      	bne.n	d4de8 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4de4:	f7ff fd8b 	bl	d48fe <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4de8:	b004      	add	sp, #16
   d4dea:	bd70      	pop	{r4, r5, r6, pc}
   d4dec:	000dba68 	.word	0x000dba68
   d4df0:	0007a120 	.word	0x0007a120

000d4df4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4df6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4dfa:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4dfe:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4e02:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4e06:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4e0a:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4e0e:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4e12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4e16:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4e1a:	f366 1347 	bfi	r3, r6, #5, #3
   d4e1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4e22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4e26:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4e2a:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4e2c:	f367 0302 	bfi	r3, r7, #0, #3
   d4e30:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4e34:	f006 0207 	and.w	r2, r6, #7
   d4e38:	21f2      	movs	r1, #242	; 0xf2
   d4e3a:	f7ff ff8d 	bl	d4d58 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4e3e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4e42:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e46:	f002 0107 	and.w	r1, r2, #7
   d4e4a:	009b      	lsls	r3, r3, #2
   d4e4c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e50:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4e54:	4620      	mov	r0, r4
   d4e56:	21f5      	movs	r1, #245	; 0xf5
   d4e58:	f7ff ff7e 	bl	d4d58 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4e5c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e60:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e64:	f002 0107 	and.w	r1, r2, #7
   d4e68:	009b      	lsls	r3, r3, #2
   d4e6a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e6e:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4e72:	4620      	mov	r0, r4
   d4e74:	21f4      	movs	r1, #244	; 0xf4
}
   d4e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e7a:	f7ff bf6d 	b.w	d4d58 <_ZN15Adafruit_BME2806write8Ehh>

000d4e7e <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e7e:	b530      	push	{r4, r5, lr}
   d4e80:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e82:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4e86:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e88:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e8a:	d103      	bne.n	d4e94 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4e8c:	6820      	ldr	r0, [r4, #0]
   d4e8e:	f002 f999 	bl	d71c4 <_ZN7TwoWire5beginEv>
   d4e92:	e022      	b.n	d4eda <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4e94:	2101      	movs	r1, #1
   d4e96:	b280      	uxth	r0, r0
   d4e98:	f002 fe8b 	bl	d7bb2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4e9c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ea0:	2101      	movs	r1, #1
   d4ea2:	b280      	uxth	r0, r0
   d4ea4:	f002 fe74 	bl	d7b90 <pinMode>
        if (_sck == -1) {
   d4ea8:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4eac:	1c43      	adds	r3, r0, #1
   d4eae:	d104      	bne.n	d4eba <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4eb0:	f7ff fcd6 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4eb4:	f001 fcbe 	bl	d6834 <_ZN8SPIClass5beginEv>
   d4eb8:	e00f      	b.n	d4eda <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4eba:	2101      	movs	r1, #1
   d4ebc:	b280      	uxth	r0, r0
   d4ebe:	f002 fe67 	bl	d7b90 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4ec2:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4ec6:	2101      	movs	r1, #1
   d4ec8:	b280      	uxth	r0, r0
   d4eca:	f002 fe61 	bl	d7b90 <pinMode>
            pinMode(_miso, INPUT);
   d4ece:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	b280      	uxth	r0, r0
   d4ed6:	f002 fe5b 	bl	d7b90 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4eda:	21d0      	movs	r1, #208	; 0xd0
   d4edc:	4620      	mov	r0, r4
   d4ede:	f7ff fe6d 	bl	d4bbc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4ee2:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4ee4:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4ee6:	d120      	bne.n	d4f2a <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4ee8:	4620      	mov	r0, r4
   d4eea:	22b6      	movs	r2, #182	; 0xb6
   d4eec:	21e0      	movs	r1, #224	; 0xe0
   d4eee:	f7ff ff33 	bl	d4d58 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4ef2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4ef6:	f001 feed 	bl	d6cd4 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4efa:	4620      	mov	r0, r4
   d4efc:	f7ff feb4 	bl	d4c68 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4f00:	4605      	mov	r5, r0
   d4f02:	b108      	cbz	r0, d4f08 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4f04:	2064      	movs	r0, #100	; 0x64
   d4f06:	e7f6      	b.n	d4ef6 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4f08:	4620      	mov	r0, r4
   d4f0a:	f7ff feb4 	bl	d4c76 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4f0e:	2305      	movs	r3, #5
   d4f10:	9300      	str	r3, [sp, #0]
   d4f12:	461a      	mov	r2, r3
   d4f14:	2103      	movs	r1, #3
   d4f16:	4620      	mov	r0, r4
   d4f18:	9502      	str	r5, [sp, #8]
   d4f1a:	9501      	str	r5, [sp, #4]
   d4f1c:	f7ff ff6a 	bl	d4df4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4f20:	2064      	movs	r0, #100	; 0x64
   d4f22:	f001 fed7 	bl	d6cd4 <delay>
   d4f26:	2001      	movs	r0, #1
   d4f28:	e000      	b.n	d4f2c <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4f2a:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4f2c:	b005      	add	sp, #20
   d4f2e:	bd30      	pop	{r4, r5, pc}

000d4f30 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f30:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4f32:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f34:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4f36:	f002 febf 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d4f3a:	6020      	str	r0, [r4, #0]
	return init();
   d4f3c:	4620      	mov	r0, r4
}
   d4f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4f42:	f7ff bf9c 	b.w	d4e7e <_ZN15Adafruit_BME2804initEv>

000d4f46 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4f46:	f001 b973 	b.w	d6230 <HAL_Pin_Map>
	...

000d4f4c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4f4e:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f50:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4f54:	2c02      	cmp	r4, #2
   d4f56:	d008      	beq.n	d4f6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4f58:	2c03      	cmp	r4, #3
   d4f5a:	d00f      	beq.n	d4f7c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4f5c:	2c01      	cmp	r4, #1
   d4f5e:	d170      	bne.n	d5042 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4f60:	8904      	ldrh	r4, [r0, #8]
   d4f62:	3c01      	subs	r4, #1
   d4f64:	1aa2      	subs	r2, r4, r2
   d4f66:	b212      	sxth	r2, r2
      break;
   d4f68:	e00c      	b.n	d4f84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f6a:	8944      	ldrh	r4, [r0, #10]
   d4f6c:	3c01      	subs	r4, #1
   d4f6e:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4f70:	8904      	ldrh	r4, [r0, #8]
   d4f72:	1ae4      	subs	r4, r4, r3
   d4f74:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f76:	b212      	sxth	r2, r2
      x -= (w-1);
   d4f78:	b209      	sxth	r1, r1
      break;
   d4f7a:	e062      	b.n	d5042 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4f7c:	8944      	ldrh	r4, [r0, #10]
   d4f7e:	1ae4      	subs	r4, r4, r3
   d4f80:	1a61      	subs	r1, r4, r1
   d4f82:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4f84:	2a00      	cmp	r2, #0
   d4f86:	db5b      	blt.n	d5040 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4f88:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f8c:	4294      	cmp	r4, r2
   d4f8e:	f340 8090 	ble.w	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f92:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f94:	bfbe      	ittt	lt
   d4f96:	185b      	addlt	r3, r3, r1
   d4f98:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4f9a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f9c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4fa0:	18cc      	adds	r4, r1, r3
   d4fa2:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4fa4:	bfc4      	itt	gt
   d4fa6:	1a43      	subgt	r3, r0, r1
   d4fa8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4faa:	2b00      	cmp	r3, #0
   d4fac:	f340 8081 	ble.w	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4fb0:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4fb2:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4fb4:	4f3f      	ldr	r7, [pc, #252]	; (d50b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4fb6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fba:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4fbe:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4fc0:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fc4:	d017      	beq.n	d4ff6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4fc6:	f1c1 0108 	rsb	r1, r1, #8
   d4fca:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fcc:	493a      	ldr	r1, [pc, #232]	; (d50b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4fce:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fd0:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4fd2:	bf3f      	itttt	cc
   d4fd4:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4fd8:	21ff      	movcc	r1, #255	; 0xff
   d4fda:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4fde:	400e      	andcc	r6, r1
   d4fe0:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4fe2:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fe4:	bf0c      	ite	eq
   d4fe6:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4fe8:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fea:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4fec:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fee:	d360      	bcc.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4ff0:	1a18      	subs	r0, r3, r0
   d4ff2:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ff4:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4ff6:	2b07      	cmp	r3, #7
   d4ff8:	d917      	bls.n	d502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4ffa:	2d01      	cmp	r5, #1
   d4ffc:	bf0c      	ite	eq
   d4ffe:	20ff      	moveq	r0, #255	; 0xff
   d5000:	2000      	movne	r0, #0
   d5002:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d5006:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5008:	3a08      	subs	r2, #8
   d500a:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d500c:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d500e:	f801 0c80 	strb.w	r0, [r1, #-128]
   d5012:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5016:	d8f7      	bhi.n	d5008 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5018:	f1a3 0208 	sub.w	r2, r3, #8
   d501c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d5020:	3201      	adds	r2, #1
   d5022:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d5026:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d502a:	2b00      	cmp	r3, #0
   d502c:	d041      	beq.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d502e:	4a23      	ldr	r2, [pc, #140]	; (d50bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5030:	5cd2      	ldrb	r2, [r2, r3]
   d5032:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5034:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5036:	bf0c      	ite	eq
   d5038:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d503a:	4393      	bicne	r3, r2
   d503c:	7023      	strb	r3, [r4, #0]
   d503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5040:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5042:	2a00      	cmp	r2, #0
   d5044:	db35      	blt.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5046:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d504a:	4294      	cmp	r4, r2
   d504c:	dd31      	ble.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d504e:	2900      	cmp	r1, #0
    w += x;
   d5050:	bfbc      	itt	lt
   d5052:	18c9      	addlt	r1, r1, r3
   d5054:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5056:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d505a:	bfb8      	it	lt
   d505c:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d505e:	18ce      	adds	r6, r1, r3
   d5060:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5062:	bfc4      	itt	gt
   d5064:	1a63      	subgt	r3, r4, r1
   d5066:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5068:	2b00      	cmp	r3, #0
   d506a:	dd22      	ble.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d506c:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d506e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d5072:	4810      	ldr	r0, [pc, #64]	; (d50b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5074:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5078:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d507a:	2001      	movs	r0, #1
   d507c:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d5080:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5082:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d5084:	d109      	bne.n	d509a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d5086:	3b01      	subs	r3, #1
   d5088:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d508a:	1c5c      	adds	r4, r3, #1
   d508c:	d011      	beq.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d508e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5092:	4310      	orrs	r0, r2
   d5094:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5098:	e7f5      	b.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d509a:	43d2      	mvns	r2, r2
   d509c:	b2d2      	uxtb	r2, r2
   d509e:	3b01      	subs	r3, #1
   d50a0:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d50a2:	1c58      	adds	r0, r3, #1
   d50a4:	d005      	beq.n	d50b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d50a6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d50aa:	4010      	ands	r0, r2
   d50ac:	f801 0c01 	strb.w	r0, [r1, #-1]
   d50b0:	e7f5      	b.n	d509e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d50b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50b4:	2003dd10 	.word	0x2003dd10
   d50b8:	2003dd08 	.word	0x2003dd08
   d50bc:	2003dd00 	.word	0x2003dd00

000d50c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d50c2:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50c4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d50c8:	2c02      	cmp	r4, #2
   d50ca:	d008      	beq.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d50cc:	2c03      	cmp	r4, #3
   d50ce:	d00f      	beq.n	d50f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d50d0:	2c01      	cmp	r4, #1
   d50d2:	d112      	bne.n	d50fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d50d4:	8904      	ldrh	r4, [r0, #8]
   d50d6:	1ae4      	subs	r4, r4, r3
   d50d8:	1aa2      	subs	r2, r4, r2
   d50da:	b212      	sxth	r2, r2
      break;
   d50dc:	e06d      	b.n	d51ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50de:	8904      	ldrh	r4, [r0, #8]
   d50e0:	3c01      	subs	r4, #1
   d50e2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50e4:	8944      	ldrh	r4, [r0, #10]
   d50e6:	1ae4      	subs	r4, r4, r3
   d50e8:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50ea:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50ec:	b212      	sxth	r2, r2
      break;
   d50ee:	e004      	b.n	d50fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d50f0:	8944      	ldrh	r4, [r0, #10]
   d50f2:	3c01      	subs	r4, #1
   d50f4:	1a61      	subs	r1, r4, r1
   d50f6:	b209      	sxth	r1, r1
      break;
   d50f8:	e05f      	b.n	d51ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d50fa:	2900      	cmp	r1, #0
   d50fc:	db5c      	blt.n	d51b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d50fe:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5102:	428c      	cmp	r4, r1
   d5104:	f340 8091 	ble.w	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5108:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d510a:	bfbc      	itt	lt
   d510c:	18d2      	addlt	r2, r2, r3
   d510e:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5110:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d5114:	bfb8      	it	lt
   d5116:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5118:	18d4      	adds	r4, r2, r3
   d511a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d511c:	bfc4      	itt	gt
   d511e:	1a83      	subgt	r3, r0, r2
   d5120:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5122:	2b00      	cmp	r3, #0
   d5124:	f340 8081 	ble.w	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5128:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d512a:	4e40      	ldr	r6, [pc, #256]	; (d522c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d512c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d512e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d5130:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5134:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5138:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d513c:	d017      	beq.n	d516e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d513e:	f1c4 0408 	rsb	r4, r4, #8
   d5142:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5144:	4c3a      	ldr	r4, [pc, #232]	; (d5230 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5146:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5148:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d514a:	bf3f      	itttt	cc
   d514c:	ebc2 0e00 	rsbcc	lr, r2, r0
   d5150:	24ff      	movcc	r4, #255	; 0xff
   d5152:	fa44 f40e 	asrcc.w	r4, r4, lr
   d5156:	4027      	andcc	r7, r4
   d5158:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d515a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d515c:	bf0c      	ite	eq
   d515e:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d5160:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5162:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5164:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5166:	d360      	bcc.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d5168:	1a10      	subs	r0, r2, r0
   d516a:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d516c:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d516e:	2a07      	cmp	r2, #7
   d5170:	d917      	bls.n	d51a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5172:	2d01      	cmp	r5, #1
   d5174:	bf0c      	ite	eq
   d5176:	24ff      	moveq	r4, #255	; 0xff
   d5178:	2400      	movne	r4, #0
   d517a:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d517e:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5180:	3908      	subs	r1, #8
   d5182:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5184:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5186:	f800 4c80 	strb.w	r4, [r0, #-128]
   d518a:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d518e:	d8f7      	bhi.n	d5180 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d5190:	f1a2 0108 	sub.w	r1, r2, #8
   d5194:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d5198:	3101      	adds	r1, #1
   d519a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d519e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d51a2:	2a00      	cmp	r2, #0
   d51a4:	d041      	beq.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d51a6:	4923      	ldr	r1, [pc, #140]	; (d5234 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d51a8:	5c89      	ldrb	r1, [r1, r2]
   d51aa:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d51ac:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d51ae:	bf0c      	ite	eq
   d51b0:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d51b2:	438a      	bicne	r2, r1
   d51b4:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d51b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d51ba:	2900      	cmp	r1, #0
   d51bc:	db35      	blt.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51be:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51c2:	428c      	cmp	r4, r1
   d51c4:	dd31      	ble.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d51c6:	2a00      	cmp	r2, #0
    w += x;
   d51c8:	bfbc      	itt	lt
   d51ca:	18d2      	addlt	r2, r2, r3
   d51cc:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51ce:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d51d2:	bfb8      	it	lt
   d51d4:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51d6:	18d6      	adds	r6, r2, r3
   d51d8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d51da:	bfc4      	itt	gt
   d51dc:	1aa3      	subgt	r3, r4, r2
   d51de:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d51e0:	2b00      	cmp	r3, #0
   d51e2:	dd22      	ble.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d51e4:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d51e6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d51ea:	4810      	ldr	r0, [pc, #64]	; (d522c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d51ec:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d51f0:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d51f2:	2201      	movs	r2, #1
   d51f4:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d51f8:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d51fa:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d51fc:	d109      	bne.n	d5212 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d51fe:	1e5a      	subs	r2, r3, #1
   d5200:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d5202:	1c5c      	adds	r4, r3, #1
   d5204:	d011      	beq.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5206:	f810 2b01 	ldrb.w	r2, [r0], #1
   d520a:	430a      	orrs	r2, r1
   d520c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5210:	e7f5      	b.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d5212:	43c9      	mvns	r1, r1
   d5214:	b2c9      	uxtb	r1, r1
   d5216:	1e5a      	subs	r2, r3, #1
   d5218:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d521a:	1c5a      	adds	r2, r3, #1
   d521c:	d005      	beq.n	d522a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d521e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5222:	400a      	ands	r2, r1
   d5224:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5228:	e7f5      	b.n	d5216 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d522c:	2003dd10 	.word	0x2003dd10
   d5230:	2003dd08 	.word	0x2003dd08
   d5234:	2003dd00 	.word	0x2003dd00

000d5238 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d523a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d523c:	4606      	mov	r6, r0
   d523e:	4614      	mov	r4, r2
   d5240:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5242:	db3f      	blt.n	d52c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5244:	f000 fbbc 	bl	d59c0 <_ZN12Adafruit_GFX5widthEv>
   d5248:	4285      	cmp	r5, r0
   d524a:	da3b      	bge.n	d52c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d524c:	2c00      	cmp	r4, #0
   d524e:	db39      	blt.n	d52c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5250:	4630      	mov	r0, r6
   d5252:	f000 fbb8 	bl	d59c6 <_ZN12Adafruit_GFX6heightEv>
   d5256:	4284      	cmp	r4, r0
   d5258:	da34      	bge.n	d52c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d525a:	4630      	mov	r0, r6
   d525c:	f000 fbae 	bl	d59bc <_ZN12Adafruit_GFX11getRotationEv>
   d5260:	2802      	cmp	r0, #2
   d5262:	d127      	bne.n	d52b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5264:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5266:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5268:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d526a:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d526c:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d526e:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5270:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d5272:	b204      	sxth	r4, r0
   d5274:	e006      	b.n	d5284 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5276:	2801      	cmp	r0, #1
   d5278:	d104      	bne.n	d5284 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d527a:	8933      	ldrh	r3, [r6, #8]
   d527c:	3b01      	subs	r3, #1
   d527e:	1b1b      	subs	r3, r3, r4
   d5280:	462c      	mov	r4, r5
   d5282:	b21d      	sxth	r5, r3
   d5284:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5286:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5288:	fb94 f0f0 	sdiv	r0, r4, r0
   d528c:	b200      	sxth	r0, r0
   d528e:	4b0e      	ldr	r3, [pc, #56]	; (d52c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5290:	f004 0207 	and.w	r2, r4, #7
   d5294:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5298:	d104      	bne.n	d52a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d529a:	4097      	lsls	r7, r2
   d529c:	5c5a      	ldrb	r2, [r3, r1]
   d529e:	4317      	orrs	r7, r2
   d52a0:	545f      	strb	r7, [r3, r1]
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d52a4:	5c58      	ldrb	r0, [r3, r1]
   d52a6:	2701      	movs	r7, #1
   d52a8:	fa07 f202 	lsl.w	r2, r7, r2
   d52ac:	ea20 0202 	bic.w	r2, r0, r2
   d52b0:	545a      	strb	r2, [r3, r1]
   d52b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d52b4:	2803      	cmp	r0, #3
   d52b6:	d1de      	bne.n	d5276 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d52b8:	8973      	ldrh	r3, [r6, #10]
   d52ba:	3b01      	subs	r3, #1
   d52bc:	1b5b      	subs	r3, r3, r5
   d52be:	4625      	mov	r5, r4
   d52c0:	b21c      	sxth	r4, r3
   d52c2:	e7df      	b.n	d5284 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d52c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d52c6:	bf00      	nop
   d52c8:	2003dd10 	.word	0x2003dd10

000d52cc <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52cc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52ce:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52d0:	4604      	mov	r4, r0
   d52d2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52d4:	2180      	movs	r1, #128	; 0x80
   d52d6:	f000 fa87 	bl	d57e8 <_ZN12Adafruit_GFXC1Ess>
   d52da:	4b06      	ldr	r3, [pc, #24]	; (d52f4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d52dc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d52de:	23ff      	movs	r3, #255	; 0xff
   d52e0:	7763      	strb	r3, [r4, #29]
   d52e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d52e6:	77e3      	strb	r3, [r4, #31]
   d52e8:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d52ea:	f884 5020 	strb.w	r5, [r4, #32]
}
   d52ee:	4620      	mov	r0, r4
   d52f0:	bd38      	pop	{r3, r4, r5, pc}
   d52f2:	bf00      	nop
   d52f4:	000dbabc 	.word	0x000dbabc

000d52f8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d52f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d52fc:	2100      	movs	r1, #0
   d52fe:	4801      	ldr	r0, [pc, #4]	; (d5304 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d5300:	f004 bcf2 	b.w	d9ce8 <memset>
   d5304:	2003dd10 	.word	0x2003dd10

000d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5308:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d530a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d530e:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5310:	4604      	mov	r4, r0
   d5312:	460d      	mov	r5, r1
  if (sid != -1)
   d5314:	d028      	beq.n	d5368 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5316:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d531a:	2101      	movs	r1, #1
   d531c:	b280      	uxth	r0, r0
   d531e:	f002 fc48 	bl	d7bb2 <digitalWrite>
    digitalWrite(dc, LOW);
   d5322:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5326:	2100      	movs	r1, #0
   d5328:	b280      	uxth	r0, r0
   d532a:	f002 fc42 	bl	d7bb2 <digitalWrite>
    digitalWrite(cs, LOW);
   d532e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5332:	2100      	movs	r1, #0
   d5334:	b280      	uxth	r0, r0
   d5336:	f002 fc3c 	bl	d7bb2 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d533a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d533e:	b12b      	cbz	r3, d534c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5340:	f7ff fa8e 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5344:	4629      	mov	r1, r5
   d5346:	f001 fb87 	bl	d6a58 <_ZN8SPIClass8transferEh>
   d534a:	e005      	b.n	d5358 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d534c:	462b      	mov	r3, r5
   d534e:	2201      	movs	r2, #1
   d5350:	7fa1      	ldrb	r1, [r4, #30]
   d5352:	7f60      	ldrb	r0, [r4, #29]
   d5354:	f002 fc70 	bl	d7c38 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5358:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d535c:	2101      	movs	r1, #1
   d535e:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5364:	f002 bc25 	b.w	d7bb2 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d5368:	f002 fca6 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d536c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5370:	f001 ff63 	bl	d723a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5374:	f002 fca0 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d5378:	6803      	ldr	r3, [r0, #0]
   d537a:	2100      	movs	r1, #0
   d537c:	689b      	ldr	r3, [r3, #8]
   d537e:	4798      	blx	r3
    Wire.write(c);
   d5380:	f002 fc9a 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d5384:	6803      	ldr	r3, [r0, #0]
   d5386:	4629      	mov	r1, r5
   d5388:	689b      	ldr	r3, [r3, #8]
   d538a:	4798      	blx	r3
    Wire.endTransmission();
   d538c:	f002 fc94 	bl	d7cb8 <_Z19__fetch_global_Wirev>
  }
}
   d5390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5394:	f001 bf58 	b.w	d7248 <_ZN7TwoWire15endTransmissionEv>

000d5398 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5398:	b538      	push	{r3, r4, r5, lr}
   d539a:	4604      	mov	r4, r0
   d539c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d539e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d53a0:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d53a4:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d53a6:	3301      	adds	r3, #1
   d53a8:	d037      	beq.n	d541a <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d53aa:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d53ae:	2101      	movs	r1, #1
   d53b0:	b280      	uxth	r0, r0
   d53b2:	f002 fbed 	bl	d7b90 <pinMode>
    pinMode(cs, OUTPUT);
   d53b6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53ba:	2101      	movs	r1, #1
   d53bc:	b280      	uxth	r0, r0
   d53be:	f002 fbe7 	bl	d7b90 <pinMode>
    if (!hwSPI){
   d53c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53c6:	b95b      	cbnz	r3, d53e0 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d53c8:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53cc:	2101      	movs	r1, #1
   d53ce:	b280      	uxth	r0, r0
   d53d0:	f002 fbde 	bl	d7b90 <pinMode>
    	pinMode(sclk, OUTPUT);
   d53d4:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d53d8:	2101      	movs	r1, #1
   d53da:	b280      	uxth	r0, r0
   d53dc:	f002 fbd8 	bl	d7b90 <pinMode>
    	}
    if (hwSPI){
   d53e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53e4:	b1eb      	cbz	r3, d5422 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d53e6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53ea:	2101      	movs	r1, #1
   d53ec:	b280      	uxth	r0, r0
   d53ee:	f002 fbe0 	bl	d7bb2 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d53f2:	f7ff fa35 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53f6:	2101      	movs	r1, #1
   d53f8:	f001 fa2d 	bl	d6856 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d53fc:	f7ff fa30 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5400:	2110      	movs	r1, #16
   d5402:	f001 fb05 	bl	d6a10 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d5406:	f7ff fa2b 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d540a:	2100      	movs	r1, #0
   d540c:	f001 fa34 	bl	d6878 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5410:	f7ff fa26 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5414:	f001 fa0e 	bl	d6834 <_ZN8SPIClass5beginEv>
   d5418:	e003      	b.n	d5422 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d541a:	f002 fc4d 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d541e:	f001 fed1 	bl	d71c4 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d5422:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5426:	2101      	movs	r1, #1
   d5428:	b280      	uxth	r0, r0
   d542a:	f002 fbb1 	bl	d7b90 <pinMode>
  digitalWrite(rst, HIGH);
   d542e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5432:	2101      	movs	r1, #1
   d5434:	b280      	uxth	r0, r0
   d5436:	f002 fbbc 	bl	d7bb2 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d543a:	2001      	movs	r0, #1
   d543c:	f001 fc4a 	bl	d6cd4 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5440:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5444:	2100      	movs	r1, #0
   d5446:	b280      	uxth	r0, r0
   d5448:	f002 fbb3 	bl	d7bb2 <digitalWrite>
  // wait 10ms
  delay(10);
   d544c:	200a      	movs	r0, #10
   d544e:	f001 fc41 	bl	d6cd4 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d5452:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5456:	2101      	movs	r1, #1
   d5458:	b280      	uxth	r0, r0
   d545a:	f002 fbaa 	bl	d7bb2 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d545e:	4620      	mov	r0, r4
   d5460:	21ae      	movs	r1, #174	; 0xae
   d5462:	f7ff ff51 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5466:	4620      	mov	r0, r4
   d5468:	21d5      	movs	r1, #213	; 0xd5
   d546a:	f7ff ff4d 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d546e:	4620      	mov	r0, r4
   d5470:	2180      	movs	r1, #128	; 0x80
   d5472:	f7ff ff49 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5476:	4620      	mov	r0, r4
   d5478:	21a8      	movs	r1, #168	; 0xa8
   d547a:	f7ff ff45 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d547e:	4620      	mov	r0, r4
   d5480:	213f      	movs	r1, #63	; 0x3f
   d5482:	f7ff ff41 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5486:	4620      	mov	r0, r4
   d5488:	21d3      	movs	r1, #211	; 0xd3
   d548a:	f7ff ff3d 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d548e:	4620      	mov	r0, r4
   d5490:	2100      	movs	r1, #0
   d5492:	f7ff ff39 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5496:	4620      	mov	r0, r4
   d5498:	2140      	movs	r1, #64	; 0x40
   d549a:	f7ff ff35 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d549e:	218d      	movs	r1, #141	; 0x8d
   d54a0:	4620      	mov	r0, r4
   d54a2:	f7ff ff31 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54a6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d54a8:	bf0c      	ite	eq
   d54aa:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d54ac:	2114      	movne	r1, #20
   d54ae:	4620      	mov	r0, r4
   d54b0:	f7ff ff2a 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d54b4:	4620      	mov	r0, r4
   d54b6:	2120      	movs	r1, #32
   d54b8:	f7ff ff26 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d54bc:	4620      	mov	r0, r4
   d54be:	2100      	movs	r1, #0
   d54c0:	f7ff ff22 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d54c4:	4620      	mov	r0, r4
   d54c6:	21a1      	movs	r1, #161	; 0xa1
   d54c8:	f7ff ff1e 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d54cc:	4620      	mov	r0, r4
   d54ce:	21c8      	movs	r1, #200	; 0xc8
   d54d0:	f7ff ff1a 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d54d4:	4620      	mov	r0, r4
   d54d6:	21da      	movs	r1, #218	; 0xda
   d54d8:	f7ff ff16 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d54dc:	4620      	mov	r0, r4
   d54de:	2112      	movs	r1, #18
   d54e0:	f7ff ff12 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d54e4:	2181      	movs	r1, #129	; 0x81
   d54e6:	4620      	mov	r0, r4
   d54e8:	f7ff ff0e 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54ec:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d54ee:	bf0c      	ite	eq
   d54f0:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d54f2:	21cf      	movne	r1, #207	; 0xcf
   d54f4:	4620      	mov	r0, r4
   d54f6:	f7ff ff07 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d54fa:	21d9      	movs	r1, #217	; 0xd9
   d54fc:	4620      	mov	r0, r4
   d54fe:	f7ff ff03 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5502:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5504:	bf0c      	ite	eq
   d5506:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5508:	21f1      	movne	r1, #241	; 0xf1
   d550a:	4620      	mov	r0, r4
   d550c:	f7ff fefc 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5510:	4620      	mov	r0, r4
   d5512:	21db      	movs	r1, #219	; 0xdb
   d5514:	f7ff fef8 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5518:	4620      	mov	r0, r4
   d551a:	2140      	movs	r1, #64	; 0x40
   d551c:	f7ff fef4 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5520:	4620      	mov	r0, r4
   d5522:	21a4      	movs	r1, #164	; 0xa4
   d5524:	f7ff fef0 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5528:	4620      	mov	r0, r4
   d552a:	21a6      	movs	r1, #166	; 0xa6
   d552c:	f7ff feec 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5530:	4620      	mov	r0, r4
   d5532:	21af      	movs	r1, #175	; 0xaf
}
   d5534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5538:	f7ff bee6 	b.w	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d553c <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5540:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5542:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5544:	f7ff fee0 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5548:	2100      	movs	r1, #0
   d554a:	4620      	mov	r0, r4
   d554c:	f7ff fedc 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5550:	217f      	movs	r1, #127	; 0x7f
   d5552:	4620      	mov	r0, r4
   d5554:	f7ff fed8 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5558:	2122      	movs	r1, #34	; 0x22
   d555a:	4620      	mov	r0, r4
   d555c:	f7ff fed4 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5560:	2100      	movs	r1, #0
   d5562:	4620      	mov	r0, r4
   d5564:	f7ff fed0 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5568:	2107      	movs	r1, #7
   d556a:	4620      	mov	r0, r4
   d556c:	f7ff fecc 	bl	d5308 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d5570:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5574:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5634 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d5578:	3301      	adds	r3, #1
   d557a:	d035      	beq.n	d55e8 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d557c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5580:	2101      	movs	r1, #1
   d5582:	b280      	uxth	r0, r0
   d5584:	f002 fb15 	bl	d7bb2 <digitalWrite>
    digitalWrite(dc, HIGH);
   d5588:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d558c:	2101      	movs	r1, #1
   d558e:	b280      	uxth	r0, r0
   d5590:	f002 fb0f 	bl	d7bb2 <digitalWrite>
    digitalWrite(cs, LOW);
   d5594:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5598:	2100      	movs	r1, #0
   d559a:	b280      	uxth	r0, r0
   d559c:	f002 fb09 	bl	d7bb2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d55a0:	2001      	movs	r0, #1
   d55a2:	f000 feed 	bl	d6380 <HAL_Delay_Microseconds>
   d55a6:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d55ac:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55b0:	b12b      	cbz	r3, d55be <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d55b2:	f7ff f955 	bl	d4860 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d55b6:	4631      	mov	r1, r6
   d55b8:	f001 fa4e 	bl	d6a58 <_ZN8SPIClass8transferEh>
   d55bc:	e005      	b.n	d55ca <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d55be:	4633      	mov	r3, r6
   d55c0:	2201      	movs	r2, #1
   d55c2:	7fa1      	ldrb	r1, [r4, #30]
   d55c4:	7f60      	ldrb	r0, [r4, #29]
   d55c6:	f002 fb37 	bl	d7c38 <shiftOut>
   d55ca:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d55cc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d55d0:	d1ea      	bne.n	d55a8 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d55d2:	2001      	movs	r0, #1
   d55d4:	f000 fed4 	bl	d6380 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55d8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d55dc:	2101      	movs	r1, #1
   d55de:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d55e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55e4:	f002 bae5 	b.w	d7bb2 <digitalWrite>
   d55e8:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d55ea:	f002 fb65 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d55ee:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d55f2:	f001 fe22 	bl	d723a <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d55f6:	f002 fb5f 	bl	d7cb8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d55fa:	6803      	ldr	r3, [r0, #0]
   d55fc:	2140      	movs	r1, #64	; 0x40
   d55fe:	689b      	ldr	r3, [r3, #8]
   d5600:	4798      	blx	r3
   d5602:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5604:	f002 fb58 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d5608:	19af      	adds	r7, r5, r6
   d560a:	6803      	ldr	r3, [r0, #0]
   d560c:	b2bf      	uxth	r7, r7
   d560e:	689b      	ldr	r3, [r3, #8]
   d5610:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5614:	3601      	adds	r6, #1
   d5616:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5618:	2e10      	cmp	r6, #16
   d561a:	d1f3      	bne.n	d5604 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d561c:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d561e:	f002 fb4b 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d5622:	b2ad      	uxth	r5, r5
   d5624:	f001 fe10 	bl	d7248 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5628:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d562c:	d1dd      	bne.n	d55ea <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d562e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5632:	bf00      	nop
   d5634:	2003dd10 	.word	0x2003dd10

000d5638 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5638:	f000 bdfa 	b.w	d6230 <HAL_Pin_Map>

000d563c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5640:	b085      	sub	sp, #20
   d5642:	461e      	mov	r6, r3
   d5644:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5648:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d564c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d564e:	1a9a      	subs	r2, r3, r2
   d5650:	2a00      	cmp	r2, #0
   d5652:	bfb8      	it	lt
   d5654:	4252      	neglt	r2, r2
   d5656:	9200      	str	r2, [sp, #0]
   d5658:	1a72      	subs	r2, r6, r1
   d565a:	2a00      	cmp	r2, #0
   d565c:	bfb8      	it	lt
   d565e:	4252      	neglt	r2, r2
   d5660:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5662:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5664:	9a00      	ldr	r2, [sp, #0]
   d5666:	9901      	ldr	r1, [sp, #4]
   d5668:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d566a:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d566c:	dd05      	ble.n	d567a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d566e:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d5670:	461e      	mov	r6, r3
   d5672:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5674:	4622      	mov	r2, r4
    swap(x0, y0);
   d5676:	462c      	mov	r4, r5
   d5678:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d567a:	42b4      	cmp	r4, r6
   d567c:	dd05      	ble.n	d568a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d567e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5680:	461d      	mov	r5, r3
   d5682:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d5684:	4622      	mov	r2, r4
   d5686:	4634      	mov	r4, r6
   d5688:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d568a:	1b5a      	subs	r2, r3, r5
   d568c:	2a00      	cmp	r2, #0
   d568e:	bfb8      	it	lt
   d5690:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5692:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5696:	429d      	cmp	r5, r3
   d5698:	bfb4      	ite	lt
   d569a:	2301      	movlt	r3, #1
   d569c:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d56a0:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d56a4:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d56a6:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d56a8:	fa0f f788 	sxth.w	r7, r8
   d56ac:	2202      	movs	r2, #2
   d56ae:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d56b2:	42b4      	cmp	r4, r6
   d56b4:	dc1f      	bgt.n	d56f6 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d56b6:	9a01      	ldr	r2, [sp, #4]
   d56b8:	9b00      	ldr	r3, [sp, #0]
   d56ba:	4293      	cmp	r3, r2
   d56bc:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d56c0:	bfc8      	it	gt
   d56c2:	4622      	movgt	r2, r4
   d56c4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d56c8:	bfc8      	it	gt
   d56ca:	4629      	movgt	r1, r5
   d56cc:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d56ce:	bfdc      	itt	le
   d56d0:	462a      	movle	r2, r5
   d56d2:	4621      	movle	r1, r4
   d56d4:	4648      	mov	r0, r9
   d56d6:	47d8      	blx	fp
    }
    err -= dy;
   d56d8:	9b03      	ldr	r3, [sp, #12]
   d56da:	1aff      	subs	r7, r7, r3
   d56dc:	b2bb      	uxth	r3, r7
   d56de:	b21f      	sxth	r7, r3
    if (err < 0) {
   d56e0:	2f00      	cmp	r7, #0
   d56e2:	da05      	bge.n	d56f0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d56e4:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d56e6:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d56ea:	4415      	add	r5, r2
   d56ec:	b22d      	sxth	r5, r5
      err += dx;
   d56ee:	b23f      	sxth	r7, r7
   d56f0:	3401      	adds	r4, #1
   d56f2:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d56f4:	e7dd      	b.n	d56b2 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d56f6:	b005      	add	sp, #20
   d56f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d56fc <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5700:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5704:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5706:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d570a:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d570c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d570e:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5710:	4691      	mov	r9, r2
   d5712:	460d      	mov	r5, r1
   d5714:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d5716:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5718:	6823      	ldr	r3, [r4, #0]
   d571a:	9600      	str	r6, [sp, #0]
   d571c:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5720:	444a      	add	r2, r9
   d5722:	69df      	ldr	r7, [r3, #28]
   d5724:	4629      	mov	r1, r5
   d5726:	4643      	mov	r3, r8
   d5728:	4620      	mov	r0, r4
   d572a:	b212      	sxth	r2, r2
   d572c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d572e:	6823      	ldr	r3, [r4, #0]
   d5730:	9600      	str	r6, [sp, #0]
   d5732:	699f      	ldr	r7, [r3, #24]
   d5734:	464a      	mov	r2, r9
   d5736:	4653      	mov	r3, sl
   d5738:	4629      	mov	r1, r5
   d573a:	4620      	mov	r0, r4
   d573c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d573e:	6823      	ldr	r3, [r4, #0]
   d5740:	960a      	str	r6, [sp, #40]	; 0x28
   d5742:	f108 31ff 	add.w	r1, r8, #4294967295
   d5746:	4429      	add	r1, r5
   d5748:	699d      	ldr	r5, [r3, #24]
   d574a:	464a      	mov	r2, r9
   d574c:	4653      	mov	r3, sl
   d574e:	b209      	sxth	r1, r1
   d5750:	4620      	mov	r0, r4
   d5752:	46ac      	mov	ip, r5
}
   d5754:	b002      	add	sp, #8
   d5756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d575a:	4760      	bx	ip

000d575c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d575c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d575e:	3b01      	subs	r3, #1
   d5760:	4413      	add	r3, r2
   d5762:	6804      	ldr	r4, [r0, #0]
   d5764:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5768:	9501      	str	r5, [sp, #4]
   d576a:	b21b      	sxth	r3, r3
   d576c:	9300      	str	r3, [sp, #0]
   d576e:	6964      	ldr	r4, [r4, #20]
   d5770:	460b      	mov	r3, r1
   d5772:	47a0      	blx	r4
}
   d5774:	b003      	add	sp, #12
   d5776:	bd30      	pop	{r4, r5, pc}

000d5778 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5778:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d577a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d577e:	6804      	ldr	r4, [r0, #0]
   d5780:	e88d 0024 	stmia.w	sp, {r2, r5}
   d5784:	3b01      	subs	r3, #1
   d5786:	440b      	add	r3, r1
   d5788:	6964      	ldr	r4, [r4, #20]
   d578a:	b21b      	sxth	r3, r3
   d578c:	47a0      	blx	r4
}
   d578e:	b003      	add	sp, #12
   d5790:	bd30      	pop	{r4, r5, pc}

000d5792 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5792:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5796:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d579a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d579e:	4605      	mov	r5, r0
   d57a0:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d57a2:	460c      	mov	r4, r1
   d57a4:	eb01 0a03 	add.w	sl, r1, r3
   d57a8:	4554      	cmp	r4, sl
   d57aa:	da0b      	bge.n	d57c4 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d57ac:	682b      	ldr	r3, [r5, #0]
   d57ae:	f8cd 9000 	str.w	r9, [sp]
   d57b2:	699e      	ldr	r6, [r3, #24]
   d57b4:	4621      	mov	r1, r4
   d57b6:	4643      	mov	r3, r8
   d57b8:	463a      	mov	r2, r7
   d57ba:	4628      	mov	r0, r5
   d57bc:	3401      	adds	r4, #1
   d57be:	47b0      	blx	r6
   d57c0:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d57c2:	e7f1      	b.n	d57a8 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d57c4:	b002      	add	sp, #8
   d57c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d57ca <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d57ca:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d57cc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d57d0:	6804      	ldr	r4, [r0, #0]
   d57d2:	9101      	str	r1, [sp, #4]
   d57d4:	9200      	str	r2, [sp, #0]
   d57d6:	2200      	movs	r2, #0
   d57d8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d57dc:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d57de:	4611      	mov	r1, r2
   d57e0:	47a0      	blx	r4
}
   d57e2:	b002      	add	sp, #8
   d57e4:	bd10      	pop	{r4, pc}

000d57e6 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d57e6:	4770      	bx	lr

000d57e8 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d57e8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d57ea:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57ec:	2400      	movs	r4, #0
   d57ee:	4d08      	ldr	r5, [pc, #32]	; (d5810 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d57f0:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d57f2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d57f4:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d57f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d57fa:	2201      	movs	r2, #1
   d57fc:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d57fe:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5800:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d5802:	8204      	strh	r4, [r0, #16]
   d5804:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d5806:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d5808:	82c1      	strh	r1, [r0, #22]
   d580a:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d580c:	7682      	strb	r2, [r0, #26]
}
   d580e:	bd30      	pop	{r4, r5, pc}
   d5810:	000dbaf4 	.word	0x000dbaf4

000d5814 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5818:	b08f      	sub	sp, #60	; 0x3c
   d581a:	4605      	mov	r5, r0
   d581c:	9106      	str	r1, [sp, #24]
   d581e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5822:	9107      	str	r1, [sp, #28]
   d5824:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5828:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d582a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d582e:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5830:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5834:	4281      	cmp	r1, r0
   d5836:	dd7c      	ble.n	d5932 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5838:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d583c:	4291      	cmp	r1, r2
   d583e:	dd78      	ble.n	d5932 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5840:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d5842:	fb11 0008 	smlabb	r0, r1, r8, r0
   d5846:	2800      	cmp	r0, #0
   d5848:	dd73      	ble.n	d5932 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d584a:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d584e:	2800      	cmp	r0, #0
   d5850:	dd6f      	ble.n	d5932 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5852:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5856:	b296      	uxth	r6, r2
   d5858:	930c      	str	r3, [sp, #48]	; 0x30
   d585a:	f106 0308 	add.w	r3, r6, #8
   d585e:	b29b      	uxth	r3, r3
   d5860:	9109      	str	r1, [sp, #36]	; 0x24
   d5862:	2400      	movs	r4, #0
   d5864:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d5866:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5868:	bf1c      	itt	ne
   d586a:	4b33      	ldrne	r3, [pc, #204]	; (d5938 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d586c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d586e:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5870:	bf16      	itet	ne
   d5872:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d5874:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5878:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d587c:	9604      	str	r6, [sp, #16]
   d587e:	fa1f f388 	uxth.w	r3, r8
   d5882:	9303      	str	r3, [sp, #12]
   d5884:	9a03      	ldr	r2, [sp, #12]
   d5886:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d588a:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d588e:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5892:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5894:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5896:	920a      	str	r2, [sp, #40]	; 0x28
   d5898:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d589a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d589e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d58a0:	f019 0f01 	tst.w	r9, #1
   d58a4:	d011      	beq.n	d58ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d58a6:	f1b8 0f01 	cmp.w	r8, #1
   d58aa:	682b      	ldr	r3, [r5, #0]
   d58ac:	d103      	bne.n	d58b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d58ae:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d58b2:	9b07      	ldr	r3, [sp, #28]
   d58b4:	e014      	b.n	d58e0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d58b6:	9a07      	ldr	r2, [sp, #28]
   d58b8:	9201      	str	r2, [sp, #4]
   d58ba:	f8cd a000 	str.w	sl, [sp]
   d58be:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d58c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d58c6:	4653      	mov	r3, sl
   d58c8:	e018      	b.n	d58fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d58ca:	9b07      	ldr	r3, [sp, #28]
   d58cc:	9a08      	ldr	r2, [sp, #32]
   d58ce:	4293      	cmp	r3, r2
   d58d0:	d017      	beq.n	d5902 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d58d2:	f1b8 0f01 	cmp.w	r8, #1
   d58d6:	682b      	ldr	r3, [r5, #0]
   d58d8:	d107      	bne.n	d58ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d58da:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d58de:	4613      	mov	r3, r2
   d58e0:	b23a      	sxth	r2, r7
   d58e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d58e4:	4628      	mov	r0, r5
   d58e6:	47d8      	blx	fp
   d58e8:	e00b      	b.n	d5902 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d58ea:	9a08      	ldr	r2, [sp, #32]
   d58ec:	9201      	str	r2, [sp, #4]
   d58ee:	f8cd a000 	str.w	sl, [sp]
   d58f2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d58f6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d58fa:	4653      	mov	r3, sl
   d58fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d58fe:	4628      	mov	r0, r5
   d5900:	47d8      	blx	fp
   d5902:	9b04      	ldr	r3, [sp, #16]
   d5904:	9a03      	ldr	r2, [sp, #12]
   d5906:	4413      	add	r3, r2
   d5908:	b29b      	uxth	r3, r3
   d590a:	9304      	str	r3, [sp, #16]
   d590c:	9b05      	ldr	r3, [sp, #20]
   d590e:	4413      	add	r3, r2
   d5910:	b29b      	uxth	r3, r3
   d5912:	3701      	adds	r7, #1
   d5914:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5918:	b2bf      	uxth	r7, r7
   d591a:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d591c:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5920:	d1be      	bne.n	d58a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5924:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d5926:	3401      	adds	r4, #1
   d5928:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d592c:	b264      	sxtb	r4, r4
   d592e:	9309      	str	r3, [sp, #36]	; 0x24
   d5930:	d199      	bne.n	d5866 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5932:	b00f      	add	sp, #60	; 0x3c
   d5934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5938:	000dbb24 	.word	0x000dbb24

000d593c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d593c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d593e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5940:	b085      	sub	sp, #20
   d5942:	4604      	mov	r4, r0
   d5944:	460b      	mov	r3, r1

  if (c == '\n') {
   d5946:	d104      	bne.n	d5952 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5948:	7e02      	ldrb	r2, [r0, #24]
   d594a:	8a43      	ldrh	r3, [r0, #18]
   d594c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5950:	e023      	b.n	d599a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5952:	290d      	cmp	r1, #13
   d5954:	d024      	beq.n	d59a0 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5956:	7e05      	ldrb	r5, [r0, #24]
   d5958:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d595c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5960:	9502      	str	r5, [sp, #8]
   d5962:	8ac5      	ldrh	r5, [r0, #22]
   d5964:	9501      	str	r5, [sp, #4]
   d5966:	8a85      	ldrh	r5, [r0, #20]
   d5968:	9500      	str	r5, [sp, #0]
   d596a:	f7ff ff53 	bl	d5814 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d596e:	7e22      	ldrb	r2, [r4, #24]
   d5970:	8a23      	ldrh	r3, [r4, #16]
   d5972:	b291      	uxth	r1, r2
   d5974:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5978:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d597c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d597e:	b21b      	sxth	r3, r3
   d5980:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5982:	b168      	cbz	r0, d59a0 <_ZN12Adafruit_GFX5writeEh+0x64>
   d5984:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5988:	f06f 0505 	mvn.w	r5, #5
   d598c:	fb05 0202 	mla	r2, r5, r2, r0
   d5990:	4293      	cmp	r3, r2
   d5992:	dd05      	ble.n	d59a0 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d5994:	8a63      	ldrh	r3, [r4, #18]
   d5996:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d599a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d599c:	2300      	movs	r3, #0
   d599e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d59a0:	2001      	movs	r0, #1
   d59a2:	b005      	add	sp, #20
   d59a4:	bd30      	pop	{r4, r5, pc}

000d59a6 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d59a6:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d59a8:	8242      	strh	r2, [r0, #18]
   d59aa:	4770      	bx	lr

000d59ac <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d59ac:	2900      	cmp	r1, #0
   d59ae:	bf08      	it	eq
   d59b0:	2101      	moveq	r1, #1
   d59b2:	7601      	strb	r1, [r0, #24]
   d59b4:	4770      	bx	lr

000d59b6 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d59b6:	82c1      	strh	r1, [r0, #22]
   d59b8:	8281      	strh	r1, [r0, #20]
   d59ba:	4770      	bx	lr

000d59bc <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d59bc:	7e40      	ldrb	r0, [r0, #25]
   d59be:	4770      	bx	lr

000d59c0 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d59c0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d59c4:	4770      	bx	lr

000d59c6 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d59c6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d59ca:	4770      	bx	lr

000d59cc <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d59cc:	f000 bc30 	b.w	d6230 <HAL_Pin_Map>

000d59d0 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d59d0:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d59d2:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d59d6:	6803      	ldr	r3, [r0, #0]
   d59d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59da:	4798      	blx	r3
}
   d59dc:	3000      	adds	r0, #0
   d59de:	bf18      	it	ne
   d59e0:	2001      	movne	r0, #1
   d59e2:	bd08      	pop	{r3, pc}

000d59e4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d59e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59e6:	4606      	mov	r6, r0
   d59e8:	460f      	mov	r7, r1
   d59ea:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d59ec:	b1c4      	cbz	r4, d5a20 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d59ee:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d59f2:	6803      	ldr	r3, [r0, #0]
   d59f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59f6:	4798      	blx	r3
   d59f8:	b908      	cbnz	r0, d59fe <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d59fa:	2000      	movs	r0, #0
   d59fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d59fe:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5a02:	2cfa      	cmp	r4, #250	; 0xfa
   d5a04:	6803      	ldr	r3, [r0, #0]
   d5a06:	4625      	mov	r5, r4
   d5a08:	bfa8      	it	ge
   d5a0a:	25fa      	movge	r5, #250	; 0xfa
   d5a0c:	68db      	ldr	r3, [r3, #12]
   d5a0e:	462a      	mov	r2, r5
   d5a10:	4639      	mov	r1, r7
   d5a12:	4798      	blx	r3
   d5a14:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5a16:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5a18:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5a1a:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5a1c:	d0e6      	beq.n	d59ec <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5a1e:	e7ec      	b.n	d59fa <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5a20:	2001      	movs	r0, #1
}
   d5a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a24 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d5a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5a28:	4606      	mov	r6, r0
   d5a2a:	4688      	mov	r8, r1
   d5a2c:	4691      	mov	r9, r2
   d5a2e:	461f      	mov	r7, r3
   d5a30:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5a32:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5a34:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5a38:	6803      	ldr	r3, [r0, #0]
   d5a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a3c:	4798      	blx	r3
   d5a3e:	b1d0      	cbz	r0, d5a76 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5a40:	2d00      	cmp	r5, #0
   d5a42:	db18      	blt.n	d5a76 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5a44:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5a48:	6803      	ldr	r3, [r0, #0]
   d5a4a:	691b      	ldr	r3, [r3, #16]
   d5a4c:	4798      	blx	r3
   d5a4e:	b160      	cbz	r0, d5a6a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5a50:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5a54:	6803      	ldr	r3, [r0, #0]
   d5a56:	695b      	ldr	r3, [r3, #20]
   d5a58:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5a5a:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5a5e:	3401      	adds	r4, #1
   d5a60:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5a62:	454c      	cmp	r4, r9
   d5a64:	d007      	beq.n	d5a76 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5a66:	463d      	mov	r5, r7
   d5a68:	e7ec      	b.n	d5a44 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5a6a:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5a6c:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5a6e:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5a70:	f001 f930 	bl	d6cd4 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5a74:	e7de      	b.n	d5a34 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5a76:	4620      	mov	r0, r4
   d5a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a7c <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5a7c:	b570      	push	{r4, r5, r6, lr}
   d5a7e:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5a80:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5a84:	2296      	movs	r2, #150	; 0x96
   d5a86:	2100      	movs	r1, #0
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f004 f92d 	bl	d9ce8 <memset>
  strcpy((char *)buffer, servername);
   d5a8e:	6861      	ldr	r1, [r4, #4]
   d5a90:	4628      	mov	r0, r5
   d5a92:	f004 f959 	bl	d9d48 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d5a96:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5a9a:	8922      	ldrh	r2, [r4, #8]
   d5a9c:	6803      	ldr	r3, [r0, #0]
   d5a9e:	4629      	mov	r1, r5
   d5aa0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d5aa6:	3000      	adds	r0, #0
   d5aa8:	bf18      	it	ne
   d5aaa:	2001      	movne	r0, #1
   d5aac:	bd70      	pop	{r4, r5, r6, pc}

000d5aae <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5aae:	b510      	push	{r4, lr}
   d5ab0:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5ab2:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5ab6:	6803      	ldr	r3, [r0, #0]
   d5ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5aba:	4798      	blx	r3
   d5abc:	b120      	cbz	r0, d5ac8 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5abe:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ac6:	4798      	blx	r3
  }
  return true;
}
   d5ac8:	2001      	movs	r0, #1
   d5aca:	bd10      	pop	{r4, pc}

000d5acc <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5acc:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5ace:	6803      	ldr	r3, [r0, #0]
   d5ad0:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5ad2:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d5ad4:	4798      	blx	r3
   d5ad6:	b9c8      	cbnz	r0, d5b0c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5ad8:	4620      	mov	r0, r4
   d5ada:	f000 fa98 	bl	d600e <_ZN13Adafruit_MQTT7connectEv>
   d5ade:	2504      	movs	r5, #4
   d5ae0:	b170      	cbz	r0, d5b00 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d5ae2:	3d01      	subs	r5, #1
   d5ae4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5ae8:	d00a      	beq.n	d5b00 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d5aea:	4620      	mov	r0, r4
   d5aec:	f000 f8b8 	bl	d5c60 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5af0:	f241 3088 	movw	r0, #5000	; 0x1388
   d5af4:	f001 f8ee 	bl	d6cd4 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d5af8:	4620      	mov	r0, r4
   d5afa:	f000 fa88 	bl	d600e <_ZN13Adafruit_MQTT7connectEv>
   d5afe:	e7ef      	b.n	d5ae0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5b00:	6823      	ldr	r3, [r4, #0]
   d5b02:	4620      	mov	r0, r4
   d5b04:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d5b0a:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d5b0c:	bd70      	pop	{r4, r5, r6, pc}

000d5b0e <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5b0e:	f000 bb8f 	b.w	d6230 <HAL_Pin_Map>

000d5b12 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5b12:	b570      	push	{r4, r5, r6, lr}
   d5b14:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5b16:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5b18:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5b1a:	f004 f91d 	bl	d9d58 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5b1e:	1203      	asrs	r3, r0, #8
   d5b20:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5b22:	7060      	strb	r0, [r4, #1]
   d5b24:	b285      	uxth	r5, r0
   d5b26:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d5b28:	462a      	mov	r2, r5
   d5b2a:	4631      	mov	r1, r6
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	f004 f954 	bl	d9dda <strncpy>
  return p+len;
}
   d5b32:	1960      	adds	r0, r4, r5
   d5b34:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b38 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5b38:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5b3a:	6103      	str	r3, [r0, #16]
  password = pass;
   d5b3c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5b3e:	4d0d      	ldr	r5, [pc, #52]	; (d5b74 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5b40:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5b42:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5b44:	4a0c      	ldr	r2, [pc, #48]	; (d5b78 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5b46:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5b48:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5b4a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5b4c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5b4e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5b52:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5b56:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5b5a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5b5e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5b62:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5b64:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5b66:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5b6a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5b6e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5b72:	bd30      	pop	{r4, r5, pc}
   d5b74:	000dc04c 	.word	0x000dc04c
   d5b78:	000dc09d 	.word	0x000dc09d

000d5b7c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5b80:	fa0f fa83 	sxth.w	sl, r3
   d5b84:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5b86:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5b88:	699d      	ldr	r5, [r3, #24]
   d5b8a:	2201      	movs	r2, #1
   d5b8c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5b8e:	4606      	mov	r6, r0
   d5b90:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5b92:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5b94:	b2c0      	uxtb	r0, r0
   d5b96:	2801      	cmp	r0, #1
   d5b98:	d001      	beq.n	d5b9e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d5b9a:	2000      	movs	r0, #0
   d5b9c:	e034      	b.n	d5c08 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d5b9e:	1c65      	adds	r5, r4, #1
   d5ba0:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5ba4:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d5ba6:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d5baa:	6833      	ldr	r3, [r6, #0]
   d5bac:	699b      	ldr	r3, [r3, #24]
   d5bae:	2201      	movs	r2, #1
   d5bb0:	461f      	mov	r7, r3
   d5bb2:	4629      	mov	r1, r5
   d5bb4:	4653      	mov	r3, sl
   d5bb6:	4630      	mov	r0, r6
   d5bb8:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d5bba:	b2c0      	uxtb	r0, r0
   d5bbc:	2801      	cmp	r0, #1
   d5bbe:	d1ec      	bne.n	d5b9a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5bc0:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5bc8:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d5bca:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5bce:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5bd2:	d0e2      	beq.n	d5b9a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5bd4:	061b      	lsls	r3, r3, #24
   d5bd6:	d4e8      	bmi.n	d5baa <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5bd8:	9b01      	ldr	r3, [sp, #4]
   d5bda:	1b2c      	subs	r4, r5, r4
   d5bdc:	1b1b      	subs	r3, r3, r4
   d5bde:	3b01      	subs	r3, #1
   d5be0:	4599      	cmp	r9, r3
   d5be2:	6833      	ldr	r3, [r6, #0]
   d5be4:	d906      	bls.n	d5bf4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d5be6:	9a01      	ldr	r2, [sp, #4]
   d5be8:	699f      	ldr	r7, [r3, #24]
   d5bea:	3a01      	subs	r2, #1
   d5bec:	1b12      	subs	r2, r2, r4
   d5bee:	4653      	mov	r3, sl
   d5bf0:	b292      	uxth	r2, r2
   d5bf2:	e003      	b.n	d5bfc <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5bf4:	699f      	ldr	r7, [r3, #24]
   d5bf6:	fa1f f289 	uxth.w	r2, r9
   d5bfa:	4653      	mov	r3, sl
   d5bfc:	4629      	mov	r1, r5
   d5bfe:	4630      	mov	r0, r6
   d5c00:	47b8      	blx	r7
   d5c02:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5c04:	4420      	add	r0, r4
   d5c06:	b280      	uxth	r0, r0
}
   d5c08:	b003      	add	sp, #12
   d5c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5c10 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c12:	4605      	mov	r5, r0
   d5c14:	460c      	mov	r4, r1
   d5c16:	4616      	mov	r6, r2
   d5c18:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5c1a:	463b      	mov	r3, r7
   d5c1c:	2296      	movs	r2, #150	; 0x96
   d5c1e:	4621      	mov	r1, r4
   d5c20:	4628      	mov	r0, r5
   d5c22:	f7ff ffab 	bl	d5b7c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d5c26:	b148      	cbz	r0, d5c3c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d5c28:	7823      	ldrb	r3, [r4, #0]
   d5c2a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5c2e:	d005      	beq.n	d5c3c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d5c30:	f001 f9e2 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d5c34:	4902      	ldr	r1, [pc, #8]	; (d5c40 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d5c36:	f000 ffd6 	bl	d6be6 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d5c3a:	e7ee      	b.n	d5c1a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5c3e:	bf00      	nop
   d5c40:	000dc09e 	.word	0x000dc09e

000d5c44 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d5c44:	3102      	adds	r1, #2
   d5c46:	b2c9      	uxtb	r1, r1
   d5c48:	2909      	cmp	r1, #9
   d5c4a:	bf9a      	itte	ls
   d5c4c:	4b02      	ldrls	r3, [pc, #8]	; (d5c58 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d5c4e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d5c52:	4802      	ldrhi	r0, [pc, #8]	; (d5c5c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d5c54:	4770      	bx	lr
   d5c56:	bf00      	nop
   d5c58:	000dc068 	.word	0x000dc068
   d5c5c:	000dc0af 	.word	0x000dc0af

000d5c60 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d5c60:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d5c62:	23e0      	movs	r3, #224	; 0xe0
   d5c64:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5c68:	2300      	movs	r3, #0
   d5c6a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5c6e:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5c70:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5c72:	695b      	ldr	r3, [r3, #20]
   d5c74:	2202      	movs	r2, #2
   d5c76:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d5c7a:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5c7c:	6823      	ldr	r3, [r4, #0]
   d5c7e:	4620      	mov	r0, r4
   d5c80:	691b      	ldr	r3, [r3, #16]

}
   d5c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5c86:	4718      	bx	r3

000d5c88 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5c88:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d5c8c:	b530      	push	{r4, r5, lr}
   d5c8e:	4613      	mov	r3, r2
   d5c90:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d5c94:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d5c98:	428d      	cmp	r5, r1
   d5c9a:	d00f      	beq.n	d5cbc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5c9c:	42a3      	cmp	r3, r4
   d5c9e:	d1f9      	bne.n	d5c94 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d5ca0:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d5ca2:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d5ca6:	b924      	cbnz	r4, d5cb2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d5ca8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d5cac:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d5cb0:	e004      	b.n	d5cbc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d5cb2:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5cb4:	2b05      	cmp	r3, #5
   d5cb6:	d1f4      	bne.n	d5ca2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d5cb8:	2000      	movs	r0, #0
   d5cba:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d5cbc:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d5cbe:	bd30      	pop	{r4, r5, pc}

000d5cc0 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5cc4:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5cc8:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5cca:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5ccc:	2296      	movs	r2, #150	; 0x96
   d5cce:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5cd0:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5cd2:	f7ff ff53 	bl	d5b7c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d5cd6:	4606      	mov	r6, r0
   d5cd8:	b310      	cbz	r0, d5d20 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5cda:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5cde:	b2bb      	uxth	r3, r7
   d5ce0:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5ce2:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d5ce6:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5cea:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5cec:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5cee:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d5cf2:	f1bb 0f00 	cmp.w	fp, #0
   d5cf6:	d00e      	beq.n	d5d16 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5cf8:	f8db 1000 	ldr.w	r1, [fp]
   d5cfc:	9103      	str	r1, [sp, #12]
   d5cfe:	4608      	mov	r0, r1
   d5d00:	f004 f82a 	bl	d9d58 <strlen>
   d5d04:	42b8      	cmp	r0, r7
   d5d06:	4680      	mov	r8, r0
   d5d08:	9903      	ldr	r1, [sp, #12]
   d5d0a:	d104      	bne.n	d5d16 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5d0c:	463a      	mov	r2, r7
   d5d0e:	9802      	ldr	r0, [sp, #8]
   d5d10:	f004 f82a 	bl	d9d68 <strncasecmp>
   d5d14:	b128      	cbz	r0, d5d22 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d5d16:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5d18:	2d05      	cmp	r5, #5
   d5d1a:	d1e8      	bne.n	d5cee <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d5d1c:	2000      	movs	r0, #0
   d5d1e:	e04a      	b.n	d5db6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d5d20:	e049      	b.n	d5db6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d5d22:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d5d26:	f00a 0a06 	and.w	sl, sl, #6
   d5d2a:	f1ba 0f02 	cmp.w	sl, #2
   d5d2e:	d13f      	bne.n	d5db0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d5d30:	19e2      	adds	r2, r4, r7
   d5d32:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d5d36:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d5d3a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d5d3e:	2214      	movs	r2, #20
   d5d40:	2100      	movs	r1, #0
   d5d42:	f10b 0005 	add.w	r0, fp, #5
   d5d46:	f003 ffcf 	bl	d9ce8 <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d5d4a:	9b01      	ldr	r3, [sp, #4]
   d5d4c:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d5d50:	30fc      	adds	r0, #252	; 0xfc
   d5d52:	4406      	add	r6, r0
   d5d54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5d58:	ebca 0606 	rsb	r6, sl, r6
   d5d5c:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5d5e:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5d60:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5d64:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5d68:	bf28      	it	cs
   d5d6a:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5d6c:	4451      	add	r1, sl
   d5d6e:	4632      	mov	r2, r6
   d5d70:	4449      	add	r1, r9
   d5d72:	3005      	adds	r0, #5
   d5d74:	f003 ff9d 	bl	d9cb2 <memmove>
  subscriptions[i]->datalen = datalen;
   d5d78:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5d7c:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5d7e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5d82:	f003 0306 	and.w	r3, r3, #6
   d5d86:	2b02      	cmp	r3, #2
   d5d88:	d10f      	bne.n	d5daa <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5d8a:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5d8e:	123b      	asrs	r3, r7, #8
   d5d90:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5d94:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d5d96:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5d9a:	2240      	movs	r2, #64	; 0x40
   d5d9c:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5da0:	695b      	ldr	r3, [r3, #20]
   d5da2:	2204      	movs	r2, #4
   d5da4:	a905      	add	r1, sp, #20
   d5da6:	4620      	mov	r0, r4
   d5da8:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5daa:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5dae:	e002      	b.n	d5db6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5db0:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d5db2:	4682      	mov	sl, r0
   d5db4:	e7c3      	b.n	d5d3e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d5db6:	b007      	add	sp, #28
   d5db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5dbc <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d5dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5dc0:	4604      	mov	r4, r0
   d5dc2:	460d      	mov	r5, r1
   d5dc4:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5dc8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5dcc:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d5dd0:	b1d5      	cbz	r5, d5e08 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5dd2:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d5dd4:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d5dd8:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d5ddc:	695b      	ldr	r3, [r3, #20]
   d5dde:	2202      	movs	r2, #2
   d5de0:	4639      	mov	r1, r7
   d5de2:	4620      	mov	r0, r4
   d5de4:	4798      	blx	r3
   d5de6:	4606      	mov	r6, r0
   d5de8:	b910      	cbnz	r0, d5df0 <_ZN13Adafruit_MQTT4pingEh+0x34>
   d5dea:	3d01      	subs	r5, #1
   d5dec:	b2ed      	uxtb	r5, r5
   d5dee:	e7ef      	b.n	d5dd0 <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d5df0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5df4:	220d      	movs	r2, #13
   d5df6:	4639      	mov	r1, r7
   d5df8:	4620      	mov	r0, r4
   d5dfa:	f7ff ff09 	bl	d5c10 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d5dfe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5e02:	2bd0      	cmp	r3, #208	; 0xd0
   d5e04:	d1f1      	bne.n	d5dea <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d5e06:	e000      	b.n	d5e0a <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d5e08:	462e      	mov	r6, r5
}
   d5e0a:	4630      	mov	r0, r6
   d5e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5e10 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5e10:	b538      	push	{r3, r4, r5, lr}
   d5e12:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5e14:	4608      	mov	r0, r1
   d5e16:	2310      	movs	r3, #16
   d5e18:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5e1c:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5e1e:	4929      	ldr	r1, [pc, #164]	; (d5ec4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5e20:	f7ff fe77 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5e24:	2304      	movs	r3, #4
   d5e26:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5e28:	2302      	movs	r3, #2
   d5e2a:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5e2c:	69a3      	ldr	r3, [r4, #24]
   d5e2e:	b1ab      	cbz	r3, d5e5c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5e30:	781b      	ldrb	r3, [r3, #0]
   d5e32:	b19b      	cbz	r3, d5e5c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5e34:	2306      	movs	r3, #6
   d5e36:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5e38:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5e3c:	2b01      	cmp	r3, #1
   d5e3e:	d101      	bne.n	d5e44 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5e40:	230e      	movs	r3, #14
   d5e42:	e002      	b.n	d5e4a <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5e44:	2b02      	cmp	r3, #2
   d5e46:	d101      	bne.n	d5e4c <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5e48:	231e      	movs	r3, #30
   d5e4a:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5e4c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5e50:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d5e52:	bf02      	ittt	eq
   d5e54:	7843      	ldrbeq	r3, [r0, #1]
   d5e56:	f043 0320 	orreq.w	r3, r3, #32
   d5e5a:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5e5c:	6923      	ldr	r3, [r4, #16]
   d5e5e:	781b      	ldrb	r3, [r3, #0]
   d5e60:	b11b      	cbz	r3, d5e6a <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d5e62:	7843      	ldrb	r3, [r0, #1]
   d5e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5e68:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5e6a:	6963      	ldr	r3, [r4, #20]
   d5e6c:	781b      	ldrb	r3, [r3, #0]
   d5e6e:	b11b      	cbz	r3, d5e78 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5e70:	7843      	ldrb	r3, [r0, #1]
   d5e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5e76:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5e78:	2301      	movs	r3, #1
   d5e7a:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5e7c:	232c      	movs	r3, #44	; 0x2c
   d5e7e:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5e80:	68e1      	ldr	r1, [r4, #12]
   d5e82:	780b      	ldrb	r3, [r1, #0]
   d5e84:	b11b      	cbz	r3, d5e8e <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d5e86:	3004      	adds	r0, #4
   d5e88:	f7ff fe43 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
   d5e8c:	e002      	b.n	d5e94 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5e8e:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5e90:	7143      	strb	r3, [r0, #5]
      p++;
   d5e92:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5e94:	69a1      	ldr	r1, [r4, #24]
   d5e96:	b131      	cbz	r1, d5ea6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5e98:	780b      	ldrb	r3, [r1, #0]
   d5e9a:	b123      	cbz	r3, d5ea6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5e9c:	f7ff fe39 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5ea0:	69e1      	ldr	r1, [r4, #28]
   d5ea2:	f7ff fe36 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d5ea6:	6921      	ldr	r1, [r4, #16]
   d5ea8:	780b      	ldrb	r3, [r1, #0]
   d5eaa:	b10b      	cbz	r3, d5eb0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5eac:	f7ff fe31 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5eb0:	6961      	ldr	r1, [r4, #20]
   d5eb2:	780b      	ldrb	r3, [r1, #0]
   d5eb4:	b10b      	cbz	r3, d5eba <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d5eb6:	f7ff fe2c 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d5eba:	1b40      	subs	r0, r0, r5
   d5ebc:	b2c0      	uxtb	r0, r0
   d5ebe:	1e83      	subs	r3, r0, #2
   d5ec0:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5ec2:	bd38      	pop	{r3, r4, r5, pc}
   d5ec4:	000dc0bd 	.word	0x000dc0bd

000d5ec8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5ecc:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5ece:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5ed0:	460e      	mov	r6, r1
   d5ed2:	4691      	mov	r9, r2
   d5ed4:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5ed6:	f003 ff3f 	bl	d9d58 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5eda:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5ede:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5ee2:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5ee4:	f1b8 0f00 	cmp.w	r8, #0
   d5ee8:	d101      	bne.n	d5eee <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5eea:	1c83      	adds	r3, r0, #2
   d5eec:	e000      	b.n	d5ef0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5eee:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5ef0:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5ef4:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5ef6:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5ef8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5efc:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5efe:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5f02:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5f08:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5f0a:	bf18      	it	ne
   d5f0c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5f10:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5f14:	2b00      	cmp	r3, #0
   d5f16:	d1f5      	bne.n	d5f04 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5f18:	4649      	mov	r1, r9
   d5f1a:	f7ff fdfa 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>
   d5f1e:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5f20:	f1b8 0f00 	cmp.w	r8, #0
   d5f24:	d00c      	beq.n	d5f40 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5f26:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5f2a:	0a12      	lsrs	r2, r2, #8
   d5f2c:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5f2e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5f32:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5f34:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5f38:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5f3a:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5f3c:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5f40:	4622      	mov	r2, r4
   d5f42:	4639      	mov	r1, r7
   d5f44:	4618      	mov	r0, r3
   d5f46:	f003 feb4 	bl	d9cb2 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5f4a:	4420      	add	r0, r4
   d5f4c:	1b80      	subs	r0, r0, r6
}
   d5f4e:	b280      	uxth	r0, r0
   d5f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5f54 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f56:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5f5a:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5f5e:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5f60:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5f64:	4613      	mov	r3, r2
   d5f66:	460a      	mov	r2, r1
   d5f68:	4629      	mov	r1, r5
   d5f6a:	f7ff ffad 	bl	d5ec8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5f6e:	6823      	ldr	r3, [r4, #0]
   d5f70:	4602      	mov	r2, r0
   d5f72:	695b      	ldr	r3, [r3, #20]
   d5f74:	4629      	mov	r1, r5
   d5f76:	4620      	mov	r0, r4
   d5f78:	4798      	blx	r3
   d5f7a:	b908      	cbnz	r0, d5f80 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5f7c:	2000      	movs	r0, #0
   d5f7e:	e017      	b.n	d5fb0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d5f80:	b1b6      	cbz	r6, d5fb0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5f82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5f86:	2296      	movs	r2, #150	; 0x96
   d5f88:	4629      	mov	r1, r5
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f7ff fdf6 	bl	d5b7c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d5f90:	2804      	cmp	r0, #4
   d5f92:	d1f3      	bne.n	d5f7c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5f94:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5f98:	111b      	asrs	r3, r3, #4
   d5f9a:	2b04      	cmp	r3, #4
   d5f9c:	d1ee      	bne.n	d5f7c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d5f9e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d5fa0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5fa4:	ba5b      	rev16	r3, r3
   d5fa6:	3301      	adds	r3, #1
   d5fa8:	b29b      	uxth	r3, r3
   d5faa:	1ac3      	subs	r3, r0, r3
   d5fac:	4258      	negs	r0, r3
   d5fae:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5fb0:	b002      	add	sp, #8
   d5fb2:	bd70      	pop	{r4, r5, r6, pc}

000d5fb4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5fb6:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5fb8:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5fba:	461f      	mov	r7, r3
   d5fbc:	460e      	mov	r6, r1
   d5fbe:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5fc0:	f003 feca 	bl	d9d58 <strlen>
   d5fc4:	9700      	str	r7, [sp, #0]
   d5fc6:	b283      	uxth	r3, r0
   d5fc8:	4622      	mov	r2, r4
   d5fca:	4631      	mov	r1, r6
   d5fcc:	4628      	mov	r0, r5
   d5fce:	f7ff ffc1 	bl	d5f54 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5fd2:	b003      	add	sp, #12
   d5fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5fd6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5fd6:	b538      	push	{r3, r4, r5, lr}
   d5fd8:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5fda:	2382      	movs	r3, #130	; 0x82
   d5fdc:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5fde:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5fe0:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5fe4:	0a09      	lsrs	r1, r1, #8
   d5fe6:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d5fe8:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5fec:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5fee:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5ff2:	3101      	adds	r1, #1
   d5ff4:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5ff8:	4611      	mov	r1, r2
   d5ffa:	1d20      	adds	r0, r4, #4
   d5ffc:	f7ff fd89 	bl	d5b12 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d6000:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d6004:	1b00      	subs	r0, r0, r4
   d6006:	b2c0      	uxtb	r0, r0
   d6008:	1e83      	subs	r3, r0, #2
   d600a:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d600c:	bd38      	pop	{r3, r4, r5, pc}

000d600e <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d600e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d6012:	6803      	ldr	r3, [r0, #0]
   d6014:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d6016:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d6018:	4798      	blx	r3
   d601a:	b918      	cbnz	r0, d6024 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d601c:	f04f 30ff 	mov.w	r0, #4294967295
   d6020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d6024:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d6028:	4629      	mov	r1, r5
   d602a:	4620      	mov	r0, r4
   d602c:	f7ff fef0 	bl	d5e10 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d6030:	6823      	ldr	r3, [r4, #0]
   d6032:	b282      	uxth	r2, r0
   d6034:	695b      	ldr	r3, [r3, #20]
   d6036:	4629      	mov	r1, r5
   d6038:	4620      	mov	r0, r4
   d603a:	4798      	blx	r3
   d603c:	2800      	cmp	r0, #0
   d603e:	d0ed      	beq.n	d601c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d6040:	f241 7370 	movw	r3, #6000	; 0x1770
   d6044:	2296      	movs	r2, #150	; 0x96
   d6046:	4629      	mov	r1, r5
   d6048:	4620      	mov	r0, r4
   d604a:	f7ff fd97 	bl	d5b7c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d604e:	b2c0      	uxtb	r0, r0
   d6050:	2804      	cmp	r0, #4
   d6052:	d1e3      	bne.n	d601c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d6054:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6056:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d605a:	d1df      	bne.n	d601c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d605c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d6060:	b110      	cbz	r0, d6068 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d6062:	b240      	sxtb	r0, r0
   d6064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6068:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d606c:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d6070:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d6074:	b1fb      	cbz	r3, d60b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d6076:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d6078:	683a      	ldr	r2, [r7, #0]
   d607a:	4629      	mov	r1, r5
   d607c:	7913      	ldrb	r3, [r2, #4]
   d607e:	6812      	ldr	r2, [r2, #0]
   d6080:	4620      	mov	r0, r4
   d6082:	f7ff ffa8 	bl	d5fd6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d6086:	6823      	ldr	r3, [r4, #0]
   d6088:	b282      	uxth	r2, r0
   d608a:	695b      	ldr	r3, [r3, #20]
   d608c:	4629      	mov	r1, r5
   d608e:	4620      	mov	r0, r4
   d6090:	4798      	blx	r3
   d6092:	2800      	cmp	r0, #0
   d6094:	d0c2      	beq.n	d601c <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d6096:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d609a:	2209      	movs	r2, #9
   d609c:	4629      	mov	r1, r5
   d609e:	4620      	mov	r0, r4
   d60a0:	f7ff fdb6 	bl	d5c10 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d60a4:	b938      	cbnz	r0, d60b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d60a6:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d60a8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d60ac:	d1e4      	bne.n	d6078 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d60ae:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d60b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d60b6:	4547      	cmp	r7, r8
   d60b8:	d1da      	bne.n	d6070 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d60ba:	2000      	movs	r0, #0
   d60bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60c0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d60c0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d60c2:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d60c6:	7203      	strb	r3, [r0, #8]
}
   d60c8:	bd10      	pop	{r4, pc}

000d60ca <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d60ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d60cc:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d60ce:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d60d0:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d60d2:	a901      	add	r1, sp, #4
   d60d4:	f000 fcf2 	bl	d6abc <ltoa>
  return mqtt->publish(topic, payload, qos);
   d60d8:	7a23      	ldrb	r3, [r4, #8]
   d60da:	aa01      	add	r2, sp, #4
   d60dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d60e0:	f7ff ff68 	bl	d5fb4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d60e4:	b004      	add	sp, #16
   d60e6:	bd10      	pop	{r4, pc}

000d60e8 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d60e8:	f7ff bfef 	b.w	d60ca <_ZN21Adafruit_MQTT_Publish7publishEl>

000d60ec <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d60ec:	b510      	push	{r4, lr}
   d60ee:	b092      	sub	sp, #72	; 0x48
   d60f0:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d60f2:	460b      	mov	r3, r1
   d60f4:	2200      	movs	r2, #0
   d60f6:	490b      	ldr	r1, [pc, #44]	; (d6124 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d60f8:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d60fa:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d60fe:	f000 fb2b 	bl	d6758 <sprintf>
  sprintf(sout, fmt, val);
   d6102:	ed9d 0b00 	vldr	d0, [sp]
   d6106:	a902      	add	r1, sp, #8
   d6108:	ec53 2b10 	vmov	r2, r3, d0
   d610c:	a807      	add	r0, sp, #28
   d610e:	f000 fb23 	bl	d6758 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d6112:	7a23      	ldrb	r3, [r4, #8]
   d6114:	aa07      	add	r2, sp, #28
   d6116:	e894 0003 	ldmia.w	r4, {r0, r1}
   d611a:	f7ff ff4b 	bl	d5fb4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d611e:	b012      	add	sp, #72	; 0x48
   d6120:	bd10      	pop	{r4, pc}
   d6122:	bf00      	nop
   d6124:	000dc0c2 	.word	0x000dc0c2

000d6128 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d6128:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d612a:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d612c:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d612e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d6130:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d6132:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d6134:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d6136:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d6138:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d613a:	6283      	str	r3, [r0, #40]	; 0x28
   d613c:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d613e:	6303      	str	r3, [r0, #48]	; 0x30
}
   d6140:	bd10      	pop	{r4, pc}

000d6142 <_GLOBAL__sub_I__Z11printBufferPht>:
   d6142:	f000 b875 	b.w	d6230 <HAL_Pin_Map>

000d6146 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d6146:	2200      	movs	r2, #0
   d6148:	6001      	str	r1, [r0, #0]
   d614a:	6102      	str	r2, [r0, #16]
   d614c:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d614e:	4770      	bx	lr

000d6150 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d6150:	b510      	push	{r4, lr}
   d6152:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d6154:	8800      	ldrh	r0, [r0, #0]
   d6156:	f001 fd58 	bl	d7c0a <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d615a:	f240 3312 	movw	r3, #786	; 0x312
   d615e:	f1a0 020b 	sub.w	r2, r0, #11
   d6162:	429a      	cmp	r2, r3
   d6164:	d807      	bhi.n	d6176 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d6166:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d6168:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d616a:	60e0      	str	r0, [r4, #12]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d616c:	f000 f910 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d6170:	61a0      	str	r0, [r4, #24]

        return true;
   d6172:	2001      	movs	r0, #1
   d6174:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d6176:	2000      	movs	r0, #0
    }
}
   d6178:	bd10      	pop	{r4, pc}

000d617a <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d617a:	6880      	ldr	r0, [r0, #8]
   d617c:	4770      	bx	lr
	...

000d6180 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d6180:	b510      	push	{r4, lr}
   d6182:	4604      	mov	r4, r0
   d6184:	f000 f904 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d6188:	69a3      	ldr	r3, [r4, #24]
   d618a:	1ac0      	subs	r0, r0, r3
   d618c:	4b07      	ldr	r3, [pc, #28]	; (d61ac <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d618e:	4298      	cmp	r0, r3
   d6190:	d90a      	bls.n	d61a8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d6192:	6923      	ldr	r3, [r4, #16]
   d6194:	6962      	ldr	r2, [r4, #20]
   d6196:	fb93 f3f2 	sdiv	r3, r3, r2
   d619a:	60e3      	str	r3, [r4, #12]
   d619c:	f000 f8f8 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d61a0:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d61a2:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d61a4:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d61a6:	6163      	str	r3, [r4, #20]
   d61a8:	bd10      	pop	{r4, pc}
   d61aa:	bf00      	nop
   d61ac:	0007a120 	.word	0x0007a120

000d61b0 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d61b0:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d61b2:	6883      	ldr	r3, [r0, #8]
   d61b4:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d61b6:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d61b8:	8800      	ldrh	r0, [r0, #0]
   d61ba:	f001 fd26 	bl	d7c0a <analogRead>

    _voltageSum += _currentVoltage;
   d61be:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d61c0:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d61c2:	4418      	add	r0, r3
    _volSumCount += 1;
   d61c4:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d61c6:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d61c8:	3301      	adds	r3, #1
   d61ca:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d61cc:	4620      	mov	r0, r4
   d61ce:	f7ff ffd7 	bl	d6180 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d61d2:	68a2      	ldr	r2, [r4, #8]
   d61d4:	6861      	ldr	r1, [r4, #4]
   d61d6:	1a51      	subs	r1, r2, r1
   d61d8:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d61dc:	dc10      	bgt.n	d6200 <_ZN16AirQualitySensor5slopeEv+0x50>
   d61de:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d61e2:	dc0d      	bgt.n	d6200 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d61e4:	68e3      	ldr	r3, [r4, #12]
   d61e6:	1ad3      	subs	r3, r2, r3
   d61e8:	2b96      	cmp	r3, #150	; 0x96
   d61ea:	dc0b      	bgt.n	d6204 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d61ec:	29c8      	cmp	r1, #200	; 0xc8
   d61ee:	dd02      	ble.n	d61f6 <_ZN16AirQualitySensor5slopeEv+0x46>
   d61f0:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d61f4:	d108      	bne.n	d6208 <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d61f6:	2b32      	cmp	r3, #50	; 0x32
   d61f8:	bfcc      	ite	gt
   d61fa:	2002      	movgt	r0, #2
   d61fc:	2003      	movle	r0, #3
   d61fe:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d6200:	2000      	movs	r0, #0
   d6202:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d6204:	2001      	movs	r0, #1
   d6206:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d6208:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d620a:	bd10      	pop	{r4, pc}

000d620c <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d620c:	f000 b810 	b.w	d6230 <HAL_Pin_Map>

000d6210 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <netdb_freeaddrinfo+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	689b      	ldr	r3, [r3, #8]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030268 	.word	0x00030268

000d6220 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <netdb_getaddrinfo+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	68db      	ldr	r3, [r3, #12]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030268 	.word	0x00030268

000d6230 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <HAL_Pin_Map+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	681b      	ldr	r3, [r3, #0]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	0003022c 	.word	0x0003022c

000d6240 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <HAL_Validate_Pin_Function+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	685b      	ldr	r3, [r3, #4]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	0003022c 	.word	0x0003022c

000d6250 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <HAL_Pin_Mode+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	689b      	ldr	r3, [r3, #8]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	0003022c 	.word	0x0003022c

000d6260 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <HAL_Get_Pin_Mode+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	68db      	ldr	r3, [r3, #12]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	0003022c 	.word	0x0003022c

000d6270 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <HAL_GPIO_Write+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	691b      	ldr	r3, [r3, #16]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	0003022c 	.word	0x0003022c

000d6280 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <HAL_GPIO_Read+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	695b      	ldr	r3, [r3, #20]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003022c 	.word	0x0003022c

000d6290 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <HAL_ADC_Read+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	0003022c 	.word	0x0003022c

000d62a0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <HAL_Pulse_In+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	0003022c 	.word	0x0003022c

000d62b0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <HAL_SPI_Begin+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	681b      	ldr	r3, [r3, #0]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030230 	.word	0x00030230

000d62c0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <HAL_SPI_Set_Bit_Order+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	689b      	ldr	r3, [r3, #8]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030230 	.word	0x00030230

000d62d0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <HAL_SPI_Set_Data_Mode+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	68db      	ldr	r3, [r3, #12]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030230 	.word	0x00030230

000d62e0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <HAL_SPI_Set_Clock_Divider+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	691b      	ldr	r3, [r3, #16]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030230 	.word	0x00030230

000d62f0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <HAL_SPI_Send_Receive_Data+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	695b      	ldr	r3, [r3, #20]
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030230 	.word	0x00030230

000d6300 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <HAL_SPI_Init+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	69db      	ldr	r3, [r3, #28]
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	00030230 	.word	0x00030230

000d6310 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <HAL_SPI_Is_Enabled+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	6a1b      	ldr	r3, [r3, #32]
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	00030230 	.word	0x00030230

000d6320 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <HAL_SPI_Info+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	00030230 	.word	0x00030230

000d6330 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <HAL_SPI_Set_Settings+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	00030230 	.word	0x00030230

000d6340 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <HAL_SPI_Acquire+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	00030230 	.word	0x00030230

000d6350 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <HAL_SPI_Release+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	00030230 	.word	0x00030230

000d6360 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <if_index_to_name+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	695b      	ldr	r3, [r3, #20]
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	0003026c 	.word	0x0003026c

000d6370 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <HAL_RNG_GetRandomNumber+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	685b      	ldr	r3, [r3, #4]
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	00030218 	.word	0x00030218

000d6380 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <HAL_Delay_Microseconds+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	68db      	ldr	r3, [r3, #12]
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	00030218 	.word	0x00030218

000d6390 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6390:	b508      	push	{r3, lr}
   d6392:	4b02      	ldr	r3, [pc, #8]	; (d639c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6394:	681b      	ldr	r3, [r3, #0]
   d6396:	695b      	ldr	r3, [r3, #20]
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	bd08      	pop	{r3, pc}
   d639c:	00030218 	.word	0x00030218

000d63a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b02      	ldr	r3, [pc, #8]	; (d63ac <os_thread_is_current+0xc>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	689b      	ldr	r3, [r3, #8]
   d63a8:	9301      	str	r3, [sp, #4]
   d63aa:	bd08      	pop	{r3, pc}
   d63ac:	00030248 	.word	0x00030248

000d63b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d63b0:	b508      	push	{r3, lr}
   d63b2:	4b02      	ldr	r3, [pc, #8]	; (d63bc <os_thread_join+0xc>)
   d63b4:	681b      	ldr	r3, [r3, #0]
   d63b6:	691b      	ldr	r3, [r3, #16]
   d63b8:	9301      	str	r3, [sp, #4]
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	00030248 	.word	0x00030248

000d63c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d63c0:	b508      	push	{r3, lr}
   d63c2:	4b02      	ldr	r3, [pc, #8]	; (d63cc <os_thread_cleanup+0xc>)
   d63c4:	681b      	ldr	r3, [r3, #0]
   d63c6:	695b      	ldr	r3, [r3, #20]
   d63c8:	9301      	str	r3, [sp, #4]
   d63ca:	bd08      	pop	{r3, pc}
   d63cc:	00030248 	.word	0x00030248

000d63d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <os_mutex_recursive_create+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	00030248 	.word	0x00030248

000d63e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <os_mutex_recursive_destroy+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030248 	.word	0x00030248

000d63f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <inet_inet_ntop+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	695b      	ldr	r3, [r3, #20]
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030264 	.word	0x00030264

000d6400 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <inet_htonl+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	6a1b      	ldr	r3, [r3, #32]
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	00030264 	.word	0x00030264

000d6410 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <inet_htons+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	00030264 	.word	0x00030264

000d6420 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <HAL_USART_Init+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	681b      	ldr	r3, [r3, #0]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	0003023c 	.word	0x0003023c

000d6430 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <HAL_USART_Write_Data+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	68db      	ldr	r3, [r3, #12]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	0003023c 	.word	0x0003023c

000d6440 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <HAL_USART_Available_Data+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	691b      	ldr	r3, [r3, #16]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	0003023c 	.word	0x0003023c

000d6450 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <HAL_USART_Read_Data+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	695b      	ldr	r3, [r3, #20]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	0003023c 	.word	0x0003023c

000d6460 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <HAL_USART_Peek_Data+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	699b      	ldr	r3, [r3, #24]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	0003023c 	.word	0x0003023c

000d6470 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <HAL_USART_Flush_Data+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	69db      	ldr	r3, [r3, #28]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	0003023c 	.word	0x0003023c

000d6480 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <HAL_USART_Is_Enabled+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	6a1b      	ldr	r3, [r3, #32]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	0003023c 	.word	0x0003023c

000d6490 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <HAL_USART_Available_Data_For_Write+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	0003023c 	.word	0x0003023c

000d64a0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <HAL_I2C_Begin+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	68db      	ldr	r3, [r3, #12]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030228 	.word	0x00030228

000d64b0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <HAL_I2C_Begin_Transmission+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	699b      	ldr	r3, [r3, #24]
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030228 	.word	0x00030228

000d64c0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <HAL_I2C_End_Transmission+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	69db      	ldr	r3, [r3, #28]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030228 	.word	0x00030228

000d64d0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <HAL_I2C_Write_Data+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6a1b      	ldr	r3, [r3, #32]
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030228 	.word	0x00030228

000d64e0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <HAL_I2C_Available_Data+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030228 	.word	0x00030228

000d64f0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <HAL_I2C_Read_Data+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030228 	.word	0x00030228

000d6500 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <HAL_I2C_Peek_Data+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030228 	.word	0x00030228

000d6510 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <HAL_I2C_Flush_Data+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030228 	.word	0x00030228

000d6520 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <HAL_I2C_Is_Enabled+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030228 	.word	0x00030228

000d6530 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <HAL_I2C_Init+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030228 	.word	0x00030228

000d6540 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <HAL_I2C_Request_Data_Ex+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030228 	.word	0x00030228

000d6550 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <sock_setsockopt+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	699b      	ldr	r3, [r3, #24]
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030238 	.word	0x00030238

000d6560 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <sock_close+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	69db      	ldr	r3, [r3, #28]
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030238 	.word	0x00030238

000d6570 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <sock_connect+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	6a1b      	ldr	r3, [r3, #32]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030238 	.word	0x00030238

000d6580 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <sock_recv+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030238 	.word	0x00030238

000d6590 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <sock_send+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030238 	.word	0x00030238

000d65a0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <sock_socket+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	00030238 	.word	0x00030238

000d65b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <HAL_USB_USART_Init+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	681b      	ldr	r3, [r3, #0]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	0003024c 	.word	0x0003024c

000d65c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <HAL_USB_USART_Begin+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	685b      	ldr	r3, [r3, #4]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	0003024c 	.word	0x0003024c

000d65d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <HAL_USB_USART_Available_Data+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	691b      	ldr	r3, [r3, #16]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003024c 	.word	0x0003024c

000d65e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	695b      	ldr	r3, [r3, #20]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003024c 	.word	0x0003024c

000d65f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <HAL_USB_USART_Receive_Data+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	699b      	ldr	r3, [r3, #24]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	0003024c 	.word	0x0003024c

000d6600 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <HAL_USB_USART_Send_Data+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	69db      	ldr	r3, [r3, #28]
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003024c 	.word	0x0003024c

000d6610 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <HAL_USB_USART_Flush_Data+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	6a1b      	ldr	r3, [r3, #32]
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003024c 	.word	0x0003024c

000d6620 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <panic_+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	00030260 	.word	0x00030260

000d6630 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <log_message+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	00030260 	.word	0x00030260

000d6640 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <set_system_mode+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	685b      	ldr	r3, [r3, #4]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030220 	.word	0x00030220

000d6650 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <system_delay_ms+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	695b      	ldr	r3, [r3, #20]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030220 	.word	0x00030220

000d6660 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b03      	ldr	r3, [pc, #12]	; (d6670 <system_ctrl_set_app_request_handler+0x10>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d666a:	9301      	str	r3, [sp, #4]
   d666c:	bd08      	pop	{r3, pc}
   d666e:	0000      	.short	0x0000
   d6670:	00030220 	.word	0x00030220

000d6674 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b03      	ldr	r3, [pc, #12]	; (d6684 <system_ctrl_set_result+0x10>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d667e:	9301      	str	r3, [sp, #4]
   d6680:	bd08      	pop	{r3, pc}
   d6682:	0000      	.short	0x0000
   d6684:	00030220 	.word	0x00030220

000d6688 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6688:	b508      	push	{r3, lr}
   d668a:	4b02      	ldr	r3, [pc, #8]	; (d6694 <network_connect+0xc>)
   d668c:	681b      	ldr	r3, [r3, #0]
   d668e:	685b      	ldr	r3, [r3, #4]
   d6690:	9301      	str	r3, [sp, #4]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	00030240 	.word	0x00030240

000d6698 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6698:	b508      	push	{r3, lr}
   d669a:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <network_connecting+0xc>)
   d669c:	681b      	ldr	r3, [r3, #0]
   d669e:	689b      	ldr	r3, [r3, #8]
   d66a0:	9301      	str	r3, [sp, #4]
   d66a2:	bd08      	pop	{r3, pc}
   d66a4:	00030240 	.word	0x00030240

000d66a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <network_disconnect+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	68db      	ldr	r3, [r3, #12]
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	00030240 	.word	0x00030240

000d66b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <network_ready+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	691b      	ldr	r3, [r3, #16]
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	00030240 	.word	0x00030240

000d66c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <network_on+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	695b      	ldr	r3, [r3, #20]
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	00030240 	.word	0x00030240

000d66d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <network_off+0xc>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	699b      	ldr	r3, [r3, #24]
   d66e0:	9301      	str	r3, [sp, #4]
   d66e2:	bd08      	pop	{r3, pc}
   d66e4:	00030240 	.word	0x00030240

000d66e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d66e8:	b508      	push	{r3, lr}
   d66ea:	4b02      	ldr	r3, [pc, #8]	; (d66f4 <network_listen+0xc>)
   d66ec:	681b      	ldr	r3, [r3, #0]
   d66ee:	69db      	ldr	r3, [r3, #28]
   d66f0:	9301      	str	r3, [sp, #4]
   d66f2:	bd08      	pop	{r3, pc}
   d66f4:	00030240 	.word	0x00030240

000d66f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d66f8:	b508      	push	{r3, lr}
   d66fa:	4b02      	ldr	r3, [pc, #8]	; (d6704 <network_listening+0xc>)
   d66fc:	681b      	ldr	r3, [r3, #0]
   d66fe:	6a1b      	ldr	r3, [r3, #32]
   d6700:	9301      	str	r3, [sp, #4]
   d6702:	bd08      	pop	{r3, pc}
   d6704:	00030240 	.word	0x00030240

000d6708 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6708:	b508      	push	{r3, lr}
   d670a:	4b02      	ldr	r3, [pc, #8]	; (d6714 <network_set_listen_timeout+0xc>)
   d670c:	681b      	ldr	r3, [r3, #0]
   d670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6710:	9301      	str	r3, [sp, #4]
   d6712:	bd08      	pop	{r3, pc}
   d6714:	00030240 	.word	0x00030240

000d6718 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6718:	b508      	push	{r3, lr}
   d671a:	4b02      	ldr	r3, [pc, #8]	; (d6724 <network_get_listen_timeout+0xc>)
   d671c:	681b      	ldr	r3, [r3, #0]
   d671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6720:	9301      	str	r3, [sp, #4]
   d6722:	bd08      	pop	{r3, pc}
   d6724:	00030240 	.word	0x00030240

000d6728 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6728:	b508      	push	{r3, lr}
   d672a:	4b02      	ldr	r3, [pc, #8]	; (d6734 <spark_set_random_seed_from_cloud_handler+0xc>)
   d672c:	681b      	ldr	r3, [r3, #0]
   d672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6730:	9301      	str	r3, [sp, #4]
   d6732:	bd08      	pop	{r3, pc}
   d6734:	00030244 	.word	0x00030244

000d6738 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6738:	b508      	push	{r3, lr}
   d673a:	4b02      	ldr	r3, [pc, #8]	; (d6744 <malloc+0xc>)
   d673c:	681b      	ldr	r3, [r3, #0]
   d673e:	681b      	ldr	r3, [r3, #0]
   d6740:	9301      	str	r3, [sp, #4]
   d6742:	bd08      	pop	{r3, pc}
   d6744:	0003021c 	.word	0x0003021c

000d6748 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6748:	b508      	push	{r3, lr}
   d674a:	4b02      	ldr	r3, [pc, #8]	; (d6754 <free+0xc>)
   d674c:	681b      	ldr	r3, [r3, #0]
   d674e:	685b      	ldr	r3, [r3, #4]
   d6750:	9301      	str	r3, [sp, #4]
   d6752:	bd08      	pop	{r3, pc}
   d6754:	0003021c 	.word	0x0003021c

000d6758 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6758:	b508      	push	{r3, lr}
   d675a:	4b02      	ldr	r3, [pc, #8]	; (d6764 <sprintf+0xc>)
   d675c:	681b      	ldr	r3, [r3, #0]
   d675e:	68db      	ldr	r3, [r3, #12]
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	bd08      	pop	{r3, pc}
   d6764:	0003021c 	.word	0x0003021c

000d6768 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6768:	b508      	push	{r3, lr}
   d676a:	4b02      	ldr	r3, [pc, #8]	; (d6774 <vsnprintf+0xc>)
   d676c:	681b      	ldr	r3, [r3, #0]
   d676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6770:	9301      	str	r3, [sp, #4]
   d6772:	bd08      	pop	{r3, pc}
   d6774:	0003021c 	.word	0x0003021c

000d6778 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6778:	b508      	push	{r3, lr}
   d677a:	4b02      	ldr	r3, [pc, #8]	; (d6784 <_malloc_r+0xc>)
   d677c:	681b      	ldr	r3, [r3, #0]
   d677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6780:	9301      	str	r3, [sp, #4]
   d6782:	bd08      	pop	{r3, pc}
   d6784:	0003021c 	.word	0x0003021c

000d6788 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6788:	b508      	push	{r3, lr}
   d678a:	4b02      	ldr	r3, [pc, #8]	; (d6794 <__errno+0xc>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6790:	9301      	str	r3, [sp, #4]
   d6792:	bd08      	pop	{r3, pc}
   d6794:	0003021c 	.word	0x0003021c

000d6798 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6798:	2200      	movs	r2, #0
   d679a:	4611      	mov	r1, r2
   d679c:	6840      	ldr	r0, [r0, #4]
   d679e:	f7ff bfab 	b.w	d66f8 <network_listening>

000d67a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d67a2:	2200      	movs	r2, #0
   d67a4:	4611      	mov	r1, r2
   d67a6:	6840      	ldr	r0, [r0, #4]
   d67a8:	f7ff bfb6 	b.w	d6718 <network_get_listen_timeout>

000d67ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d67ac:	2200      	movs	r2, #0
   d67ae:	6840      	ldr	r0, [r0, #4]
   d67b0:	f7ff bfaa 	b.w	d6708 <network_set_listen_timeout>

000d67b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d67b4:	2200      	movs	r2, #0
   d67b6:	f081 0101 	eor.w	r1, r1, #1
   d67ba:	6840      	ldr	r0, [r0, #4]
   d67bc:	f7ff bf94 	b.w	d66e8 <network_listen>

000d67c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d67c0:	2300      	movs	r3, #0
   d67c2:	461a      	mov	r2, r3
   d67c4:	4619      	mov	r1, r3
   d67c6:	6840      	ldr	r0, [r0, #4]
   d67c8:	f7ff bf86 	b.w	d66d8 <network_off>

000d67cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d67cc:	2300      	movs	r3, #0
   d67ce:	461a      	mov	r2, r3
   d67d0:	4619      	mov	r1, r3
   d67d2:	6840      	ldr	r0, [r0, #4]
   d67d4:	f7ff bf78 	b.w	d66c8 <network_on>

000d67d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d67d8:	2200      	movs	r2, #0
   d67da:	4611      	mov	r1, r2
   d67dc:	6840      	ldr	r0, [r0, #4]
   d67de:	f7ff bf6b 	b.w	d66b8 <network_ready>

000d67e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d67e2:	2200      	movs	r2, #0
   d67e4:	4611      	mov	r1, r2
   d67e6:	6840      	ldr	r0, [r0, #4]
   d67e8:	f7ff bf56 	b.w	d6698 <network_connecting>

000d67ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67ec:	2200      	movs	r2, #0
   d67ee:	2102      	movs	r1, #2
   d67f0:	6840      	ldr	r0, [r0, #4]
   d67f2:	f7ff bf59 	b.w	d66a8 <network_disconnect>

000d67f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d67f6:	2300      	movs	r3, #0
   d67f8:	461a      	mov	r2, r3
   d67fa:	6840      	ldr	r0, [r0, #4]
   d67fc:	f7ff bf44 	b.w	d6688 <network_connect>

000d6800 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6800:	4b02      	ldr	r3, [pc, #8]	; (d680c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6802:	2203      	movs	r2, #3
   d6804:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6806:	4a02      	ldr	r2, [pc, #8]	; (d6810 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6808:	601a      	str	r2, [r3, #0]
   d680a:	4770      	bx	lr
   d680c:	2003e3dc 	.word	0x2003e3dc
   d6810:	000dc29c 	.word	0x000dc29c

000d6814 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6814:	2100      	movs	r1, #0
   d6816:	f7ff bd93 	b.w	d6340 <HAL_SPI_Acquire>

000d681a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d681a:	2100      	movs	r1, #0
   d681c:	f7ff bd98 	b.w	d6350 <HAL_SPI_Release>

000d6820 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6820:	b510      	push	{r4, lr}
   d6822:	4604      	mov	r4, r0
{
    _spi = spi;
   d6824:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6826:	4608      	mov	r0, r1
   d6828:	f7ff fd6a 	bl	d6300 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d682c:	2300      	movs	r3, #0
   d682e:	6063      	str	r3, [r4, #4]
}
   d6830:	4620      	mov	r0, r4
   d6832:	bd10      	pop	{r4, pc}

000d6834 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6834:	b510      	push	{r4, lr}
   d6836:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6838:	7800      	ldrb	r0, [r0, #0]
   d683a:	f7ff ffeb 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d683e:	b948      	cbnz	r0, d6854 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6840:	7820      	ldrb	r0, [r4, #0]
   d6842:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6846:	f7ff fd33 	bl	d62b0 <HAL_SPI_Begin>
        unlock();
   d684a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6850:	f7ff bfe3 	b.w	d681a <_ZN8SPIClass6unlockEv.isra.1>
   d6854:	bd10      	pop	{r4, pc}

000d6856 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6856:	b538      	push	{r3, r4, r5, lr}
   d6858:	4604      	mov	r4, r0
    if (!lock())
   d685a:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d685c:	460d      	mov	r5, r1
    if (!lock())
   d685e:	f7ff ffd9 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d6862:	b940      	cbnz	r0, d6876 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6864:	7820      	ldrb	r0, [r4, #0]
   d6866:	4629      	mov	r1, r5
   d6868:	f7ff fd2a 	bl	d62c0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d686c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d6872:	f7ff bfd2 	b.w	d681a <_ZN8SPIClass6unlockEv.isra.1>
   d6876:	bd38      	pop	{r3, r4, r5, pc}

000d6878 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6878:	b538      	push	{r3, r4, r5, lr}
   d687a:	4604      	mov	r4, r0
    if (!lock())
   d687c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d687e:	460d      	mov	r5, r1
    if (!lock())
   d6880:	f7ff ffc8 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d6884:	b940      	cbnz	r0, d6898 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6886:	7820      	ldrb	r0, [r4, #0]
   d6888:	4629      	mov	r1, r5
   d688a:	f7ff fd21 	bl	d62d0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d688e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6894:	f7ff bfc1 	b.w	d681a <_ZN8SPIClass6unlockEv.isra.1>
   d6898:	bd38      	pop	{r3, r4, r5, pc}

000d689a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d689a:	7800      	ldrb	r0, [r0, #0]
   d689c:	f7ff bfbd 	b.w	d681a <_ZN8SPIClass6unlockEv.isra.1>

000d68a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d68a0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d68a2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d68a4:	6018      	str	r0, [r3, #0]
   d68a6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d68a8:	6818      	ldr	r0, [r3, #0]
   d68aa:	4288      	cmp	r0, r1
   d68ac:	b2e5      	uxtb	r5, r4
   d68ae:	d906      	bls.n	d68be <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d68b0:	3401      	adds	r4, #1
   d68b2:	2c08      	cmp	r4, #8
   d68b4:	d002      	beq.n	d68bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d68b6:	0840      	lsrs	r0, r0, #1
   d68b8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d68ba:	e7f5      	b.n	d68a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d68bc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d68c0:	5d5b      	ldrb	r3, [r3, r5]
   d68c2:	7013      	strb	r3, [r2, #0]
   d68c4:	bd30      	pop	{r4, r5, pc}
   d68c6:	bf00      	nop
   d68c8:	000dc2c8 	.word	0x000dc2c8

000d68cc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d68cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68d0:	4607      	mov	r7, r0
   d68d2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d68d4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d68d6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d68d8:	f7ff ff9c 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d68dc:	2800      	cmp	r0, #0
   d68de:	db62      	blt.n	d69a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d68e0:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d68e2:	2214      	movs	r2, #20
   d68e4:	2100      	movs	r1, #0
   d68e6:	a809      	add	r0, sp, #36	; 0x24
   d68e8:	f003 f9fe 	bl	d9ce8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d68ec:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d68ee:	4620      	mov	r0, r4
   d68f0:	2200      	movs	r2, #0
   d68f2:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d68f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d68f8:	f7ff fd12 	bl	d6320 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d68fc:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6900:	b154      	cbz	r4, d6918 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6902:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6906:	b935      	cbnz	r5, d6916 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6908:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d690c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6910:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6914:	e003      	b.n	d691e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6916:	2400      	movs	r4, #0
   d6918:	46a1      	mov	r9, r4
   d691a:	46a0      	mov	r8, r4
   d691c:	2501      	movs	r5, #1
   d691e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6920:	b105      	cbz	r5, d6924 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6922:	b9bb      	cbnz	r3, d6954 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6924:	429d      	cmp	r5, r3
   d6926:	d10b      	bne.n	d6940 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6928:	68b2      	ldr	r2, [r6, #8]
   d692a:	4542      	cmp	r2, r8
   d692c:	d108      	bne.n	d6940 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d692e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6932:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6936:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d693a:	89b2      	ldrh	r2, [r6, #12]
   d693c:	4291      	cmp	r1, r2
   d693e:	d009      	beq.n	d6954 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6940:	b153      	cbz	r3, d6958 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6942:	2400      	movs	r4, #0
   d6944:	7838      	ldrb	r0, [r7, #0]
   d6946:	9401      	str	r4, [sp, #4]
   d6948:	9400      	str	r4, [sp, #0]
   d694a:	4623      	mov	r3, r4
   d694c:	4622      	mov	r2, r4
   d694e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6950:	f7ff fcee 	bl	d6330 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6954:	2000      	movs	r0, #0
   d6956:	e026      	b.n	d69a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6958:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d695c:	68b1      	ldr	r1, [r6, #8]
   d695e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6960:	ab04      	add	r3, sp, #16
   d6962:	f10d 020f 	add.w	r2, sp, #15
   d6966:	f7ff ff9b 	bl	d68a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d696a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d696c:	b105      	cbz	r5, d6970 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d696e:	b9b1      	cbnz	r1, d699e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6970:	42a9      	cmp	r1, r5
   d6972:	d008      	beq.n	d6986 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6974:	2400      	movs	r4, #0
   d6976:	7838      	ldrb	r0, [r7, #0]
   d6978:	9401      	str	r4, [sp, #4]
   d697a:	7b74      	ldrb	r4, [r6, #13]
   d697c:	7b33      	ldrb	r3, [r6, #12]
   d697e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6982:	9400      	str	r4, [sp, #0]
   d6984:	e7e4      	b.n	d6950 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6986:	68b3      	ldr	r3, [r6, #8]
   d6988:	4543      	cmp	r3, r8
   d698a:	d3f3      	bcc.n	d6974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d698c:	f88d 9020 	strb.w	r9, [sp, #32]
   d6990:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6994:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6998:	89b3      	ldrh	r3, [r6, #12]
   d699a:	429a      	cmp	r2, r3
   d699c:	d1ea      	bne.n	d6974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d699e:	9b04      	ldr	r3, [sp, #16]
   d69a0:	4543      	cmp	r3, r8
   d69a2:	d1e7      	bne.n	d6974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d69a4:	e7d6      	b.n	d6954 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d69a6:	b00f      	add	sp, #60	; 0x3c
   d69a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d69ac <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d69ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69b0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d69b2:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d69b4:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d69b6:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d69b8:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d69ba:	460e      	mov	r6, r1
   d69bc:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d69be:	f7ff ff29 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d69c2:	4605      	mov	r5, r0
   d69c4:	bb00      	cbnz	r0, d6a08 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d69c6:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d69ca:	4601      	mov	r1, r0
   d69cc:	2214      	movs	r2, #20
   d69ce:	a803      	add	r0, sp, #12
   d69d0:	f003 f98a 	bl	d9ce8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d69d4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d69d6:	462a      	mov	r2, r5
   d69d8:	a903      	add	r1, sp, #12
   d69da:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d69dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d69e0:	f7ff fc9e 	bl	d6320 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d69e4:	ab02      	add	r3, sp, #8
   d69e6:	f10d 0207 	add.w	r2, sp, #7
   d69ea:	fb07 f106 	mul.w	r1, r7, r6
   d69ee:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d69f0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d69f4:	f7ff ff54 	bl	d68a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d69f8:	7820      	ldrb	r0, [r4, #0]
   d69fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d69fe:	f7ff fc6f 	bl	d62e0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d6a02:	7820      	ldrb	r0, [r4, #0]
   d6a04:	f7ff ff09 	bl	d681a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6a08:	9802      	ldr	r0, [sp, #8]
   d6a0a:	b008      	add	sp, #32
   d6a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a10 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6a10:	b538      	push	{r3, r4, r5, lr}
   d6a12:	4604      	mov	r4, r0
    if (!lock())
   d6a14:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6a16:	460d      	mov	r5, r1
    if (!lock())
   d6a18:	f7ff fefc 	bl	d6814 <_ZN8SPIClass4lockEv.isra.0>
   d6a1c:	b9c8      	cbnz	r0, d6a52 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6a1e:	6861      	ldr	r1, [r4, #4]
   d6a20:	b171      	cbz	r1, d6a40 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d6a22:	4b0c      	ldr	r3, [pc, #48]	; (d6a54 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6a24:	5cc2      	ldrb	r2, [r0, r3]
   d6a26:	42aa      	cmp	r2, r5
   d6a28:	d002      	beq.n	d6a30 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6a2a:	3001      	adds	r0, #1
   d6a2c:	2808      	cmp	r0, #8
   d6a2e:	d1f9      	bne.n	d6a24 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6a30:	3001      	adds	r0, #1
   d6a32:	b2c0      	uxtb	r0, r0
   d6a34:	40c1      	lsrs	r1, r0
   d6a36:	2201      	movs	r2, #1
   d6a38:	4620      	mov	r0, r4
   d6a3a:	f7ff ffb7 	bl	d69ac <_ZN8SPIClass13setClockSpeedEjj>
   d6a3e:	e003      	b.n	d6a48 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6a40:	4629      	mov	r1, r5
   d6a42:	7820      	ldrb	r0, [r4, #0]
   d6a44:	f7ff fc4c 	bl	d62e0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6a48:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6a4e:	f7ff bee4 	b.w	d681a <_ZN8SPIClass6unlockEv.isra.1>
   d6a52:	bd38      	pop	{r3, r4, r5, pc}
   d6a54:	000dc2c8 	.word	0x000dc2c8

000d6a58 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6a58:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6a5a:	7800      	ldrb	r0, [r0, #0]
   d6a5c:	f7ff fc48 	bl	d62f0 <HAL_SPI_Send_Receive_Data>
}
   d6a60:	b2c0      	uxtb	r0, r0
   d6a62:	bd08      	pop	{r3, pc}

000d6a64 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6a64:	7800      	ldrb	r0, [r0, #0]
   d6a66:	f7ff bc53 	b.w	d6310 <HAL_SPI_Is_Enabled>

000d6a6a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6a6a:	b510      	push	{r4, lr}
   d6a6c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6a6e:	6800      	ldr	r0, [r0, #0]
   d6a70:	b118      	cbz	r0, d6a7a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6a72:	f7ff fe69 	bl	d6748 <free>
            wakeupSource_ = nullptr;
   d6a76:	2300      	movs	r3, #0
   d6a78:	6023      	str	r3, [r4, #0]
   d6a7a:	bd10      	pop	{r4, pc}

000d6a7c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a7c:	b510      	push	{r4, lr}
   d6a7e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6a80:	f7ff fff3 	bl	d6a6a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a84:	4620      	mov	r0, r4
   d6a86:	bd10      	pop	{r4, pc}

000d6a88 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a88:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6a8a:	4c09      	ldr	r4, [pc, #36]	; (d6ab0 <_GLOBAL__sub_I_System+0x28>)
   d6a8c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6a92:	6020      	str	r0, [r4, #0]
   d6a94:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6a96:	71a0      	strb	r0, [r4, #6]
   d6a98:	8120      	strh	r0, [r4, #8]
   d6a9a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6a9c:	f7ff fdd0 	bl	d6640 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	4a04      	ldr	r2, [pc, #16]	; (d6ab4 <_GLOBAL__sub_I_System+0x2c>)
   d6aa4:	4904      	ldr	r1, [pc, #16]	; (d6ab8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6aaa:	f001 b92b 	b.w	d7d04 <__aeabi_atexit>
   d6aae:	bf00      	nop
   d6ab0:	2003e3e4 	.word	0x2003e3e4
   d6ab4:	2003e1b8 	.word	0x2003e1b8
   d6ab8:	000d6a7d 	.word	0x000d6a7d

000d6abc <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6ac0:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d6ac2:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6ac4:	4615      	mov	r5, r2
   d6ac6:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d6ac8:	bf34      	ite	cc
   d6aca:	4615      	movcc	r5, r2
   d6acc:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6ace:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d6ad0:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6ad2:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6ad4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d6ad8:	d107      	bne.n	d6aea <ltoa+0x2e>
   d6ada:	4298      	cmp	r0, r3
   d6adc:	da05      	bge.n	d6aea <ltoa+0x2e>
      {
            *head++ = '-';
   d6ade:	232d      	movs	r3, #45	; 0x2d
   d6ae0:	f101 0801 	add.w	r8, r1, #1
   d6ae4:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d6ae6:	4240      	negs	r0, r0
   d6ae8:	e001      	b.n	d6aee <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6aea:	b1b0      	cbz	r0, d6b1a <ltoa+0x5e>
   d6aec:	46a0      	mov	r8, r4
   d6aee:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6af2:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6af4:	462a      	mov	r2, r5
   d6af6:	4601      	mov	r1, r0
   d6af8:	a801      	add	r0, sp, #4
   d6afa:	f003 f8b7 	bl	d9c6c <ldiv>
   d6afe:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6b00:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6b02:	2b09      	cmp	r3, #9
   d6b04:	bfcc      	ite	gt
   d6b06:	2237      	movgt	r2, #55	; 0x37
   d6b08:	2230      	movle	r2, #48	; 0x30
   d6b0a:	fa52 f383 	uxtab	r3, r2, r3
   d6b0e:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6b12:	3701      	adds	r7, #1
   d6b14:	2800      	cmp	r0, #0
   d6b16:	d1ed      	bne.n	d6af4 <ltoa+0x38>
   d6b18:	e006      	b.n	d6b28 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6b1a:	2330      	movs	r3, #48	; 0x30
   d6b1c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6b20:	46a0      	mov	r8, r4
   d6b22:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d6b26:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6b28:	463a      	mov	r2, r7
   d6b2a:	1c71      	adds	r1, r6, #1
   d6b2c:	4640      	mov	r0, r8
   d6b2e:	f003 f8b5 	bl	d9c9c <memcpy>
      return str;
}
   d6b32:	4620      	mov	r0, r4
   d6b34:	b00c      	add	sp, #48	; 0x30
   d6b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b3a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b3a:	b510      	push	{r4, lr}
   d6b3c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b3e:	6800      	ldr	r0, [r0, #0]
   d6b40:	b108      	cbz	r0, d6b46 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b42:	f7ff fc4d 	bl	d63e0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6b46:	4620      	mov	r0, r4
   d6b48:	bd10      	pop	{r4, pc}
	...

000d6b4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b4c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b4e:	4c06      	ldr	r4, [pc, #24]	; (d6b68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6b50:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6b52:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b54:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6b56:	f7ff fc3b 	bl	d63d0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	4a03      	ldr	r2, [pc, #12]	; (d6b6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6b5e:	4904      	ldr	r1, [pc, #16]	; (d6b70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b64:	f001 b8ce 	b.w	d7d04 <__aeabi_atexit>
   d6b68:	2003e3f0 	.word	0x2003e3f0
   d6b6c:	2003e1b8 	.word	0x2003e1b8
   d6b70:	000d6b3b 	.word	0x000d6b3b

000d6b74 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b76:	4606      	mov	r6, r0
   d6b78:	460d      	mov	r5, r1
   d6b7a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6b7c:	2400      	movs	r4, #0
  while (size--) {
   d6b7e:	42bd      	cmp	r5, r7
   d6b80:	d00c      	beq.n	d6b9c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6b82:	6833      	ldr	r3, [r6, #0]
   d6b84:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b88:	689b      	ldr	r3, [r3, #8]
   d6b8a:	4630      	mov	r0, r6
   d6b8c:	4798      	blx	r3
     if (chunk>=0)
   d6b8e:	2800      	cmp	r0, #0
   d6b90:	db01      	blt.n	d6b96 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6b92:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6b94:	e7f3      	b.n	d6b7e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6b96:	2c00      	cmp	r4, #0
   d6b98:	bf08      	it	eq
   d6b9a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ba0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6ba0:	b570      	push	{r4, r5, r6, lr}
   d6ba2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6ba4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6ba6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6ba8:	b149      	cbz	r1, d6bbe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6baa:	f003 f8d5 	bl	d9d58 <strlen>
   d6bae:	682b      	ldr	r3, [r5, #0]
   d6bb0:	4602      	mov	r2, r0
   d6bb2:	4621      	mov	r1, r4
   d6bb4:	4628      	mov	r0, r5
   d6bb6:	68db      	ldr	r3, [r3, #12]
    }
   d6bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6bbc:	4718      	bx	r3
    }
   d6bbe:	bd70      	pop	{r4, r5, r6, pc}

000d6bc0 <_ZN5Print5printEPKc>:
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	f7ff ffed 	bl	d6ba0 <_ZN5Print5writeEPKc>
   d6bc6:	bd08      	pop	{r3, pc}

000d6bc8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6bc8:	6803      	ldr	r3, [r0, #0]
   d6bca:	689b      	ldr	r3, [r3, #8]
   d6bcc:	4718      	bx	r3

000d6bce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6bce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6bd0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6bd2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6bd4:	f7ff fff8 	bl	d6bc8 <_ZN5Print5printEc>
  n += print('\n');
   d6bd8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6bda:	4604      	mov	r4, r0
  n += print('\n');
   d6bdc:	4628      	mov	r0, r5
   d6bde:	f7ff fff3 	bl	d6bc8 <_ZN5Print5printEc>
  return n;
}
   d6be2:	4420      	add	r0, r4
   d6be4:	bd38      	pop	{r3, r4, r5, pc}

000d6be6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6be6:	b538      	push	{r3, r4, r5, lr}
   d6be8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bea:	f7ff ffd9 	bl	d6ba0 <_ZN5Print5writeEPKc>
   d6bee:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6bf0:	4628      	mov	r0, r5
   d6bf2:	f7ff ffec 	bl	d6bce <_ZN5Print7printlnEv>
  return n;
}
   d6bf6:	4420      	add	r0, r4
   d6bf8:	bd38      	pop	{r3, r4, r5, pc}

000d6bfa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6bfa:	b530      	push	{r4, r5, lr}
   d6bfc:	b08b      	sub	sp, #44	; 0x2c
   d6bfe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6c00:	2100      	movs	r1, #0
   d6c02:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6c06:	2a01      	cmp	r2, #1
   d6c08:	bf98      	it	ls
   d6c0a:	220a      	movls	r2, #10
   d6c0c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6c10:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6c14:	fb05 3312 	mls	r3, r5, r2, r3
   d6c18:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6c1c:	2b09      	cmp	r3, #9
   d6c1e:	bf94      	ite	ls
   d6c20:	3330      	addls	r3, #48	; 0x30
   d6c22:	3337      	addhi	r3, #55	; 0x37
   d6c24:	b2db      	uxtb	r3, r3
   d6c26:	4621      	mov	r1, r4
   d6c28:	f804 3901 	strb.w	r3, [r4], #-1
   d6c2c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6c2e:	2d00      	cmp	r5, #0
   d6c30:	d1ee      	bne.n	d6c10 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6c32:	f7ff ffb5 	bl	d6ba0 <_ZN5Print5writeEPKc>
}
   d6c36:	b00b      	add	sp, #44	; 0x2c
   d6c38:	bd30      	pop	{r4, r5, pc}

000d6c3a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6c3a:	b40c      	push	{r2, r3}
   d6c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c40:	b087      	sub	sp, #28
   d6c42:	af00      	add	r7, sp, #0
   d6c44:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6c48:	4605      	mov	r5, r0
   d6c4a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6c4e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6c50:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6c52:	4623      	mov	r3, r4
   d6c54:	464a      	mov	r2, r9
   d6c56:	2114      	movs	r1, #20
   d6c58:	1d38      	adds	r0, r7, #4
   d6c5a:	f7ff fd85 	bl	d6768 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6c5e:	2813      	cmp	r0, #19
   d6c60:	d805      	bhi.n	d6c6e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c62:	1d39      	adds	r1, r7, #4
   d6c64:	4628      	mov	r0, r5
   d6c66:	f7ff ff9b 	bl	d6ba0 <_ZN5Print5writeEPKc>
   d6c6a:	4604      	mov	r4, r0
   d6c6c:	e013      	b.n	d6c96 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c6e:	f100 0308 	add.w	r3, r0, #8
   d6c72:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6c76:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c78:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6c7c:	1c41      	adds	r1, r0, #1
   d6c7e:	4623      	mov	r3, r4
   d6c80:	464a      	mov	r2, r9
   d6c82:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6c84:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6c86:	f7ff fd6f 	bl	d6768 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c8a:	4669      	mov	r1, sp
   d6c8c:	4628      	mov	r0, r5
   d6c8e:	f7ff ff87 	bl	d6ba0 <_ZN5Print5writeEPKc>
   d6c92:	4604      	mov	r4, r0
   d6c94:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6c96:	b11e      	cbz	r6, d6ca0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6c98:	4628      	mov	r0, r5
   d6c9a:	f7ff ff98 	bl	d6bce <_ZN5Print7printlnEv>
   d6c9e:	4404      	add	r4, r0
    return n;
}
   d6ca0:	4620      	mov	r0, r4
   d6ca2:	371c      	adds	r7, #28
   d6ca4:	46bd      	mov	sp, r7
   d6ca6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6caa:	b002      	add	sp, #8
   d6cac:	4770      	bx	lr
	...

000d6cb0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6cb0:	4b01      	ldr	r3, [pc, #4]	; (d6cb8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6cb2:	4a02      	ldr	r2, [pc, #8]	; (d6cbc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6cb4:	601a      	str	r2, [r3, #0]
   d6cb6:	4770      	bx	lr
   d6cb8:	2003e3f4 	.word	0x2003e3f4
   d6cbc:	000dc343 	.word	0x000dc343

000d6cc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6cc0:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6cc2:	681a      	ldr	r2, [r3, #0]
   d6cc4:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6cc6:	601a      	str	r2, [r3, #0]
   d6cc8:	4770      	bx	lr
   d6cca:	bf00      	nop
   d6ccc:	2003e110 	.word	0x2003e110
   d6cd0:	2003e3f8 	.word	0x2003e3f8

000d6cd4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6cd4:	2100      	movs	r1, #0
   d6cd6:	f7ff bcbb 	b.w	d6650 <system_delay_ms>

000d6cda <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cda:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6cdc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cde:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6ce0:	b113      	cbz	r3, d6ce8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ce2:	2203      	movs	r2, #3
   d6ce4:	4601      	mov	r1, r0
   d6ce6:	4798      	blx	r3
    }
   d6ce8:	4620      	mov	r0, r4
   d6cea:	bd10      	pop	{r4, pc}

000d6cec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6cec:	b510      	push	{r4, lr}
   d6cee:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6cf0:	f7ff fff3 	bl	d6cda <_ZNSt14_Function_baseD1Ev>
   d6cf4:	4620      	mov	r0, r4
   d6cf6:	bd10      	pop	{r4, pc}

000d6cf8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cf8:	4803      	ldr	r0, [pc, #12]	; (d6d08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6cfa:	4a04      	ldr	r2, [pc, #16]	; (d6d0c <_GLOBAL__sub_I_RGB+0x14>)
   d6cfc:	4904      	ldr	r1, [pc, #16]	; (d6d10 <_GLOBAL__sub_I_RGB+0x18>)
   d6cfe:	2300      	movs	r3, #0
   d6d00:	6083      	str	r3, [r0, #8]
   d6d02:	f000 bfff 	b.w	d7d04 <__aeabi_atexit>
   d6d06:	bf00      	nop
   d6d08:	2003e3fc 	.word	0x2003e3fc
   d6d0c:	2003e1b8 	.word	0x2003e1b8
   d6d10:	000d6ced 	.word	0x000d6ced

000d6d14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d16:	4b0c      	ldr	r3, [pc, #48]	; (d6d48 <serialEventRun+0x34>)
   d6d18:	b133      	cbz	r3, d6d28 <serialEventRun+0x14>
   d6d1a:	f000 f96d 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d6d1e:	6803      	ldr	r3, [r0, #0]
   d6d20:	691b      	ldr	r3, [r3, #16]
   d6d22:	4798      	blx	r3
   d6d24:	2800      	cmp	r0, #0
   d6d26:	dc09      	bgt.n	d6d3c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d28:	4b08      	ldr	r3, [pc, #32]	; (d6d4c <serialEventRun+0x38>)
   d6d2a:	b163      	cbz	r3, d6d46 <serialEventRun+0x32>
   d6d2c:	f000 f9e6 	bl	d70fc <_Z22__fetch_global_Serial1v>
   d6d30:	6803      	ldr	r3, [r0, #0]
   d6d32:	691b      	ldr	r3, [r3, #16]
   d6d34:	4798      	blx	r3
   d6d36:	2800      	cmp	r0, #0
   d6d38:	dc03      	bgt.n	d6d42 <serialEventRun+0x2e>
   d6d3a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d3c:	f3af 8000 	nop.w
   d6d40:	e7f2      	b.n	d6d28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d42:	f3af 8000 	nop.w
   d6d46:	bd08      	pop	{r3, pc}
	...

000d6d50 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d50:	b508      	push	{r3, lr}
	serialEventRun();
   d6d52:	f7ff ffdf 	bl	d6d14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d56:	f7ff fb1b 	bl	d6390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d5a:	4b01      	ldr	r3, [pc, #4]	; (d6d60 <_post_loop+0x10>)
   d6d5c:	6018      	str	r0, [r3, #0]
   d6d5e:	bd08      	pop	{r3, pc}
   d6d60:	2003e730 	.word	0x2003e730

000d6d64 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6d64:	4802      	ldr	r0, [pc, #8]	; (d6d70 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6d66:	4a03      	ldr	r2, [pc, #12]	; (d6d74 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6d68:	4903      	ldr	r1, [pc, #12]	; (d6d78 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6d6a:	1a12      	subs	r2, r2, r0
   d6d6c:	f002 bf96 	b.w	d9c9c <memcpy>
   d6d70:	2003f400 	.word	0x2003f400
   d6d74:	2003f404 	.word	0x2003f404
   d6d78:	000dc8c0 	.word	0x000dc8c0

000d6d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d7e:	2300      	movs	r3, #0
   d6d80:	9300      	str	r3, [sp, #0]
   d6d82:	461a      	mov	r2, r3
   d6d84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d88:	f7ff fc74 	bl	d6674 <system_ctrl_set_result>
}
   d6d8c:	b003      	add	sp, #12
   d6d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6d94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6d96:	8843      	ldrh	r3, [r0, #2]
   d6d98:	2b0a      	cmp	r3, #10
   d6d9a:	d008      	beq.n	d6dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d9c:	2b50      	cmp	r3, #80	; 0x50
   d6d9e:	d109      	bne.n	d6db4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6da0:	4b09      	ldr	r3, [pc, #36]	; (d6dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6da2:	681b      	ldr	r3, [r3, #0]
   d6da4:	b13b      	cbz	r3, d6db6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6da6:	b003      	add	sp, #12
   d6da8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6dac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6dae:	f7ff ffe5 	bl	d6d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6db2:	e006      	b.n	d6dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6db4:	2300      	movs	r3, #0
   d6db6:	9300      	str	r3, [sp, #0]
   d6db8:	461a      	mov	r2, r3
   d6dba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dbe:	f7ff fc59 	bl	d6674 <system_ctrl_set_result>
        break;
    }
}
   d6dc2:	b003      	add	sp, #12
   d6dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6dc8:	2003e40c 	.word	0x2003e40c

000d6dcc <module_user_init_hook>:

void module_user_init_hook()
{
   d6dcc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6dce:	4c10      	ldr	r4, [pc, #64]	; (d6e10 <module_user_init_hook+0x44>)
   d6dd0:	4d10      	ldr	r5, [pc, #64]	; (d6e14 <module_user_init_hook+0x48>)
   d6dd2:	6823      	ldr	r3, [r4, #0]
   d6dd4:	42ab      	cmp	r3, r5
   d6dd6:	4b10      	ldr	r3, [pc, #64]	; (d6e18 <module_user_init_hook+0x4c>)
   d6dd8:	bf0c      	ite	eq
   d6dda:	2201      	moveq	r2, #1
   d6ddc:	2200      	movne	r2, #0
   d6dde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6de0:	d002      	beq.n	d6de8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6de2:	f7ff ffbf 	bl	d6d64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6de6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6de8:	f7ff fac2 	bl	d6370 <HAL_RNG_GetRandomNumber>
   d6dec:	4604      	mov	r4, r0
    srand(seed);
   d6dee:	f002 ff83 	bl	d9cf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6df2:	4b0a      	ldr	r3, [pc, #40]	; (d6e1c <module_user_init_hook+0x50>)
   d6df4:	b113      	cbz	r3, d6dfc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6df6:	4620      	mov	r0, r4
   d6df8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6dfc:	2100      	movs	r1, #0
   d6dfe:	4807      	ldr	r0, [pc, #28]	; (d6e1c <module_user_init_hook+0x50>)
   d6e00:	f7ff fc92 	bl	d6728 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e04:	2100      	movs	r1, #0
   d6e06:	4806      	ldr	r0, [pc, #24]	; (d6e20 <module_user_init_hook+0x54>)
}
   d6e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e0c:	f7ff bc28 	b.w	d6660 <system_ctrl_set_app_request_handler>
   d6e10:	2003f400 	.word	0x2003f400
   d6e14:	9a271c1e 	.word	0x9a271c1e
   d6e18:	2003e410 	.word	0x2003e410
   d6e1c:	00000000 	.word	0x00000000
   d6e20:	000d6d95 	.word	0x000d6d95

000d6e24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e24:	4770      	bx	lr

000d6e26 <_ZN9IPAddressD0Ev>:
   d6e26:	b510      	push	{r4, lr}
   d6e28:	2118      	movs	r1, #24
   d6e2a:	4604      	mov	r4, r0
   d6e2c:	f000 ff78 	bl	d7d20 <_ZdlPvj>
   d6e30:	4620      	mov	r0, r4
   d6e32:	bd10      	pop	{r4, pc}

000d6e34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e36:	7d03      	ldrb	r3, [r0, #20]
   d6e38:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e3a:	b08d      	sub	sp, #52	; 0x34
   d6e3c:	460e      	mov	r6, r1
   d6e3e:	f100 0704 	add.w	r7, r0, #4
   d6e42:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e46:	d002      	beq.n	d6e4e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e48:	f100 0508 	add.w	r5, r0, #8
   d6e4c:	e018      	b.n	d6e80 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e4e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e50:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e52:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e56:	232f      	movs	r3, #47	; 0x2f
   d6e58:	462a      	mov	r2, r5
   d6e5a:	200a      	movs	r0, #10
   d6e5c:	f7ff fac8 	bl	d63f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e60:	4628      	mov	r0, r5
   d6e62:	f002 ff79 	bl	d9d58 <strlen>
   d6e66:	6833      	ldr	r3, [r6, #0]
   d6e68:	4602      	mov	r2, r0
   d6e6a:	68db      	ldr	r3, [r3, #12]
   d6e6c:	4629      	mov	r1, r5
   d6e6e:	4630      	mov	r0, r6
   d6e70:	4798      	blx	r3
   d6e72:	e00f      	b.n	d6e94 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e74:	b124      	cbz	r4, d6e80 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e76:	212e      	movs	r1, #46	; 0x2e
   d6e78:	4630      	mov	r0, r6
   d6e7a:	f7ff fea5 	bl	d6bc8 <_ZN5Print5printEc>
   d6e7e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6e80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e84:	220a      	movs	r2, #10
   d6e86:	4630      	mov	r0, r6
   d6e88:	f7ff feb7 	bl	d6bfa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e8c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e8e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e90:	d1f0      	bne.n	d6e74 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e92:	4620      	mov	r0, r4
    }
    return n;
}
   d6e94:	b00d      	add	sp, #52	; 0x34
   d6e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e98 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e98:	b510      	push	{r4, lr}
   d6e9a:	4b05      	ldr	r3, [pc, #20]	; (d6eb0 <_ZN9IPAddressC1Ev+0x18>)
   d6e9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e9e:	2211      	movs	r2, #17
   d6ea0:	f840 3b04 	str.w	r3, [r0], #4
   d6ea4:	2100      	movs	r1, #0
   d6ea6:	f002 ff1f 	bl	d9ce8 <memset>
{
    clear();
}
   d6eaa:	4620      	mov	r0, r4
   d6eac:	bd10      	pop	{r4, pc}
   d6eae:	bf00      	nop
   d6eb0:	000dc3d4 	.word	0x000dc3d4

000d6eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6eb4:	4603      	mov	r3, r0
   d6eb6:	4a07      	ldr	r2, [pc, #28]	; (d6ed4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6ebe:	f101 0210 	add.w	r2, r1, #16
   d6ec2:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ec6:	f843 4b04 	str.w	r4, [r3], #4
   d6eca:	4291      	cmp	r1, r2
   d6ecc:	d1f9      	bne.n	d6ec2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6ece:	780a      	ldrb	r2, [r1, #0]
   d6ed0:	701a      	strb	r2, [r3, #0]
}
   d6ed2:	bd10      	pop	{r4, pc}
   d6ed4:	000dc3d4 	.word	0x000dc3d4

000d6ed8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6ed8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6eda:	2b04      	cmp	r3, #4
   d6edc:	d101      	bne.n	d6ee2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6ede:	6840      	ldr	r0, [r0, #4]
   d6ee0:	e008      	b.n	d6ef4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6ee2:	2b06      	cmp	r3, #6
   d6ee4:	d10a      	bne.n	d6efc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6ee6:	6843      	ldr	r3, [r0, #4]
   d6ee8:	b953      	cbnz	r3, d6f00 <_ZNK9IPAddresscvbEv+0x28>
   d6eea:	6883      	ldr	r3, [r0, #8]
   d6eec:	b943      	cbnz	r3, d6f00 <_ZNK9IPAddresscvbEv+0x28>
   d6eee:	68c3      	ldr	r3, [r0, #12]
   d6ef0:	b933      	cbnz	r3, d6f00 <_ZNK9IPAddresscvbEv+0x28>
   d6ef2:	6900      	ldr	r0, [r0, #16]
   d6ef4:	3000      	adds	r0, #0
   d6ef6:	bf18      	it	ne
   d6ef8:	2001      	movne	r0, #1
   d6efa:	4770      	bx	lr
    } else {
        return false;
   d6efc:	2000      	movs	r0, #0
   d6efe:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f00:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6f02:	4770      	bx	lr

000d6f04 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6f04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6f16:	2304      	movs	r3, #4
   d6f18:	6041      	str	r1, [r0, #4]
   d6f1a:	7503      	strb	r3, [r0, #20]
   d6f1c:	bd10      	pop	{r4, pc}

000d6f1e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f20:	780d      	ldrb	r5, [r1, #0]
   d6f22:	788b      	ldrb	r3, [r1, #2]
   d6f24:	784a      	ldrb	r2, [r1, #1]
   d6f26:	78c9      	ldrb	r1, [r1, #3]
   d6f28:	9100      	str	r1, [sp, #0]
   d6f2a:	4629      	mov	r1, r5
   d6f2c:	f7ff ffea 	bl	d6f04 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6f30:	b003      	add	sp, #12
   d6f32:	bd30      	pop	{r4, r5, pc}

000d6f34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f34:	7441      	strb	r1, [r0, #17]
   d6f36:	4770      	bx	lr

000d6f38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f38:	4770      	bx	lr

000d6f3a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6f3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	7c00      	ldrb	r0, [r0, #16]
   d6f40:	f7ff fb56 	bl	d65f0 <HAL_USB_USART_Receive_Data>
}
   d6f44:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f48:	bf28      	it	cs
   d6f4a:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f4e:	bd08      	pop	{r3, pc}

000d6f50 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6f50:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f52:	2101      	movs	r1, #1
   d6f54:	7c00      	ldrb	r0, [r0, #16]
   d6f56:	f7ff fb4b 	bl	d65f0 <HAL_USB_USART_Receive_Data>
}
   d6f5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f5e:	bf28      	it	cs
   d6f60:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f64:	bd08      	pop	{r3, pc}

000d6f66 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f66:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f68:	7c00      	ldrb	r0, [r0, #16]
   d6f6a:	f7ff fb39 	bl	d65e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f72:	bd08      	pop	{r3, pc}

000d6f74 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f74:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f76:	7c00      	ldrb	r0, [r0, #16]
   d6f78:	f7ff fb2a 	bl	d65d0 <HAL_USB_USART_Available_Data>
}
   d6f7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f80:	bd08      	pop	{r3, pc}

000d6f82 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f82:	7c00      	ldrb	r0, [r0, #16]
   d6f84:	f7ff bb44 	b.w	d6610 <HAL_USB_USART_Flush_Data>

000d6f88 <_ZN9USBSerialD0Ev>:
   d6f88:	b510      	push	{r4, lr}
   d6f8a:	2114      	movs	r1, #20
   d6f8c:	4604      	mov	r4, r0
   d6f8e:	f000 fec7 	bl	d7d20 <_ZdlPvj>
   d6f92:	4620      	mov	r0, r4
   d6f94:	bd10      	pop	{r4, pc}

000d6f96 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f96:	b538      	push	{r3, r4, r5, lr}
   d6f98:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f9a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f9c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f9e:	f7ff fb1f 	bl	d65e0 <HAL_USB_USART_Available_Data_For_Write>
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	dc01      	bgt.n	d6faa <_ZN9USBSerial5writeEh+0x14>
   d6fa6:	7c60      	ldrb	r0, [r4, #17]
   d6fa8:	b128      	cbz	r0, d6fb6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6faa:	4629      	mov	r1, r5
   d6fac:	7c20      	ldrb	r0, [r4, #16]
   d6fae:	f7ff fb27 	bl	d6600 <HAL_USB_USART_Send_Data>
   d6fb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6fb6:	bd38      	pop	{r3, r4, r5, pc}

000d6fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fb8:	b510      	push	{r4, lr}
   d6fba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6fbc:	2300      	movs	r3, #0
   d6fbe:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fc4:	60a3      	str	r3, [r4, #8]
   d6fc6:	4b05      	ldr	r3, [pc, #20]	; (d6fdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6fc8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6fca:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fcc:	4608      	mov	r0, r1
{
  _serial = serial;
   d6fce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6fd0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6fd2:	4611      	mov	r1, r2
   d6fd4:	f7ff faec 	bl	d65b0 <HAL_USB_USART_Init>
}
   d6fd8:	4620      	mov	r0, r4
   d6fda:	bd10      	pop	{r4, pc}
   d6fdc:	000dc3e8 	.word	0x000dc3e8

000d6fe0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6fe0:	2200      	movs	r2, #0
   d6fe2:	7c00      	ldrb	r0, [r0, #16]
   d6fe4:	f7ff baec 	b.w	d65c0 <HAL_USB_USART_Begin>

000d6fe8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fe8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6fea:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6fee:	2100      	movs	r1, #0
   d6ff0:	f002 fe7a 	bl	d9ce8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	bd10      	pop	{r4, pc}

000d6ff8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6ff8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ffa:	4d0e      	ldr	r5, [pc, #56]	; (d7034 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6ffc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6ffe:	a801      	add	r0, sp, #4
   d7000:	f7ff fff2 	bl	d6fe8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7004:	6829      	ldr	r1, [r5, #0]
   d7006:	f011 0401 	ands.w	r4, r1, #1
   d700a:	d110      	bne.n	d702e <_Z16_fetch_usbserialv+0x36>
   d700c:	4628      	mov	r0, r5
   d700e:	f7fd f855 	bl	d40bc <__cxa_guard_acquire>
   d7012:	b160      	cbz	r0, d702e <_Z16_fetch_usbserialv+0x36>
   d7014:	aa01      	add	r2, sp, #4
   d7016:	4621      	mov	r1, r4
   d7018:	4807      	ldr	r0, [pc, #28]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d701a:	f7ff ffcd 	bl	d6fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d701e:	4628      	mov	r0, r5
   d7020:	f7fd f851 	bl	d40c6 <__cxa_guard_release>
   d7024:	4a05      	ldr	r2, [pc, #20]	; (d703c <_Z16_fetch_usbserialv+0x44>)
   d7026:	4906      	ldr	r1, [pc, #24]	; (d7040 <_Z16_fetch_usbserialv+0x48>)
   d7028:	4803      	ldr	r0, [pc, #12]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d702a:	f000 fe6b 	bl	d7d04 <__aeabi_atexit>
	return _usbserial;
}
   d702e:	4802      	ldr	r0, [pc, #8]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d7030:	b007      	add	sp, #28
   d7032:	bd30      	pop	{r4, r5, pc}
   d7034:	2003e414 	.word	0x2003e414
   d7038:	2003e418 	.word	0x2003e418
   d703c:	2003e1b8 	.word	0x2003e1b8
   d7040:	000d6f39 	.word	0x000d6f39

000d7044 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7044:	4770      	bx	lr

000d7046 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7046:	7441      	strb	r1, [r0, #17]
   d7048:	4770      	bx	lr

000d704a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d704a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d704c:	7c00      	ldrb	r0, [r0, #16]
   d704e:	f7ff fa1f 	bl	d6490 <HAL_USART_Available_Data_For_Write>
}
   d7052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7056:	bd08      	pop	{r3, pc}

000d7058 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7058:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d705a:	7c00      	ldrb	r0, [r0, #16]
   d705c:	f7ff f9f0 	bl	d6440 <HAL_USART_Available_Data>
}
   d7060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7064:	bd08      	pop	{r3, pc}

000d7066 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7066:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7068:	7c00      	ldrb	r0, [r0, #16]
   d706a:	f7ff f9f9 	bl	d6460 <HAL_USART_Peek_Data>
}
   d706e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7072:	bf28      	it	cs
   d7074:	f04f 30ff 	movcs.w	r0, #4294967295
   d7078:	bd08      	pop	{r3, pc}

000d707a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d707a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d707c:	7c00      	ldrb	r0, [r0, #16]
   d707e:	f7ff f9e7 	bl	d6450 <HAL_USART_Read_Data>
}
   d7082:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7086:	bf28      	it	cs
   d7088:	f04f 30ff 	movcs.w	r0, #4294967295
   d708c:	bd08      	pop	{r3, pc}

000d708e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d708e:	7c00      	ldrb	r0, [r0, #16]
   d7090:	f7ff b9ee 	b.w	d6470 <HAL_USART_Flush_Data>

000d7094 <_ZN11USARTSerialD0Ev>:
   d7094:	b510      	push	{r4, lr}
   d7096:	2114      	movs	r1, #20
   d7098:	4604      	mov	r4, r0
   d709a:	f000 fe41 	bl	d7d20 <_ZdlPvj>
   d709e:	4620      	mov	r0, r4
   d70a0:	bd10      	pop	{r4, pc}

000d70a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d70a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d70a6:	4604      	mov	r4, r0
   d70a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70aa:	b925      	cbnz	r5, d70b6 <_ZN11USARTSerial5writeEh+0x14>
   d70ac:	7c00      	ldrb	r0, [r0, #16]
   d70ae:	f7ff f9ef 	bl	d6490 <HAL_USART_Available_Data_For_Write>
   d70b2:	2800      	cmp	r0, #0
   d70b4:	dd05      	ble.n	d70c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70b6:	4631      	mov	r1, r6
   d70b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d70ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70be:	f7ff b9b7 	b.w	d6430 <HAL_USART_Write_Data>
  }
  return 0;
}
   d70c2:	4628      	mov	r0, r5
   d70c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d70c8:	b510      	push	{r4, lr}
   d70ca:	4604      	mov	r4, r0
   d70cc:	4608      	mov	r0, r1
   d70ce:	4611      	mov	r1, r2
   d70d0:	2200      	movs	r2, #0
   d70d2:	6062      	str	r2, [r4, #4]
   d70d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70d8:	60a2      	str	r2, [r4, #8]
   d70da:	4a05      	ldr	r2, [pc, #20]	; (d70f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70dc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70de:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70e0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70e4:	461a      	mov	r2, r3
   d70e6:	f7ff f99b 	bl	d6420 <HAL_USART_Init>
}
   d70ea:	4620      	mov	r0, r4
   d70ec:	bd10      	pop	{r4, pc}
   d70ee:	bf00      	nop
   d70f0:	000dc418 	.word	0x000dc418

000d70f4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d70f4:	7c00      	ldrb	r0, [r0, #16]
   d70f6:	f7ff b9c3 	b.w	d6480 <HAL_USART_Is_Enabled>
	...

000d70fc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70fc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70fe:	4d0c      	ldr	r5, [pc, #48]	; (d7130 <_Z22__fetch_global_Serial1v+0x34>)
   d7100:	6829      	ldr	r1, [r5, #0]
   d7102:	f011 0401 	ands.w	r4, r1, #1
   d7106:	d111      	bne.n	d712c <_Z22__fetch_global_Serial1v+0x30>
   d7108:	4628      	mov	r0, r5
   d710a:	f7fc ffd7 	bl	d40bc <__cxa_guard_acquire>
   d710e:	b168      	cbz	r0, d712c <_Z22__fetch_global_Serial1v+0x30>
   d7110:	4a08      	ldr	r2, [pc, #32]	; (d7134 <_Z22__fetch_global_Serial1v+0x38>)
   d7112:	4b09      	ldr	r3, [pc, #36]	; (d7138 <_Z22__fetch_global_Serial1v+0x3c>)
   d7114:	4809      	ldr	r0, [pc, #36]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d7116:	4621      	mov	r1, r4
   d7118:	f7ff ffd6 	bl	d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d711c:	4628      	mov	r0, r5
   d711e:	f7fc ffd2 	bl	d40c6 <__cxa_guard_release>
   d7122:	4a07      	ldr	r2, [pc, #28]	; (d7140 <_Z22__fetch_global_Serial1v+0x44>)
   d7124:	4907      	ldr	r1, [pc, #28]	; (d7144 <_Z22__fetch_global_Serial1v+0x48>)
   d7126:	4805      	ldr	r0, [pc, #20]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d7128:	f000 fdec 	bl	d7d04 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d712c:	4803      	ldr	r0, [pc, #12]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d712e:	bd38      	pop	{r3, r4, r5, pc}
   d7130:	2003e4c4 	.word	0x2003e4c4
   d7134:	2003e4c8 	.word	0x2003e4c8
   d7138:	2003e440 	.word	0x2003e440
   d713c:	2003e42c 	.word	0x2003e42c
   d7140:	2003e1b8 	.word	0x2003e1b8
   d7144:	000d7045 	.word	0x000d7045

000d7148 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7148:	4770      	bx	lr

000d714a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d714a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d714c:	4606      	mov	r6, r0
   d714e:	4615      	mov	r5, r2
   d7150:	460c      	mov	r4, r1
   d7152:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7154:	42bc      	cmp	r4, r7
   d7156:	d006      	beq.n	d7166 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7158:	6833      	ldr	r3, [r6, #0]
   d715a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d715e:	689b      	ldr	r3, [r3, #8]
   d7160:	4630      	mov	r0, r6
   d7162:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7164:	e7f6      	b.n	d7154 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7166:	4628      	mov	r0, r5
   d7168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d716a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d716a:	2200      	movs	r2, #0
   d716c:	7c00      	ldrb	r0, [r0, #16]
   d716e:	f7ff b9af 	b.w	d64d0 <HAL_I2C_Write_Data>

000d7172 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7172:	2100      	movs	r1, #0
   d7174:	7c00      	ldrb	r0, [r0, #16]
   d7176:	f7ff b9b3 	b.w	d64e0 <HAL_I2C_Available_Data>

000d717a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d717a:	2100      	movs	r1, #0
   d717c:	7c00      	ldrb	r0, [r0, #16]
   d717e:	f7ff b9b7 	b.w	d64f0 <HAL_I2C_Read_Data>

000d7182 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7182:	2100      	movs	r1, #0
   d7184:	7c00      	ldrb	r0, [r0, #16]
   d7186:	f7ff b9bb 	b.w	d6500 <HAL_I2C_Peek_Data>

000d718a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d718a:	2100      	movs	r1, #0
   d718c:	7c00      	ldrb	r0, [r0, #16]
   d718e:	f7ff b9bf 	b.w	d6510 <HAL_I2C_Flush_Data>

000d7192 <_ZN7TwoWireD0Ev>:
   d7192:	b510      	push	{r4, lr}
   d7194:	2114      	movs	r1, #20
   d7196:	4604      	mov	r4, r0
   d7198:	f000 fdc2 	bl	d7d20 <_ZdlPvj>
   d719c:	4620      	mov	r0, r4
   d719e:	bd10      	pop	{r4, pc}

000d71a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71a0:	b510      	push	{r4, lr}
   d71a2:	4604      	mov	r4, r0
   d71a4:	2300      	movs	r3, #0
   d71a6:	6063      	str	r3, [r4, #4]
   d71a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71ac:	60a3      	str	r3, [r4, #8]
   d71ae:	4b04      	ldr	r3, [pc, #16]	; (d71c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d71b0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71b2:	4608      	mov	r0, r1
   d71b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d71b6:	4611      	mov	r1, r2
   d71b8:	f7ff f9ba 	bl	d6530 <HAL_I2C_Init>
}
   d71bc:	4620      	mov	r0, r4
   d71be:	bd10      	pop	{r4, pc}
   d71c0:	000dc448 	.word	0x000dc448

000d71c4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71c4:	2300      	movs	r3, #0
   d71c6:	461a      	mov	r2, r3
   d71c8:	4619      	mov	r1, r3
   d71ca:	7c00      	ldrb	r0, [r0, #16]
   d71cc:	f7ff b968 	b.w	d64a0 <HAL_I2C_Begin>

000d71d0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71d0:	b570      	push	{r4, r5, r6, lr}
   d71d2:	460c      	mov	r4, r1
   d71d4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d71d6:	2514      	movs	r5, #20
   d71d8:	4606      	mov	r6, r0
   d71da:	462a      	mov	r2, r5
   d71dc:	2100      	movs	r1, #0
   d71de:	a801      	add	r0, sp, #4
   d71e0:	f002 fd82 	bl	d9ce8 <memset>
   d71e4:	7823      	ldrb	r3, [r4, #0]
   d71e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d71ea:	6863      	ldr	r3, [r4, #4]
   d71ec:	9303      	str	r3, [sp, #12]
   d71ee:	68e3      	ldr	r3, [r4, #12]
   d71f0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d71f2:	2200      	movs	r2, #0
   d71f4:	7a23      	ldrb	r3, [r4, #8]
   d71f6:	7c30      	ldrb	r0, [r6, #16]
   d71f8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d71fc:	a901      	add	r1, sp, #4
   d71fe:	9305      	str	r3, [sp, #20]
   d7200:	f7ff f99e 	bl	d6540 <HAL_I2C_Request_Data_Ex>
}
   d7204:	b006      	add	sp, #24
   d7206:	bd70      	pop	{r4, r5, r6, pc}

000d7208 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d720a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d720c:	f88d 1000 	strb.w	r1, [sp]
   d7210:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7214:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7216:	bf18      	it	ne
   d7218:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d721a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d721c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d721e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7222:	f7ff ffd5 	bl	d71d0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7226:	b005      	add	sp, #20
   d7228:	f85d fb04 	ldr.w	pc, [sp], #4

000d722c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d722c:	2301      	movs	r3, #1
   d722e:	f7ff bfeb 	b.w	d7208 <_ZN7TwoWire11requestFromEhjh>

000d7232 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7232:	2200      	movs	r2, #0
   d7234:	7c00      	ldrb	r0, [r0, #16]
   d7236:	f7ff b93b 	b.w	d64b0 <HAL_I2C_Begin_Transmission>

000d723a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d723a:	b2c9      	uxtb	r1, r1
   d723c:	f7ff bff9 	b.w	d7232 <_ZN7TwoWire17beginTransmissionEh>

000d7240 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7240:	2200      	movs	r2, #0
   d7242:	7c00      	ldrb	r0, [r0, #16]
   d7244:	f7ff b93c 	b.w	d64c0 <HAL_I2C_End_Transmission>

000d7248 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7248:	2101      	movs	r1, #1
   d724a:	f7ff bff9 	b.w	d7240 <_ZN7TwoWire15endTransmissionEh>

000d724e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d724e:	2100      	movs	r1, #0
   d7250:	7c00      	ldrb	r0, [r0, #16]
   d7252:	f7ff b965 	b.w	d6520 <HAL_I2C_Is_Enabled>

000d7256 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7256:	2200      	movs	r2, #0
   d7258:	4611      	mov	r1, r2
   d725a:	6840      	ldr	r0, [r0, #4]
   d725c:	f7ff ba4c 	b.w	d66f8 <network_listening>

000d7260 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7260:	2200      	movs	r2, #0
   d7262:	4611      	mov	r1, r2
   d7264:	6840      	ldr	r0, [r0, #4]
   d7266:	f7ff ba57 	b.w	d6718 <network_get_listen_timeout>

000d726a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d726a:	2200      	movs	r2, #0
   d726c:	6840      	ldr	r0, [r0, #4]
   d726e:	f7ff ba4b 	b.w	d6708 <network_set_listen_timeout>

000d7272 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7272:	2200      	movs	r2, #0
   d7274:	f081 0101 	eor.w	r1, r1, #1
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	f7ff ba35 	b.w	d66e8 <network_listen>

000d727e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d727e:	2300      	movs	r3, #0
   d7280:	461a      	mov	r2, r3
   d7282:	2101      	movs	r1, #1
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	f7ff ba27 	b.w	d66d8 <network_off>

000d728a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d728a:	2300      	movs	r3, #0
   d728c:	461a      	mov	r2, r3
   d728e:	4619      	mov	r1, r3
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7ff ba19 	b.w	d66c8 <network_on>

000d7296 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7296:	2200      	movs	r2, #0
   d7298:	4611      	mov	r1, r2
   d729a:	6840      	ldr	r0, [r0, #4]
   d729c:	f7ff ba0c 	b.w	d66b8 <network_ready>

000d72a0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72a0:	2200      	movs	r2, #0
   d72a2:	4611      	mov	r1, r2
   d72a4:	6840      	ldr	r0, [r0, #4]
   d72a6:	f7ff b9f7 	b.w	d6698 <network_connecting>

000d72aa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72aa:	2200      	movs	r2, #0
   d72ac:	2102      	movs	r1, #2
   d72ae:	6840      	ldr	r0, [r0, #4]
   d72b0:	f7ff b9fa 	b.w	d66a8 <network_disconnect>

000d72b4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72b4:	2300      	movs	r3, #0
   d72b6:	461a      	mov	r2, r3
   d72b8:	6840      	ldr	r0, [r0, #4]
   d72ba:	f7ff b9e5 	b.w	d6688 <network_connect>

000d72be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d72be:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72c0:	4605      	mov	r5, r0
   d72c2:	b188      	cbz	r0, d72e8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72c4:	6804      	ldr	r4, [r0, #0]
   d72c6:	b14c      	cbz	r4, d72dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d72c8:	68a3      	ldr	r3, [r4, #8]
   d72ca:	b11b      	cbz	r3, d72d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72cc:	2203      	movs	r2, #3
   d72ce:	4621      	mov	r1, r4
   d72d0:	4620      	mov	r0, r4
   d72d2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72d4:	2110      	movs	r1, #16
   d72d6:	4620      	mov	r0, r4
   d72d8:	f000 fd22 	bl	d7d20 <_ZdlPvj>
   d72dc:	4628      	mov	r0, r5
   d72de:	2114      	movs	r1, #20
      }
   d72e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72e4:	f000 bd1c 	b.w	d7d20 <_ZdlPvj>
   d72e8:	bd38      	pop	{r3, r4, r5, pc}

000d72ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d72ea:	b110      	cbz	r0, d72f2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d72ec:	6803      	ldr	r3, [r0, #0]
   d72ee:	685b      	ldr	r3, [r3, #4]
   d72f0:	4718      	bx	r3
   d72f2:	4770      	bx	lr

000d72f4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d72f4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d72f6:	6803      	ldr	r3, [r0, #0]
   d72f8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d72fa:	b1bb      	cbz	r3, d732c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d72fc:	6858      	ldr	r0, [r3, #4]
   d72fe:	f7ff f84f 	bl	d63a0 <os_thread_is_current>
   d7302:	b978      	cbnz	r0, d7324 <_ZN6ThreadD1Ev+0x30>
   d7304:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7306:	7c5a      	ldrb	r2, [r3, #17]
   d7308:	b912      	cbnz	r2, d7310 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d730a:	6858      	ldr	r0, [r3, #4]
   d730c:	f7ff f850 	bl	d63b0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7310:	6823      	ldr	r3, [r4, #0]
   d7312:	6858      	ldr	r0, [r3, #4]
   d7314:	f7ff f854 	bl	d63c0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7318:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d731a:	2300      	movs	r3, #0
   d731c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d731e:	b128      	cbz	r0, d732c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7320:	f7ff ffcd 	bl	d72be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7324:	6820      	ldr	r0, [r4, #0]
   d7326:	b108      	cbz	r0, d732c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7328:	f7ff ffc9 	bl	d72be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d732c:	4620      	mov	r0, r4
   d732e:	bd10      	pop	{r4, pc}

000d7330 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7330:	b538      	push	{r3, r4, r5, lr}
   d7332:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7334:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7338:	b108      	cbz	r0, d733e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d733a:	f7fc feb2 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d733e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7342:	b108      	cbz	r0, d7348 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7344:	f7ff f84c 	bl	d63e0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7348:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d734c:	b135      	cbz	r5, d735c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d734e:	4628      	mov	r0, r5
   d7350:	f7ff ffd0 	bl	d72f4 <_ZN6ThreadD1Ev>
   d7354:	2104      	movs	r1, #4
   d7356:	4628      	mov	r0, r5
   d7358:	f000 fce2 	bl	d7d20 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d735c:	6820      	ldr	r0, [r4, #0]
   d735e:	b108      	cbz	r0, d7364 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7360:	f7ff ffc3 	bl	d72ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7364:	4620      	mov	r0, r4
   d7366:	bd38      	pop	{r3, r4, r5, pc}

000d7368 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7368:	b510      	push	{r4, lr}
   d736a:	4b04      	ldr	r3, [pc, #16]	; (d737c <_ZN5spark9MeshClassD1Ev+0x14>)
   d736c:	4604      	mov	r4, r0
   d736e:	f840 3b08 	str.w	r3, [r0], #8
   d7372:	f7ff ffdd 	bl	d7330 <_ZN5spark11MeshPublishD1Ev>
   d7376:	4620      	mov	r0, r4
   d7378:	bd10      	pop	{r4, pc}
   d737a:	bf00      	nop
   d737c:	000dc470 	.word	0x000dc470

000d7380 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7380:	b538      	push	{r3, r4, r5, lr}
   d7382:	4c0e      	ldr	r4, [pc, #56]	; (d73bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7384:	4b0e      	ldr	r3, [pc, #56]	; (d73c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7386:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7388:	2500      	movs	r5, #0
   d738a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d738c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7390:	6063      	str	r3, [r4, #4]
   d7392:	60a5      	str	r5, [r4, #8]
   d7394:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7398:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d739c:	f7ff f818 	bl	d63d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d73a0:	4b08      	ldr	r3, [pc, #32]	; (d73c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d73a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d73aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d73ac:	4620      	mov	r0, r4
   d73ae:	4a06      	ldr	r2, [pc, #24]	; (d73c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d73b0:	4906      	ldr	r1, [pc, #24]	; (d73cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d73b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d73b6:	f000 bca5 	b.w	d7d04 <__aeabi_atexit>
   d73ba:	bf00      	nop
   d73bc:	2003e54c 	.word	0x2003e54c
   d73c0:	000dc558 	.word	0x000dc558
   d73c4:	000dc470 	.word	0x000dc470
   d73c8:	2003e1b8 	.word	0x2003e1b8
   d73cc:	000d7369 	.word	0x000d7369

000d73d0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73d2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73d4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73da:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73dc:	2201      	movs	r2, #1
   d73de:	f04f 33ff 	mov.w	r3, #4294967295
   d73e2:	4621      	mov	r1, r4
   d73e4:	47a8      	blx	r5
}
   d73e6:	b003      	add	sp, #12
   d73e8:	bd30      	pop	{r4, r5, pc}

000d73ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d73ea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73ec:	6803      	ldr	r3, [r0, #0]
   d73ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73f0:	f04f 33ff 	mov.w	r3, #4294967295
   d73f4:	46a4      	mov	ip, r4
}
   d73f6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73fa:	4760      	bx	ip

000d73fc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73fe:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7400:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7402:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7406:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7408:	4621      	mov	r1, r4
   d740a:	4613      	mov	r3, r2
   d740c:	2201      	movs	r2, #1
   d740e:	47a8      	blx	r5
}
   d7410:	b003      	add	sp, #12
   d7412:	bd30      	pop	{r4, r5, pc}

000d7414 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7414:	4770      	bx	lr

000d7416 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7416:	b538      	push	{r3, r4, r5, lr}
   d7418:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d741a:	681a      	ldr	r2, [r3, #0]
   d741c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d741e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7420:	da05      	bge.n	d742e <_ZN9TCPClient9connectedEv+0x18>
   d7422:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7426:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d742a:	429a      	cmp	r2, r3
   d742c:	d001      	beq.n	d7432 <_ZN9TCPClient9connectedEv+0x1c>
   d742e:	2501      	movs	r5, #1
   d7430:	e00b      	b.n	d744a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7432:	6803      	ldr	r3, [r0, #0]
   d7434:	691b      	ldr	r3, [r3, #16]
   d7436:	4798      	blx	r3
   d7438:	2800      	cmp	r0, #0
   d743a:	bf14      	ite	ne
   d743c:	2501      	movne	r5, #1
   d743e:	2500      	moveq	r5, #0
        if (!rv) {
   d7440:	d103      	bne.n	d744a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7442:	6823      	ldr	r3, [r4, #0]
   d7444:	4620      	mov	r0, r4
   d7446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7448:	4798      	blx	r3
        }
    }
    return rv;
}
   d744a:	4628      	mov	r0, r5
   d744c:	bd38      	pop	{r3, r4, r5, pc}

000d744e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d744e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7450:	6818      	ldr	r0, [r3, #0]
}
   d7452:	43c0      	mvns	r0, r0
   d7454:	0fc0      	lsrs	r0, r0, #31
   d7456:	4770      	bx	lr

000d7458 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7458:	4770      	bx	lr

000d745a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d745a:	2000      	movs	r0, #0
   d745c:	4770      	bx	lr

000d745e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d745e:	b510      	push	{r4, lr}
   d7460:	2114      	movs	r1, #20
   d7462:	4604      	mov	r4, r0
   d7464:	f000 fc5c 	bl	d7d20 <_ZdlPvj>
   d7468:	4620      	mov	r0, r4
   d746a:	bd10      	pop	{r4, pc}

000d746c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d746c:	f7fc be17 	b.w	d409e <_ZdlPv>

000d7470 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7472:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7474:	2200      	movs	r2, #0
   d7476:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7478:	9202      	str	r2, [sp, #8]
   d747a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d747c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d747e:	4604      	mov	r4, r0
   d7480:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7482:	d008      	beq.n	d7496 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7488:	fbb3 f1f2 	udiv	r1, r3, r2
   d748c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d748e:	fb02 3111 	mls	r1, r2, r1, r3
   d7492:	434a      	muls	r2, r1
   d7494:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7496:	6960      	ldr	r0, [r4, #20]
   d7498:	2308      	movs	r3, #8
   d749a:	9300      	str	r3, [sp, #0]
   d749c:	f241 0205 	movw	r2, #4101	; 0x1005
   d74a0:	446b      	add	r3, sp
   d74a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d74a6:	6800      	ldr	r0, [r0, #0]
   d74a8:	f7ff f852 	bl	d6550 <sock_setsockopt>
    if (ret < 0) {
   d74ac:	2800      	cmp	r0, #0
   d74ae:	db08      	blt.n	d74c2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d74b0:	6960      	ldr	r0, [r4, #20]
   d74b2:	2300      	movs	r3, #0
   d74b4:	4632      	mov	r2, r6
   d74b6:	4629      	mov	r1, r5
   d74b8:	6800      	ldr	r0, [r0, #0]
   d74ba:	f7ff f869 	bl	d6590 <sock_send>
    if (ret < 0) {
   d74be:	2800      	cmp	r0, #0
   d74c0:	da04      	bge.n	d74cc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d74c2:	f7ff f961 	bl	d6788 <__errno>
   d74c6:	6803      	ldr	r3, [r0, #0]
   d74c8:	6063      	str	r3, [r4, #4]
   d74ca:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d74cc:	b004      	add	sp, #16
   d74ce:	bd70      	pop	{r4, r5, r6, pc}

000d74d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74d0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74d2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74d4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74d6:	689b      	ldr	r3, [r3, #8]
   d74d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74da:	68a3      	ldr	r3, [r4, #8]
   d74dc:	3b01      	subs	r3, #1
   d74de:	60a3      	str	r3, [r4, #8]
   d74e0:	b92b      	cbnz	r3, d74ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d74e2:	6823      	ldr	r3, [r4, #0]
   d74e4:	4620      	mov	r0, r4
   d74e6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74ec:	4718      	bx	r3
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d74f0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74f2:	4604      	mov	r4, r0
   d74f4:	694d      	ldr	r5, [r1, #20]
   d74f6:	4b05      	ldr	r3, [pc, #20]	; (d750c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d74f8:	f844 3b04 	str.w	r3, [r4], #4
   d74fc:	358c      	adds	r5, #140	; 0x8c
   d74fe:	4606      	mov	r6, r0
   d7500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7504:	682b      	ldr	r3, [r5, #0]
   d7506:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7508:	4630      	mov	r0, r6
   d750a:	bd70      	pop	{r4, r5, r6, pc}
   d750c:	000dc3d4 	.word	0x000dc3d4

000d7510 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7510:	b510      	push	{r4, lr}
   d7512:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7514:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7518:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d751c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d751e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7520:	d005      	beq.n	d752e <_ZN9TCPClient4peekEv+0x1e>
   d7522:	6962      	ldr	r2, [r4, #20]
   d7524:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7528:	4413      	add	r3, r2
   d752a:	7918      	ldrb	r0, [r3, #4]
   d752c:	bd10      	pop	{r4, pc}
   d752e:	6803      	ldr	r3, [r0, #0]
   d7530:	691b      	ldr	r3, [r3, #16]
   d7532:	4798      	blx	r3
   d7534:	2800      	cmp	r0, #0
   d7536:	d1f4      	bne.n	d7522 <_ZN9TCPClient4peekEv+0x12>
   d7538:	f04f 30ff 	mov.w	r0, #4294967295
}
   d753c:	bd10      	pop	{r4, pc}

000d753e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d753e:	b510      	push	{r4, lr}
   d7540:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7542:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7546:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d754a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d754c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d754e:	d008      	beq.n	d7562 <_ZN9TCPClient4readEv+0x24>
   d7550:	6962      	ldr	r2, [r4, #20]
   d7552:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7556:	1c59      	adds	r1, r3, #1
   d7558:	4413      	add	r3, r2
   d755a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d755e:	7918      	ldrb	r0, [r3, #4]
   d7560:	bd10      	pop	{r4, pc}
   d7562:	6803      	ldr	r3, [r0, #0]
   d7564:	691b      	ldr	r3, [r3, #16]
   d7566:	4798      	blx	r3
   d7568:	2800      	cmp	r0, #0
   d756a:	d1f1      	bne.n	d7550 <_ZN9TCPClient4readEv+0x12>
   d756c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7570:	bd10      	pop	{r4, pc}

000d7572 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7574:	6943      	ldr	r3, [r0, #20]
   d7576:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7578:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d757c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7580:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7582:	4605      	mov	r5, r0
   d7584:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7586:	d106      	bne.n	d7596 <_ZN9TCPClient4readEPhj+0x24>
   d7588:	6803      	ldr	r3, [r0, #0]
   d758a:	691b      	ldr	r3, [r3, #16]
   d758c:	4798      	blx	r3
   d758e:	b910      	cbnz	r0, d7596 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7590:	f04f 34ff 	mov.w	r4, #4294967295
   d7594:	e014      	b.n	d75c0 <_ZN9TCPClient4readEPhj+0x4e>
   d7596:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7598:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d759c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d75a0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d75a2:	42bc      	cmp	r4, r7
   d75a4:	bf28      	it	cs
   d75a6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d75a8:	4419      	add	r1, r3
   d75aa:	4622      	mov	r2, r4
   d75ac:	3104      	adds	r1, #4
   d75ae:	4630      	mov	r0, r6
   d75b0:	f002 fb74 	bl	d9c9c <memcpy>
   d75b4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d75b6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d75ba:	4423      	add	r3, r4
   d75bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d75c0:	4620      	mov	r0, r4
   d75c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75c4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75c8:	4698      	mov	r8, r3
    stop();
   d75ca:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75cc:	b093      	sub	sp, #76	; 0x4c
    stop();
   d75ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75d0:	460d      	mov	r5, r1
   d75d2:	4606      	mov	r6, r0
   d75d4:	4617      	mov	r7, r2
    stop();
   d75d6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d75d8:	ab12      	add	r3, sp, #72	; 0x48
   d75da:	2400      	movs	r4, #0
   d75dc:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75e0:	4622      	mov	r2, r4
   d75e2:	4621      	mov	r1, r4
   d75e4:	4628      	mov	r0, r5
   d75e6:	f7fe fe1b 	bl	d6220 <netdb_getaddrinfo>
   d75ea:	4681      	mov	r9, r0
   d75ec:	2800      	cmp	r0, #0
   d75ee:	d13d      	bne.n	d766c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d75f0:	9b00      	ldr	r3, [sp, #0]
   d75f2:	2b00      	cmp	r3, #0
   d75f4:	d056      	beq.n	d76a4 <_ZN9TCPClient7connectEPKctm+0xe0>
   d75f6:	695b      	ldr	r3, [r3, #20]
   d75f8:	2b00      	cmp	r3, #0
   d75fa:	d053      	beq.n	d76a4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d75fc:	a806      	add	r0, sp, #24
   d75fe:	f7ff fc4b 	bl	d6e98 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7602:	9b00      	ldr	r3, [sp, #0]
   d7604:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7606:	7863      	ldrb	r3, [r4, #1]
   d7608:	2b02      	cmp	r3, #2
   d760a:	d101      	bne.n	d7610 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d760c:	1d21      	adds	r1, r4, #4
   d760e:	e013      	b.n	d7638 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7610:	2b0a      	cmp	r3, #10
   d7612:	d114      	bne.n	d763e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7614:	2211      	movs	r2, #17
   d7616:	4649      	mov	r1, r9
   d7618:	a801      	add	r0, sp, #4
   d761a:	f002 fb65 	bl	d9ce8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d761e:	68a3      	ldr	r3, [r4, #8]
   d7620:	bb33      	cbnz	r3, d7670 <_ZN9TCPClient7connectEPKctm+0xac>
   d7622:	68e3      	ldr	r3, [r4, #12]
   d7624:	bb23      	cbnz	r3, d7670 <_ZN9TCPClient7connectEPKctm+0xac>
   d7626:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d762a:	6925      	ldr	r5, [r4, #16]
   d762c:	f7fe fee8 	bl	d6400 <inet_htonl>
   d7630:	4285      	cmp	r5, r0
   d7632:	d11d      	bne.n	d7670 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7634:	f104 0114 	add.w	r1, r4, #20
   d7638:	a806      	add	r0, sp, #24
   d763a:	f7ff fc70 	bl	d6f1e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d763e:	a806      	add	r0, sp, #24
   d7640:	f7ff fc4a 	bl	d6ed8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7644:	2800      	cmp	r0, #0
   d7646:	d02d      	beq.n	d76a4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7648:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d764a:	ad07      	add	r5, sp, #28
   d764c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7650:	4b18      	ldr	r3, [pc, #96]	; (d76b4 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7652:	930c      	str	r3, [sp, #48]	; 0x30
   d7654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7656:	ac0d      	add	r4, sp, #52	; 0x34
   d7658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d765a:	682b      	ldr	r3, [r5, #0]
   d765c:	7023      	strb	r3, [r4, #0]
   d765e:	463a      	mov	r2, r7
   d7660:	4643      	mov	r3, r8
   d7662:	a90c      	add	r1, sp, #48	; 0x30
   d7664:	4630      	mov	r0, r6
   d7666:	47c8      	blx	r9
   d7668:	4681      	mov	r9, r0
   d766a:	e01b      	b.n	d76a4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d766c:	46a1      	mov	r9, r4
   d766e:	e019      	b.n	d76a4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7670:	f104 0308 	add.w	r3, r4, #8
   d7674:	ad01      	add	r5, sp, #4
   d7676:	3418      	adds	r4, #24
   d7678:	6818      	ldr	r0, [r3, #0]
   d767a:	6859      	ldr	r1, [r3, #4]
   d767c:	462a      	mov	r2, r5
   d767e:	c203      	stmia	r2!, {r0, r1}
   d7680:	3308      	adds	r3, #8
   d7682:	42a3      	cmp	r3, r4
   d7684:	4615      	mov	r5, r2
   d7686:	d1f7      	bne.n	d7678 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7688:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d768a:	a901      	add	r1, sp, #4
   d768c:	a80c      	add	r0, sp, #48	; 0x30
   d768e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7690:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7694:	f7ff fc0e 	bl	d6eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d769a:	ac07      	add	r4, sp, #28
   d769c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d769e:	682b      	ldr	r3, [r5, #0]
   d76a0:	7023      	strb	r3, [r4, #0]
   d76a2:	e7cc      	b.n	d763e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d76a4:	9800      	ldr	r0, [sp, #0]
   d76a6:	f7fe fdb3 	bl	d6210 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d76aa:	4648      	mov	r0, r9
   d76ac:	b013      	add	sp, #76	; 0x4c
   d76ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d76b2:	bf00      	nop
   d76b4:	000dc3d4 	.word	0x000dc3d4

000d76b8 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d76b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d76ba:	2300      	movs	r3, #0
   d76bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d76c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d76c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d76c6:	4770      	bx	lr

000d76c8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76cc:	461e      	mov	r6, r3
    stop();
   d76ce:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76d0:	460c      	mov	r4, r1
   d76d2:	b08a      	sub	sp, #40	; 0x28
    stop();
   d76d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76d6:	4605      	mov	r5, r0
   d76d8:	4617      	mov	r7, r2
    stop();
   d76da:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76dc:	7d23      	ldrb	r3, [r4, #20]
   d76de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76e2:	2b04      	cmp	r3, #4
   d76e4:	bf0c      	ite	eq
   d76e6:	2002      	moveq	r0, #2
   d76e8:	200a      	movne	r0, #10
   d76ea:	2206      	movs	r2, #6
   d76ec:	2101      	movs	r1, #1
   d76ee:	f7fe ff57 	bl	d65a0 <sock_socket>
   d76f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d76f6:	696b      	ldr	r3, [r5, #20]
   d76f8:	681b      	ldr	r3, [r3, #0]
   d76fa:	2b00      	cmp	r3, #0
   d76fc:	db18      	blt.n	d7730 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d76fe:	4628      	mov	r0, r5
   d7700:	f7ff ffda 	bl	d76b8 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7704:	b1d6      	cbz	r6, d773c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7706:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7708:	a903      	add	r1, sp, #12
   d770a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d770c:	9303      	str	r3, [sp, #12]
   d770e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7712:	f7fe fe25 	bl	d6360 <if_index_to_name>
   d7716:	b958      	cbnz	r0, d7730 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7718:	6968      	ldr	r0, [r5, #20]
   d771a:	2306      	movs	r3, #6
   d771c:	9300      	str	r3, [sp, #0]
   d771e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7722:	ab03      	add	r3, sp, #12
   d7724:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7728:	6800      	ldr	r0, [r0, #0]
   d772a:	f7fe ff11 	bl	d6550 <sock_setsockopt>
   d772e:	b128      	cbz	r0, d773c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7730:	682b      	ldr	r3, [r5, #0]
   d7732:	4628      	mov	r0, r5
   d7734:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7736:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7738:	4798      	blx	r3
   d773a:	e03b      	b.n	d77b4 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d773c:	261c      	movs	r6, #28
   d773e:	4632      	mov	r2, r6
   d7740:	2100      	movs	r1, #0
   d7742:	a803      	add	r0, sp, #12
   d7744:	f002 fad0 	bl	d9ce8 <memset>
    if (ip.version() == 4) {
   d7748:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d774a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d774e:	2b04      	cmp	r3, #4
   d7750:	d10c      	bne.n	d776c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7752:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7754:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7756:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d775a:	f7fe fe59 	bl	d6410 <inet_htons>
   d775e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7762:	6860      	ldr	r0, [r4, #4]
   d7764:	f7fe fe4c 	bl	d6400 <inet_htonl>
   d7768:	9004      	str	r0, [sp, #16]
   d776a:	e013      	b.n	d7794 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d776c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d776e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7770:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7774:	f7fe fe4c 	bl	d6410 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7778:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d777a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d777e:	1d23      	adds	r3, r4, #4
   d7780:	f104 0714 	add.w	r7, r4, #20
   d7784:	6818      	ldr	r0, [r3, #0]
   d7786:	6859      	ldr	r1, [r3, #4]
   d7788:	4632      	mov	r2, r6
   d778a:	c203      	stmia	r2!, {r0, r1}
   d778c:	3308      	adds	r3, #8
   d778e:	42bb      	cmp	r3, r7
   d7790:	4616      	mov	r6, r2
   d7792:	d1f7      	bne.n	d7784 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7794:	696b      	ldr	r3, [r5, #20]
   d7796:	221c      	movs	r2, #28
   d7798:	a903      	add	r1, sp, #12
   d779a:	6818      	ldr	r0, [r3, #0]
   d779c:	f7fe fee8 	bl	d6570 <sock_connect>
   d77a0:	2800      	cmp	r0, #0
   d77a2:	d1c5      	bne.n	d7730 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d77a4:	3404      	adds	r4, #4
   d77a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d77a8:	696d      	ldr	r5, [r5, #20]
   d77aa:	358c      	adds	r5, #140	; 0x8c
   d77ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77ae:	6823      	ldr	r3, [r4, #0]
   d77b0:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d77b2:	2401      	movs	r4, #1
}
   d77b4:	4620      	mov	r0, r4
   d77b6:	b00a      	add	sp, #40	; 0x28
   d77b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d77bc <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d77be:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d77c2:	6818      	ldr	r0, [r3, #0]
   d77c4:	2800      	cmp	r0, #0
   d77c6:	db01      	blt.n	d77cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d77c8:	f7fe feca 	bl	d6560 <sock_close>
   d77cc:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d77ce:	f04f 32ff 	mov.w	r2, #4294967295
   d77d2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77d4:	6960      	ldr	r0, [r4, #20]
   d77d6:	2211      	movs	r2, #17
   d77d8:	2100      	movs	r1, #0
   d77da:	308c      	adds	r0, #140	; 0x8c
   d77dc:	f002 fa84 	bl	d9ce8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d77e0:	4620      	mov	r0, r4
}
   d77e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d77e6:	f7ff bf67 	b.w	d76b8 <_ZN9TCPClient12flush_bufferEv>
	...

000d77ec <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77ec:	b530      	push	{r4, r5, lr}
   d77ee:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77f4:	b08b      	sub	sp, #44	; 0x2c
   d77f6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77f8:	b11b      	cbz	r3, d7802 <_ZN9TCPClient9availableEv+0x16>
   d77fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d77fe:	429a      	cmp	r2, r3
   d7800:	d040      	beq.n	d7884 <_ZN9TCPClient9availableEv+0x98>
   d7802:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7804:	6818      	ldr	r0, [r3, #0]
   d7806:	2800      	cmp	r0, #0
   d7808:	db3f      	blt.n	d788a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d780a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d780e:	2d7f      	cmp	r5, #127	; 0x7f
   d7810:	d83b      	bhi.n	d788a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7812:	1d19      	adds	r1, r3, #4
   d7814:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7818:	2308      	movs	r3, #8
   d781a:	4429      	add	r1, r5
   d781c:	f7fe feb0 	bl	d6580 <sock_recv>
            if (ret > 0) {
   d7820:	2800      	cmp	r0, #0
   d7822:	dd0c      	ble.n	d783e <_ZN9TCPClient9availableEv+0x52>
   d7824:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7826:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d782a:	b90a      	cbnz	r2, d7830 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d782c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7830:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7832:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7836:	4418      	add	r0, r3
   d7838:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d783c:	e025      	b.n	d788a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d783e:	f7fe ffa3 	bl	d6788 <__errno>
   d7842:	6803      	ldr	r3, [r0, #0]
   d7844:	2b0b      	cmp	r3, #11
   d7846:	d020      	beq.n	d788a <_ZN9TCPClient9availableEv+0x9e>
   d7848:	f7fe ff9e 	bl	d6788 <__errno>
   d784c:	6803      	ldr	r3, [r0, #0]
   d784e:	2b0b      	cmp	r3, #11
   d7850:	d01b      	beq.n	d788a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7852:	2320      	movs	r3, #32
   d7854:	2500      	movs	r5, #0
   d7856:	9302      	str	r3, [sp, #8]
   d7858:	9503      	str	r5, [sp, #12]
   d785a:	f7fe ff95 	bl	d6788 <__errno>
   d785e:	6803      	ldr	r3, [r0, #0]
   d7860:	9301      	str	r3, [sp, #4]
   d7862:	4b0e      	ldr	r3, [pc, #56]	; (d789c <_ZN9TCPClient9availableEv+0xb0>)
   d7864:	9300      	str	r3, [sp, #0]
   d7866:	aa02      	add	r2, sp, #8
   d7868:	462b      	mov	r3, r5
   d786a:	490d      	ldr	r1, [pc, #52]	; (d78a0 <_ZN9TCPClient9availableEv+0xb4>)
   d786c:	2032      	movs	r0, #50	; 0x32
   d786e:	f7fe fedf 	bl	d6630 <log_message>
                    sock_close(d_->sock);
   d7872:	6963      	ldr	r3, [r4, #20]
   d7874:	6818      	ldr	r0, [r3, #0]
   d7876:	f7fe fe73 	bl	d6560 <sock_close>
   d787a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d787c:	f04f 32ff 	mov.w	r2, #4294967295
   d7880:	601a      	str	r2, [r3, #0]
   d7882:	e002      	b.n	d788a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7884:	f7ff ff18 	bl	d76b8 <_ZN9TCPClient12flush_bufferEv>
   d7888:	e7bb      	b.n	d7802 <_ZN9TCPClient9availableEv+0x16>
   d788a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d788c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7890:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7894:	1a18      	subs	r0, r3, r0
}
   d7896:	b00b      	add	sp, #44	; 0x2c
   d7898:	bd30      	pop	{r4, r5, pc}
   d789a:	bf00      	nop
   d789c:	000dc50b 	.word	0x000dc50b
   d78a0:	000dc504 	.word	0x000dc504

000d78a4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d78a4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d78a6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d78a8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d78aa:	6001      	str	r1, [r0, #0]
   d78ac:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d78b0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d78b4:	3088      	adds	r0, #136	; 0x88
   d78b6:	f7ff faef 	bl	d6e98 <_ZN9IPAddressC1Ev>
}
   d78ba:	4620      	mov	r0, r4
   d78bc:	bd10      	pop	{r4, pc}
	...

000d78c0 <_ZN9TCPClientC1Ei>:
   d78c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78c4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d78c6:	2300      	movs	r3, #0
   d78c8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d78ca:	4a14      	ldr	r2, [pc, #80]	; (d791c <_ZN9TCPClientC1Ei+0x5c>)
   d78cc:	6043      	str	r3, [r0, #4]
   d78ce:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78d0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78d2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78d4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78d6:	20a0      	movs	r0, #160	; 0xa0
   d78d8:	460e      	mov	r6, r1
   d78da:	f7fc fbde 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78de:	4605      	mov	r5, r0
   d78e0:	b110      	cbz	r0, d78e8 <_ZN9TCPClientC1Ei+0x28>
   d78e2:	4631      	mov	r1, r6
   d78e4:	f7ff ffde 	bl	d78a4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78e8:	2014      	movs	r0, #20
   d78ea:	f7fc fbd6 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78ee:	4603      	mov	r3, r0
   d78f0:	b128      	cbz	r0, d78fe <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78f2:	2201      	movs	r2, #1
   d78f4:	6042      	str	r2, [r0, #4]
   d78f6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78f8:	4a09      	ldr	r2, [pc, #36]	; (d7920 <_ZN9TCPClientC1Ei+0x60>)
   d78fa:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78fc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78fe:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7900:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7902:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7904:	b128      	cbz	r0, d7912 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7906:	6843      	ldr	r3, [r0, #4]
   d7908:	3b01      	subs	r3, #1
   d790a:	6043      	str	r3, [r0, #4]
   d790c:	b90b      	cbnz	r3, d7912 <_ZN9TCPClientC1Ei+0x52>
   d790e:	f7ff fddf 	bl	d74d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7912:	4620      	mov	r0, r4
   d7914:	f7ff fed0 	bl	d76b8 <_ZN9TCPClient12flush_bufferEv>
}
   d7918:	4620      	mov	r0, r4
   d791a:	bd70      	pop	{r4, r5, r6, pc}
   d791c:	000dc4c0 	.word	0x000dc4c0
   d7920:	000dc4a4 	.word	0x000dc4a4

000d7924 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7924:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7926:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d792a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d792c:	f7ff ffc8 	bl	d78c0 <_ZN9TCPClientC1Ei>
}
   d7930:	4620      	mov	r0, r4
   d7932:	bd10      	pop	{r4, pc}

000d7934 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7934:	b510      	push	{r4, lr}
   d7936:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7938:	6800      	ldr	r0, [r0, #0]
   d793a:	2800      	cmp	r0, #0
   d793c:	db01      	blt.n	d7942 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d793e:	f7fe fe0f 	bl	d6560 <sock_close>
    }
}
   d7942:	4620      	mov	r0, r4
   d7944:	bd10      	pop	{r4, pc}

000d7946 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7946:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7948:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d794a:	4620      	mov	r0, r4
   d794c:	f7ff fff2 	bl	d7934 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7950:	b124      	cbz	r4, d795c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7952:	4620      	mov	r0, r4
   d7954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7958:	f7fc bba1 	b.w	d409e <_ZdlPv>
   d795c:	bd10      	pop	{r4, pc}

000d795e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d795e:	2200      	movs	r2, #0
   d7960:	4611      	mov	r1, r2
   d7962:	6840      	ldr	r0, [r0, #4]
   d7964:	f7fe bea8 	b.w	d66b8 <network_ready>

000d7968 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7968:	2200      	movs	r2, #0
   d796a:	4611      	mov	r1, r2
   d796c:	6840      	ldr	r0, [r0, #4]
   d796e:	f7fe bec3 	b.w	d66f8 <network_listening>

000d7972 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7972:	2200      	movs	r2, #0
   d7974:	4611      	mov	r1, r2
   d7976:	6840      	ldr	r0, [r0, #4]
   d7978:	f7fe bece 	b.w	d6718 <network_get_listen_timeout>

000d797c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d797c:	2200      	movs	r2, #0
   d797e:	6840      	ldr	r0, [r0, #4]
   d7980:	f7fe bec2 	b.w	d6708 <network_set_listen_timeout>

000d7984 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7984:	2200      	movs	r2, #0
   d7986:	f081 0101 	eor.w	r1, r1, #1
   d798a:	6840      	ldr	r0, [r0, #4]
   d798c:	f7fe beac 	b.w	d66e8 <network_listen>

000d7990 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7990:	2300      	movs	r3, #0
   d7992:	461a      	mov	r2, r3
   d7994:	4619      	mov	r1, r3
   d7996:	6840      	ldr	r0, [r0, #4]
   d7998:	f7fe be9e 	b.w	d66d8 <network_off>

000d799c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d799c:	2300      	movs	r3, #0
   d799e:	461a      	mov	r2, r3
   d79a0:	4619      	mov	r1, r3
   d79a2:	6840      	ldr	r0, [r0, #4]
   d79a4:	f7fe be90 	b.w	d66c8 <network_on>

000d79a8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d79a8:	2200      	movs	r2, #0
   d79aa:	4611      	mov	r1, r2
   d79ac:	6840      	ldr	r0, [r0, #4]
   d79ae:	f7fe be73 	b.w	d6698 <network_connecting>

000d79b2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d79b2:	2200      	movs	r2, #0
   d79b4:	2102      	movs	r1, #2
   d79b6:	6840      	ldr	r0, [r0, #4]
   d79b8:	f7fe be76 	b.w	d66a8 <network_disconnect>

000d79bc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d79bc:	2300      	movs	r3, #0
   d79be:	461a      	mov	r2, r3
   d79c0:	6840      	ldr	r0, [r0, #4]
   d79c2:	f7fe be61 	b.w	d6688 <network_connect>
	...

000d79c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d79c8:	4b02      	ldr	r3, [pc, #8]	; (d79d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d79ca:	2204      	movs	r2, #4
   d79cc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d79ce:	4a02      	ldr	r2, [pc, #8]	; (d79d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d79d0:	601a      	str	r2, [r3, #0]
   d79d2:	4770      	bx	lr
   d79d4:	2003e720 	.word	0x2003e720
   d79d8:	000dc524 	.word	0x000dc524

000d79dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d79dc:	2300      	movs	r3, #0
   d79de:	461a      	mov	r2, r3
   d79e0:	6840      	ldr	r0, [r0, #4]
   d79e2:	f7fe be51 	b.w	d6688 <network_connect>

000d79e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d79e6:	2200      	movs	r2, #0
   d79e8:	2102      	movs	r1, #2
   d79ea:	6840      	ldr	r0, [r0, #4]
   d79ec:	f7fe be5c 	b.w	d66a8 <network_disconnect>

000d79f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d79f0:	2200      	movs	r2, #0
   d79f2:	4611      	mov	r1, r2
   d79f4:	6840      	ldr	r0, [r0, #4]
   d79f6:	f7fe be4f 	b.w	d6698 <network_connecting>

000d79fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d79fa:	2200      	movs	r2, #0
   d79fc:	4611      	mov	r1, r2
   d79fe:	6840      	ldr	r0, [r0, #4]
   d7a00:	f7fe be5a 	b.w	d66b8 <network_ready>

000d7a04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7a04:	2300      	movs	r3, #0
   d7a06:	461a      	mov	r2, r3
   d7a08:	4619      	mov	r1, r3
   d7a0a:	6840      	ldr	r0, [r0, #4]
   d7a0c:	f7fe be5c 	b.w	d66c8 <network_on>

000d7a10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7a10:	2300      	movs	r3, #0
   d7a12:	461a      	mov	r2, r3
   d7a14:	4619      	mov	r1, r3
   d7a16:	6840      	ldr	r0, [r0, #4]
   d7a18:	f7fe be5e 	b.w	d66d8 <network_off>

000d7a1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7a1c:	2200      	movs	r2, #0
   d7a1e:	f081 0101 	eor.w	r1, r1, #1
   d7a22:	6840      	ldr	r0, [r0, #4]
   d7a24:	f7fe be60 	b.w	d66e8 <network_listen>

000d7a28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a28:	2200      	movs	r2, #0
   d7a2a:	6840      	ldr	r0, [r0, #4]
   d7a2c:	f7fe be6c 	b.w	d6708 <network_set_listen_timeout>

000d7a30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a30:	2200      	movs	r2, #0
   d7a32:	4611      	mov	r1, r2
   d7a34:	6840      	ldr	r0, [r0, #4]
   d7a36:	f7fe be6f 	b.w	d6718 <network_get_listen_timeout>

000d7a3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a3a:	2200      	movs	r2, #0
   d7a3c:	4611      	mov	r1, r2
   d7a3e:	6840      	ldr	r0, [r0, #4]
   d7a40:	f7fe be5a 	b.w	d66f8 <network_listening>

000d7a44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a48:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a4a:	b095      	sub	sp, #84	; 0x54
   d7a4c:	4616      	mov	r6, r2
   d7a4e:	460d      	mov	r5, r1
   d7a50:	4607      	mov	r7, r0
    IPAddress addr;
   d7a52:	f7ff fa21 	bl	d6e98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7a56:	4621      	mov	r1, r4
   d7a58:	2220      	movs	r2, #32
   d7a5a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a5c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a5e:	f002 f943 	bl	d9ce8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a62:	2340      	movs	r3, #64	; 0x40
   d7a64:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a66:	4621      	mov	r1, r4
   d7a68:	466b      	mov	r3, sp
   d7a6a:	aa0c      	add	r2, sp, #48	; 0x30
   d7a6c:	4630      	mov	r0, r6
   d7a6e:	f7fe fbd7 	bl	d6220 <netdb_getaddrinfo>
    if (!r) {
   d7a72:	4604      	mov	r4, r0
   d7a74:	2800      	cmp	r0, #0
   d7a76:	d144      	bne.n	d7b02 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a78:	4602      	mov	r2, r0
   d7a7a:	2101      	movs	r1, #1
   d7a7c:	6868      	ldr	r0, [r5, #4]
   d7a7e:	f7fe fe1b 	bl	d66b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a82:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a84:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a86:	4622      	mov	r2, r4
   d7a88:	6868      	ldr	r0, [r5, #4]
   d7a8a:	f7fe fe15 	bl	d66b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a8e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a90:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7a92:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a94:	2e00      	cmp	r6, #0
   d7a96:	d034      	beq.n	d7b02 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7a98:	2900      	cmp	r1, #0
   d7a9a:	d132      	bne.n	d7b02 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a9c:	6873      	ldr	r3, [r6, #4]
   d7a9e:	2b02      	cmp	r3, #2
   d7aa0:	d002      	beq.n	d7aa8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7aa2:	2b0a      	cmp	r3, #10
   d7aa4:	d009      	beq.n	d7aba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7aa6:	e02a      	b.n	d7afe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7aa8:	f1b8 0f00 	cmp.w	r8, #0
   d7aac:	d027      	beq.n	d7afe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7aae:	6971      	ldr	r1, [r6, #20]
   d7ab0:	4638      	mov	r0, r7
   d7ab2:	3104      	adds	r1, #4
   d7ab4:	f7ff fa33 	bl	d6f1e <_ZN9IPAddressaSEPKh>
   d7ab8:	e020      	b.n	d7afc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7aba:	f1b9 0f00 	cmp.w	r9, #0
   d7abe:	d01e      	beq.n	d7afe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7ac0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7ac2:	2211      	movs	r2, #17
   d7ac4:	a801      	add	r0, sp, #4
   d7ac6:	f002 f90f 	bl	d9ce8 <memset>
                    a.v = 6;
   d7aca:	2306      	movs	r3, #6
   d7acc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7ad0:	ad01      	add	r5, sp, #4
   d7ad2:	f104 0308 	add.w	r3, r4, #8
   d7ad6:	3418      	adds	r4, #24
   d7ad8:	6818      	ldr	r0, [r3, #0]
   d7ada:	6859      	ldr	r1, [r3, #4]
   d7adc:	462a      	mov	r2, r5
   d7ade:	c203      	stmia	r2!, {r0, r1}
   d7ae0:	3308      	adds	r3, #8
   d7ae2:	42a3      	cmp	r3, r4
   d7ae4:	4615      	mov	r5, r2
   d7ae6:	d1f7      	bne.n	d7ad8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7ae8:	a901      	add	r1, sp, #4
   d7aea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7aec:	ad07      	add	r5, sp, #28
   d7aee:	f7ff f9e1 	bl	d6eb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7af4:	1d3c      	adds	r4, r7, #4
   d7af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7af8:	682b      	ldr	r3, [r5, #0]
   d7afa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7afc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7afe:	69f6      	ldr	r6, [r6, #28]
   d7b00:	e7c8      	b.n	d7a94 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7b02:	9800      	ldr	r0, [sp, #0]
   d7b04:	f7fe fb84 	bl	d6210 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7b08:	4638      	mov	r0, r7
   d7b0a:	b015      	add	sp, #84	; 0x54
   d7b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7b10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7b10:	4b02      	ldr	r3, [pc, #8]	; (d7b1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7b12:	4a03      	ldr	r2, [pc, #12]	; (d7b20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7b14:	601a      	str	r2, [r3, #0]
   d7b16:	2200      	movs	r2, #0
   d7b18:	605a      	str	r2, [r3, #4]
   d7b1a:	4770      	bx	lr
   d7b1c:	2003e728 	.word	0x2003e728
   d7b20:	000dc558 	.word	0x000dc558

000d7b24 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b24:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b26:	4e18      	ldr	r6, [pc, #96]	; (d7b88 <pinAvailable+0x64>)
   d7b28:	6831      	ldr	r1, [r6, #0]
   d7b2a:	f011 0501 	ands.w	r5, r1, #1
   d7b2e:	4604      	mov	r4, r0
   d7b30:	d10a      	bne.n	d7b48 <pinAvailable+0x24>
   d7b32:	4630      	mov	r0, r6
   d7b34:	f7fc fac2 	bl	d40bc <__cxa_guard_acquire>
   d7b38:	b130      	cbz	r0, d7b48 <pinAvailable+0x24>
   d7b3a:	4629      	mov	r1, r5
   d7b3c:	4813      	ldr	r0, [pc, #76]	; (d7b8c <pinAvailable+0x68>)
   d7b3e:	f7fe fe6f 	bl	d6820 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b42:	4630      	mov	r0, r6
   d7b44:	f7fc fabf 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7b48:	4810      	ldr	r0, [pc, #64]	; (d7b8c <pinAvailable+0x68>)
   d7b4a:	f7fe ff8b 	bl	d6a64 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b4e:	b128      	cbz	r0, d7b5c <pinAvailable+0x38>
   d7b50:	f1a4 030b 	sub.w	r3, r4, #11
   d7b54:	2b02      	cmp	r3, #2
   d7b56:	d801      	bhi.n	d7b5c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7b58:	2000      	movs	r0, #0
   d7b5a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b5c:	f000 f8ac 	bl	d7cb8 <_Z19__fetch_global_Wirev>
   d7b60:	f7ff fb75 	bl	d724e <_ZN7TwoWire9isEnabledEv>
   d7b64:	b108      	cbz	r0, d7b6a <pinAvailable+0x46>
   d7b66:	2c01      	cmp	r4, #1
   d7b68:	d9f6      	bls.n	d7b58 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b6a:	f7ff fac7 	bl	d70fc <_Z22__fetch_global_Serial1v>
   d7b6e:	f7ff fac1 	bl	d70f4 <_ZN11USARTSerial9isEnabledEv>
   d7b72:	b118      	cbz	r0, d7b7c <pinAvailable+0x58>
   d7b74:	f1a4 0309 	sub.w	r3, r4, #9
   d7b78:	2b01      	cmp	r3, #1
   d7b7a:	d9ed      	bls.n	d7b58 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b7c:	2c23      	cmp	r4, #35	; 0x23
   d7b7e:	bf8c      	ite	hi
   d7b80:	2000      	movhi	r0, #0
   d7b82:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b84:	bd70      	pop	{r4, r5, r6, pc}
   d7b86:	bf00      	nop
   d7b88:	2003e3d0 	.word	0x2003e3d0
   d7b8c:	2003e3d4 	.word	0x2003e3d4

000d7b90 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b90:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b92:	b538      	push	{r3, r4, r5, lr}
   d7b94:	4604      	mov	r4, r0
   d7b96:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b98:	d80a      	bhi.n	d7bb0 <pinMode+0x20>
   d7b9a:	29ff      	cmp	r1, #255	; 0xff
   d7b9c:	d008      	beq.n	d7bb0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7b9e:	f7ff ffc1 	bl	d7b24 <pinAvailable>
   d7ba2:	b128      	cbz	r0, d7bb0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7ba4:	4629      	mov	r1, r5
   d7ba6:	4620      	mov	r0, r4
}
   d7ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bac:	f7fe bb50 	b.w	d6250 <HAL_Pin_Mode>
   d7bb0:	bd38      	pop	{r3, r4, r5, pc}

000d7bb2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bb2:	b538      	push	{r3, r4, r5, lr}
   d7bb4:	4604      	mov	r4, r0
   d7bb6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bb8:	f7fe fb52 	bl	d6260 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bbc:	28ff      	cmp	r0, #255	; 0xff
   d7bbe:	d010      	beq.n	d7be2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7bc0:	2806      	cmp	r0, #6
   d7bc2:	d804      	bhi.n	d7bce <digitalWrite+0x1c>
   d7bc4:	234d      	movs	r3, #77	; 0x4d
   d7bc6:	fa23 f000 	lsr.w	r0, r3, r0
   d7bca:	07c3      	lsls	r3, r0, #31
   d7bcc:	d409      	bmi.n	d7be2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7bce:	4620      	mov	r0, r4
   d7bd0:	f7ff ffa8 	bl	d7b24 <pinAvailable>
   d7bd4:	b128      	cbz	r0, d7be2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bd6:	4629      	mov	r1, r5
   d7bd8:	4620      	mov	r0, r4
}
   d7bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bde:	f7fe bb47 	b.w	d6270 <HAL_GPIO_Write>
   d7be2:	bd38      	pop	{r3, r4, r5, pc}

000d7be4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7be4:	b510      	push	{r4, lr}
   d7be6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7be8:	f7fe fb3a 	bl	d6260 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7bec:	3804      	subs	r0, #4
   d7bee:	b2c0      	uxtb	r0, r0
   d7bf0:	2801      	cmp	r0, #1
   d7bf2:	d908      	bls.n	d7c06 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	f7ff ff95 	bl	d7b24 <pinAvailable>
   d7bfa:	b120      	cbz	r0, d7c06 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bfc:	4620      	mov	r0, r4
}
   d7bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c02:	f7fe bb3d 	b.w	d6280 <HAL_GPIO_Read>
}
   d7c06:	2000      	movs	r0, #0
   d7c08:	bd10      	pop	{r4, pc}

000d7c0a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7c0a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7c0c:	b510      	push	{r4, lr}
   d7c0e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7c10:	bf9c      	itt	ls
   d7c12:	340e      	addls	r4, #14
   d7c14:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c16:	4620      	mov	r0, r4
   d7c18:	f7ff ff84 	bl	d7b24 <pinAvailable>
   d7c1c:	b150      	cbz	r0, d7c34 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7c1e:	2103      	movs	r1, #3
   d7c20:	4620      	mov	r0, r4
   d7c22:	f7fe fb0d 	bl	d6240 <HAL_Validate_Pin_Function>
   d7c26:	2803      	cmp	r0, #3
   d7c28:	d104      	bne.n	d7c34 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c2a:	4620      	mov	r0, r4
}
   d7c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c30:	f7fe bb2e 	b.w	d6290 <HAL_ADC_Read>
}
   d7c34:	2000      	movs	r0, #0
   d7c36:	bd10      	pop	{r4, pc}

000d7c38 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d7c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c3c:	4690      	mov	r8, r2
   d7c3e:	461e      	mov	r6, r3
   d7c40:	2407      	movs	r4, #7
   d7c42:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d7c44:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d7c46:	f1b8 0f00 	cmp.w	r8, #0
   d7c4a:	d104      	bne.n	d7c56 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d7c4c:	f1c4 0107 	rsb	r1, r4, #7
   d7c50:	fa46 f101 	asr.w	r1, r6, r1
   d7c54:	e001      	b.n	d7c5a <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7c56:	fa46 f104 	asr.w	r1, r6, r4
   d7c5a:	f001 0101 	and.w	r1, r1, #1
   d7c5e:	4638      	mov	r0, r7
   d7c60:	f7ff ffa7 	bl	d7bb2 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d7c64:	2101      	movs	r1, #1
   d7c66:	4628      	mov	r0, r5
   d7c68:	f7ff ffa3 	bl	d7bb2 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d7c6c:	2100      	movs	r1, #0
   d7c6e:	4628      	mov	r0, r5
   d7c70:	f7ff ff9f 	bl	d7bb2 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d7c74:	f114 34ff 	adds.w	r4, r4, #4294967295
   d7c78:	d2e5      	bcs.n	d7c46 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d7c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7c7e <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d7c7e:	f7fe bb0f 	b.w	d62a0 <HAL_Pulse_In>
	...

000d7c84 <_Z17acquireWireBufferv>:
   d7c84:	b570      	push	{r4, r5, r6, lr}
   d7c86:	4604      	mov	r4, r0
   d7c88:	2514      	movs	r5, #20
   d7c8a:	462a      	mov	r2, r5
   d7c8c:	4e09      	ldr	r6, [pc, #36]	; (d7cb4 <_Z17acquireWireBufferv+0x30>)
   d7c8e:	2100      	movs	r1, #0
   d7c90:	f002 f82a 	bl	d9ce8 <memset>
   d7c94:	8025      	strh	r5, [r4, #0]
   d7c96:	2520      	movs	r5, #32
   d7c98:	4631      	mov	r1, r6
   d7c9a:	60a5      	str	r5, [r4, #8]
   d7c9c:	6125      	str	r5, [r4, #16]
   d7c9e:	4628      	mov	r0, r5
   d7ca0:	f000 f840 	bl	d7d24 <_ZnajRKSt9nothrow_t>
   d7ca4:	4631      	mov	r1, r6
   d7ca6:	6060      	str	r0, [r4, #4]
   d7ca8:	4628      	mov	r0, r5
   d7caa:	f000 f83b 	bl	d7d24 <_ZnajRKSt9nothrow_t>
   d7cae:	60e0      	str	r0, [r4, #12]
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	bd70      	pop	{r4, r5, r6, pc}
   d7cb4:	000dc584 	.word	0x000dc584

000d7cb8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cba:	4d0e      	ldr	r5, [pc, #56]	; (d7cf4 <_Z19__fetch_global_Wirev+0x3c>)
   d7cbc:	6829      	ldr	r1, [r5, #0]
   d7cbe:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cc2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cc4:	d113      	bne.n	d7cee <_Z19__fetch_global_Wirev+0x36>
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	f7fc f9f8 	bl	d40bc <__cxa_guard_acquire>
   d7ccc:	b178      	cbz	r0, d7cee <_Z19__fetch_global_Wirev+0x36>
   d7cce:	a801      	add	r0, sp, #4
   d7cd0:	f7ff ffd8 	bl	d7c84 <_Z17acquireWireBufferv>
   d7cd4:	aa01      	add	r2, sp, #4
   d7cd6:	4621      	mov	r1, r4
   d7cd8:	4807      	ldr	r0, [pc, #28]	; (d7cf8 <_Z19__fetch_global_Wirev+0x40>)
   d7cda:	f7ff fa61 	bl	d71a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7cde:	4628      	mov	r0, r5
   d7ce0:	f7fc f9f1 	bl	d40c6 <__cxa_guard_release>
   d7ce4:	4a05      	ldr	r2, [pc, #20]	; (d7cfc <_Z19__fetch_global_Wirev+0x44>)
   d7ce6:	4906      	ldr	r1, [pc, #24]	; (d7d00 <_Z19__fetch_global_Wirev+0x48>)
   d7ce8:	4803      	ldr	r0, [pc, #12]	; (d7cf8 <_Z19__fetch_global_Wirev+0x40>)
   d7cea:	f000 f80b 	bl	d7d04 <__aeabi_atexit>
	return wire;
}
   d7cee:	4802      	ldr	r0, [pc, #8]	; (d7cf8 <_Z19__fetch_global_Wirev+0x40>)
   d7cf0:	b007      	add	sp, #28
   d7cf2:	bd30      	pop	{r4, r5, pc}
   d7cf4:	2003e734 	.word	0x2003e734
   d7cf8:	2003e738 	.word	0x2003e738
   d7cfc:	2003e1b8 	.word	0x2003e1b8
   d7d00:	000d7149 	.word	0x000d7149

000d7d04 <__aeabi_atexit>:
   d7d04:	460b      	mov	r3, r1
   d7d06:	4601      	mov	r1, r0
   d7d08:	4618      	mov	r0, r3
   d7d0a:	f001 bfa1 	b.w	d9c50 <__cxa_atexit>
	...

000d7d10 <_ZSt15get_new_handlerv>:
   d7d10:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <_ZSt15get_new_handlerv+0xc>)
   d7d12:	6818      	ldr	r0, [r3, #0]
   d7d14:	f3bf 8f5f 	dmb	sy
   d7d18:	4770      	bx	lr
   d7d1a:	bf00      	nop
   d7d1c:	2003e74c 	.word	0x2003e74c

000d7d20 <_ZdlPvj>:
   d7d20:	f7fc b9bd 	b.w	d409e <_ZdlPv>

000d7d24 <_ZnajRKSt9nothrow_t>:
   d7d24:	f000 b800 	b.w	d7d28 <_ZnwjRKSt9nothrow_t>

000d7d28 <_ZnwjRKSt9nothrow_t>:
   d7d28:	b510      	push	{r4, lr}
   d7d2a:	2800      	cmp	r0, #0
   d7d2c:	bf14      	ite	ne
   d7d2e:	4604      	movne	r4, r0
   d7d30:	2401      	moveq	r4, #1
   d7d32:	4620      	mov	r0, r4
   d7d34:	f7fe fd00 	bl	d6738 <malloc>
   d7d38:	b920      	cbnz	r0, d7d44 <_ZnwjRKSt9nothrow_t+0x1c>
   d7d3a:	f7ff ffe9 	bl	d7d10 <_ZSt15get_new_handlerv>
   d7d3e:	b108      	cbz	r0, d7d44 <_ZnwjRKSt9nothrow_t+0x1c>
   d7d40:	4780      	blx	r0
   d7d42:	e7f6      	b.n	d7d32 <_ZnwjRKSt9nothrow_t+0xa>
   d7d44:	bd10      	pop	{r4, pc}
	...

000d7d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7d48:	4b18      	ldr	r3, [pc, #96]	; (d7dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7d4a:	681a      	ldr	r2, [r3, #0]
   d7d4c:	07d1      	lsls	r1, r2, #31
   d7d4e:	bf5c      	itt	pl
   d7d50:	2201      	movpl	r2, #1
   d7d52:	601a      	strpl	r2, [r3, #0]
   d7d54:	4b16      	ldr	r3, [pc, #88]	; (d7db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7d56:	681a      	ldr	r2, [r3, #0]
   d7d58:	07d2      	lsls	r2, r2, #31
   d7d5a:	bf5c      	itt	pl
   d7d5c:	2201      	movpl	r2, #1
   d7d5e:	601a      	strpl	r2, [r3, #0]
   d7d60:	4b14      	ldr	r3, [pc, #80]	; (d7db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7d62:	681a      	ldr	r2, [r3, #0]
   d7d64:	07d0      	lsls	r0, r2, #31
   d7d66:	bf5c      	itt	pl
   d7d68:	2201      	movpl	r2, #1
   d7d6a:	601a      	strpl	r2, [r3, #0]
   d7d6c:	4b12      	ldr	r3, [pc, #72]	; (d7db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7d6e:	681a      	ldr	r2, [r3, #0]
   d7d70:	07d1      	lsls	r1, r2, #31
   d7d72:	bf5c      	itt	pl
   d7d74:	2201      	movpl	r2, #1
   d7d76:	601a      	strpl	r2, [r3, #0]
   d7d78:	4b10      	ldr	r3, [pc, #64]	; (d7dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7d7a:	681a      	ldr	r2, [r3, #0]
   d7d7c:	07d2      	lsls	r2, r2, #31
   d7d7e:	bf5c      	itt	pl
   d7d80:	2201      	movpl	r2, #1
   d7d82:	601a      	strpl	r2, [r3, #0]
   d7d84:	4b0e      	ldr	r3, [pc, #56]	; (d7dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7d86:	681a      	ldr	r2, [r3, #0]
   d7d88:	07d0      	lsls	r0, r2, #31
   d7d8a:	bf5c      	itt	pl
   d7d8c:	2201      	movpl	r2, #1
   d7d8e:	601a      	strpl	r2, [r3, #0]
   d7d90:	4b0c      	ldr	r3, [pc, #48]	; (d7dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7d92:	681a      	ldr	r2, [r3, #0]
   d7d94:	07d1      	lsls	r1, r2, #31
   d7d96:	bf5c      	itt	pl
   d7d98:	2201      	movpl	r2, #1
   d7d9a:	601a      	strpl	r2, [r3, #0]
   d7d9c:	4b0a      	ldr	r3, [pc, #40]	; (d7dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7d9e:	681a      	ldr	r2, [r3, #0]
   d7da0:	07d2      	lsls	r2, r2, #31
   d7da2:	bf5c      	itt	pl
   d7da4:	2201      	movpl	r2, #1
   d7da6:	601a      	strpl	r2, [r3, #0]
   d7da8:	4770      	bx	lr
   d7daa:	bf00      	nop
   d7dac:	2003e76c 	.word	0x2003e76c
   d7db0:	2003e768 	.word	0x2003e768
   d7db4:	2003e764 	.word	0x2003e764
   d7db8:	2003e760 	.word	0x2003e760
   d7dbc:	2003e75c 	.word	0x2003e75c
   d7dc0:	2003e758 	.word	0x2003e758
   d7dc4:	2003e754 	.word	0x2003e754
   d7dc8:	2003e750 	.word	0x2003e750

000d7dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7dcc:	4b24      	ldr	r3, [pc, #144]	; (d7e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7dce:	681a      	ldr	r2, [r3, #0]
   d7dd0:	07d0      	lsls	r0, r2, #31
   d7dd2:	bf5c      	itt	pl
   d7dd4:	2201      	movpl	r2, #1
   d7dd6:	601a      	strpl	r2, [r3, #0]
   d7dd8:	4b22      	ldr	r3, [pc, #136]	; (d7e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7dda:	681a      	ldr	r2, [r3, #0]
   d7ddc:	07d1      	lsls	r1, r2, #31
   d7dde:	bf5c      	itt	pl
   d7de0:	2201      	movpl	r2, #1
   d7de2:	601a      	strpl	r2, [r3, #0]
   d7de4:	4b20      	ldr	r3, [pc, #128]	; (d7e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7de6:	681a      	ldr	r2, [r3, #0]
   d7de8:	07d2      	lsls	r2, r2, #31
   d7dea:	bf5c      	itt	pl
   d7dec:	2201      	movpl	r2, #1
   d7dee:	601a      	strpl	r2, [r3, #0]
   d7df0:	4b1e      	ldr	r3, [pc, #120]	; (d7e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7df2:	681a      	ldr	r2, [r3, #0]
   d7df4:	07d0      	lsls	r0, r2, #31
   d7df6:	bf5c      	itt	pl
   d7df8:	2201      	movpl	r2, #1
   d7dfa:	601a      	strpl	r2, [r3, #0]
   d7dfc:	4b1c      	ldr	r3, [pc, #112]	; (d7e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7dfe:	681a      	ldr	r2, [r3, #0]
   d7e00:	07d1      	lsls	r1, r2, #31
   d7e02:	bf5c      	itt	pl
   d7e04:	2201      	movpl	r2, #1
   d7e06:	601a      	strpl	r2, [r3, #0]
   d7e08:	4b1a      	ldr	r3, [pc, #104]	; (d7e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7e0a:	681a      	ldr	r2, [r3, #0]
   d7e0c:	07d2      	lsls	r2, r2, #31
   d7e0e:	bf5c      	itt	pl
   d7e10:	2201      	movpl	r2, #1
   d7e12:	601a      	strpl	r2, [r3, #0]
   d7e14:	4b18      	ldr	r3, [pc, #96]	; (d7e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7e16:	681a      	ldr	r2, [r3, #0]
   d7e18:	07d0      	lsls	r0, r2, #31
   d7e1a:	bf5c      	itt	pl
   d7e1c:	2201      	movpl	r2, #1
   d7e1e:	601a      	strpl	r2, [r3, #0]
   d7e20:	4b16      	ldr	r3, [pc, #88]	; (d7e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7e22:	681a      	ldr	r2, [r3, #0]
   d7e24:	07d1      	lsls	r1, r2, #31
   d7e26:	bf5c      	itt	pl
   d7e28:	2201      	movpl	r2, #1
   d7e2a:	601a      	strpl	r2, [r3, #0]
   d7e2c:	4b14      	ldr	r3, [pc, #80]	; (d7e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7e2e:	681a      	ldr	r2, [r3, #0]
   d7e30:	07d2      	lsls	r2, r2, #31
   d7e32:	bf5c      	itt	pl
   d7e34:	2201      	movpl	r2, #1
   d7e36:	601a      	strpl	r2, [r3, #0]
   d7e38:	4b12      	ldr	r3, [pc, #72]	; (d7e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7e3a:	681a      	ldr	r2, [r3, #0]
   d7e3c:	07d0      	lsls	r0, r2, #31
   d7e3e:	bf5c      	itt	pl
   d7e40:	2201      	movpl	r2, #1
   d7e42:	601a      	strpl	r2, [r3, #0]
   d7e44:	4b10      	ldr	r3, [pc, #64]	; (d7e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7e46:	681a      	ldr	r2, [r3, #0]
   d7e48:	07d1      	lsls	r1, r2, #31
   d7e4a:	bf5c      	itt	pl
   d7e4c:	2201      	movpl	r2, #1
   d7e4e:	601a      	strpl	r2, [r3, #0]
   d7e50:	4b0e      	ldr	r3, [pc, #56]	; (d7e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7e52:	681a      	ldr	r2, [r3, #0]
   d7e54:	07d2      	lsls	r2, r2, #31
   d7e56:	bf5c      	itt	pl
   d7e58:	2201      	movpl	r2, #1
   d7e5a:	601a      	strpl	r2, [r3, #0]
   d7e5c:	4770      	bx	lr
   d7e5e:	bf00      	nop
   d7e60:	2003e79c 	.word	0x2003e79c
   d7e64:	2003e798 	.word	0x2003e798
   d7e68:	2003e794 	.word	0x2003e794
   d7e6c:	2003e790 	.word	0x2003e790
   d7e70:	2003e78c 	.word	0x2003e78c
   d7e74:	2003e788 	.word	0x2003e788
   d7e78:	2003e784 	.word	0x2003e784
   d7e7c:	2003e780 	.word	0x2003e780
   d7e80:	2003e77c 	.word	0x2003e77c
   d7e84:	2003e778 	.word	0x2003e778
   d7e88:	2003e774 	.word	0x2003e774
   d7e8c:	2003e770 	.word	0x2003e770

000d7e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7e90:	4b24      	ldr	r3, [pc, #144]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7e92:	681a      	ldr	r2, [r3, #0]
   d7e94:	07d0      	lsls	r0, r2, #31
   d7e96:	bf5c      	itt	pl
   d7e98:	2201      	movpl	r2, #1
   d7e9a:	601a      	strpl	r2, [r3, #0]
   d7e9c:	4b22      	ldr	r3, [pc, #136]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7e9e:	681a      	ldr	r2, [r3, #0]
   d7ea0:	07d1      	lsls	r1, r2, #31
   d7ea2:	bf5c      	itt	pl
   d7ea4:	2201      	movpl	r2, #1
   d7ea6:	601a      	strpl	r2, [r3, #0]
   d7ea8:	4b20      	ldr	r3, [pc, #128]	; (d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7eaa:	681a      	ldr	r2, [r3, #0]
   d7eac:	07d2      	lsls	r2, r2, #31
   d7eae:	bf5c      	itt	pl
   d7eb0:	2201      	movpl	r2, #1
   d7eb2:	601a      	strpl	r2, [r3, #0]
   d7eb4:	4b1e      	ldr	r3, [pc, #120]	; (d7f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7eb6:	681a      	ldr	r2, [r3, #0]
   d7eb8:	07d0      	lsls	r0, r2, #31
   d7eba:	bf5c      	itt	pl
   d7ebc:	2201      	movpl	r2, #1
   d7ebe:	601a      	strpl	r2, [r3, #0]
   d7ec0:	4b1c      	ldr	r3, [pc, #112]	; (d7f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7ec2:	681a      	ldr	r2, [r3, #0]
   d7ec4:	07d1      	lsls	r1, r2, #31
   d7ec6:	bf5c      	itt	pl
   d7ec8:	2201      	movpl	r2, #1
   d7eca:	601a      	strpl	r2, [r3, #0]
   d7ecc:	4b1a      	ldr	r3, [pc, #104]	; (d7f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7ece:	681a      	ldr	r2, [r3, #0]
   d7ed0:	07d2      	lsls	r2, r2, #31
   d7ed2:	bf5c      	itt	pl
   d7ed4:	2201      	movpl	r2, #1
   d7ed6:	601a      	strpl	r2, [r3, #0]
   d7ed8:	4b18      	ldr	r3, [pc, #96]	; (d7f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7eda:	681a      	ldr	r2, [r3, #0]
   d7edc:	07d0      	lsls	r0, r2, #31
   d7ede:	bf5c      	itt	pl
   d7ee0:	2201      	movpl	r2, #1
   d7ee2:	601a      	strpl	r2, [r3, #0]
   d7ee4:	4b16      	ldr	r3, [pc, #88]	; (d7f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7ee6:	681a      	ldr	r2, [r3, #0]
   d7ee8:	07d1      	lsls	r1, r2, #31
   d7eea:	bf5c      	itt	pl
   d7eec:	2201      	movpl	r2, #1
   d7eee:	601a      	strpl	r2, [r3, #0]
   d7ef0:	4b14      	ldr	r3, [pc, #80]	; (d7f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7ef2:	681a      	ldr	r2, [r3, #0]
   d7ef4:	07d2      	lsls	r2, r2, #31
   d7ef6:	bf5c      	itt	pl
   d7ef8:	2201      	movpl	r2, #1
   d7efa:	601a      	strpl	r2, [r3, #0]
   d7efc:	4b12      	ldr	r3, [pc, #72]	; (d7f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7efe:	681a      	ldr	r2, [r3, #0]
   d7f00:	07d0      	lsls	r0, r2, #31
   d7f02:	bf5c      	itt	pl
   d7f04:	2201      	movpl	r2, #1
   d7f06:	601a      	strpl	r2, [r3, #0]
   d7f08:	4b10      	ldr	r3, [pc, #64]	; (d7f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7f0a:	681a      	ldr	r2, [r3, #0]
   d7f0c:	07d1      	lsls	r1, r2, #31
   d7f0e:	bf5c      	itt	pl
   d7f10:	2201      	movpl	r2, #1
   d7f12:	601a      	strpl	r2, [r3, #0]
   d7f14:	4b0e      	ldr	r3, [pc, #56]	; (d7f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7f16:	681a      	ldr	r2, [r3, #0]
   d7f18:	07d2      	lsls	r2, r2, #31
   d7f1a:	bf5c      	itt	pl
   d7f1c:	2201      	movpl	r2, #1
   d7f1e:	601a      	strpl	r2, [r3, #0]
   d7f20:	4770      	bx	lr
   d7f22:	bf00      	nop
   d7f24:	2003e7cc 	.word	0x2003e7cc
   d7f28:	2003e7c8 	.word	0x2003e7c8
   d7f2c:	2003e7c4 	.word	0x2003e7c4
   d7f30:	2003e7c0 	.word	0x2003e7c0
   d7f34:	2003e7bc 	.word	0x2003e7bc
   d7f38:	2003e7b8 	.word	0x2003e7b8
   d7f3c:	2003e7b4 	.word	0x2003e7b4
   d7f40:	2003e7b0 	.word	0x2003e7b0
   d7f44:	2003e7ac 	.word	0x2003e7ac
   d7f48:	2003e7a8 	.word	0x2003e7a8
   d7f4c:	2003e7a4 	.word	0x2003e7a4
   d7f50:	2003e7a0 	.word	0x2003e7a0

000d7f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f54:	4b18      	ldr	r3, [pc, #96]	; (d7fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f56:	681a      	ldr	r2, [r3, #0]
   d7f58:	07d1      	lsls	r1, r2, #31
   d7f5a:	bf5c      	itt	pl
   d7f5c:	2201      	movpl	r2, #1
   d7f5e:	601a      	strpl	r2, [r3, #0]
   d7f60:	4b16      	ldr	r3, [pc, #88]	; (d7fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f62:	681a      	ldr	r2, [r3, #0]
   d7f64:	07d2      	lsls	r2, r2, #31
   d7f66:	bf5c      	itt	pl
   d7f68:	2201      	movpl	r2, #1
   d7f6a:	601a      	strpl	r2, [r3, #0]
   d7f6c:	4b14      	ldr	r3, [pc, #80]	; (d7fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f6e:	681a      	ldr	r2, [r3, #0]
   d7f70:	07d0      	lsls	r0, r2, #31
   d7f72:	bf5c      	itt	pl
   d7f74:	2201      	movpl	r2, #1
   d7f76:	601a      	strpl	r2, [r3, #0]
   d7f78:	4b12      	ldr	r3, [pc, #72]	; (d7fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f7a:	681a      	ldr	r2, [r3, #0]
   d7f7c:	07d1      	lsls	r1, r2, #31
   d7f7e:	bf5c      	itt	pl
   d7f80:	2201      	movpl	r2, #1
   d7f82:	601a      	strpl	r2, [r3, #0]
   d7f84:	4b10      	ldr	r3, [pc, #64]	; (d7fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f86:	681a      	ldr	r2, [r3, #0]
   d7f88:	07d2      	lsls	r2, r2, #31
   d7f8a:	bf5c      	itt	pl
   d7f8c:	2201      	movpl	r2, #1
   d7f8e:	601a      	strpl	r2, [r3, #0]
   d7f90:	4b0e      	ldr	r3, [pc, #56]	; (d7fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f92:	681a      	ldr	r2, [r3, #0]
   d7f94:	07d0      	lsls	r0, r2, #31
   d7f96:	bf5c      	itt	pl
   d7f98:	2201      	movpl	r2, #1
   d7f9a:	601a      	strpl	r2, [r3, #0]
   d7f9c:	4b0c      	ldr	r3, [pc, #48]	; (d7fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f9e:	681a      	ldr	r2, [r3, #0]
   d7fa0:	07d1      	lsls	r1, r2, #31
   d7fa2:	bf5c      	itt	pl
   d7fa4:	2201      	movpl	r2, #1
   d7fa6:	601a      	strpl	r2, [r3, #0]
   d7fa8:	4b0a      	ldr	r3, [pc, #40]	; (d7fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7faa:	681a      	ldr	r2, [r3, #0]
   d7fac:	07d2      	lsls	r2, r2, #31
   d7fae:	bf5c      	itt	pl
   d7fb0:	2201      	movpl	r2, #1
   d7fb2:	601a      	strpl	r2, [r3, #0]
   d7fb4:	4770      	bx	lr
   d7fb6:	bf00      	nop
   d7fb8:	2003e7ec 	.word	0x2003e7ec
   d7fbc:	2003e7e8 	.word	0x2003e7e8
   d7fc0:	2003e7e4 	.word	0x2003e7e4
   d7fc4:	2003e7e0 	.word	0x2003e7e0
   d7fc8:	2003e7dc 	.word	0x2003e7dc
   d7fcc:	2003e7d8 	.word	0x2003e7d8
   d7fd0:	2003e7d4 	.word	0x2003e7d4
   d7fd4:	2003e7d0 	.word	0x2003e7d0

000d7fd8 <pow>:
   d7fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fdc:	ed2d 8b02 	vpush	{d8}
   d7fe0:	f8df a324 	ldr.w	sl, [pc, #804]	; d8308 <pow+0x330>
   d7fe4:	b08b      	sub	sp, #44	; 0x2c
   d7fe6:	ec57 6b10 	vmov	r6, r7, d0
   d7fea:	ec55 4b11 	vmov	r4, r5, d1
   d7fee:	f000 f98f 	bl	d8310 <__ieee754_pow>
   d7ff2:	f99a 8000 	ldrsb.w	r8, [sl]
   d7ff6:	eeb0 8a40 	vmov.f32	s16, s0
   d7ffa:	eef0 8a60 	vmov.f32	s17, s1
   d7ffe:	f1b8 3fff 	cmp.w	r8, #4294967295
   d8002:	d048      	beq.n	d8096 <pow+0xbe>
   d8004:	4622      	mov	r2, r4
   d8006:	462b      	mov	r3, r5
   d8008:	4620      	mov	r0, r4
   d800a:	4629      	mov	r1, r5
   d800c:	f001 fd6e 	bl	d9aec <__aeabi_dcmpun>
   d8010:	4683      	mov	fp, r0
   d8012:	2800      	cmp	r0, #0
   d8014:	d13f      	bne.n	d8096 <pow+0xbe>
   d8016:	4632      	mov	r2, r6
   d8018:	463b      	mov	r3, r7
   d801a:	4630      	mov	r0, r6
   d801c:	4639      	mov	r1, r7
   d801e:	f001 fd65 	bl	d9aec <__aeabi_dcmpun>
   d8022:	4681      	mov	r9, r0
   d8024:	2800      	cmp	r0, #0
   d8026:	f040 8090 	bne.w	d814a <pow+0x172>
   d802a:	4630      	mov	r0, r6
   d802c:	4639      	mov	r1, r7
   d802e:	2200      	movs	r2, #0
   d8030:	2300      	movs	r3, #0
   d8032:	f001 fd29 	bl	d9a88 <__aeabi_dcmpeq>
   d8036:	2800      	cmp	r0, #0
   d8038:	d036      	beq.n	d80a8 <pow+0xd0>
   d803a:	2200      	movs	r2, #0
   d803c:	2300      	movs	r3, #0
   d803e:	4620      	mov	r0, r4
   d8040:	4629      	mov	r1, r5
   d8042:	f001 fd21 	bl	d9a88 <__aeabi_dcmpeq>
   d8046:	4683      	mov	fp, r0
   d8048:	b1b8      	cbz	r0, d807a <pow+0xa2>
   d804a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d82e0 <pow+0x308>
   d804e:	2201      	movs	r2, #1
   d8050:	4ba9      	ldr	r3, [pc, #676]	; (d82f8 <pow+0x320>)
   d8052:	f8cd 9020 	str.w	r9, [sp, #32]
   d8056:	9200      	str	r2, [sp, #0]
   d8058:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d805c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8060:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	f1b8 0f00 	cmp.w	r8, #0
   d806a:	d05b      	beq.n	d8124 <pow+0x14c>
   d806c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d82e8 <pow+0x310>
   d8070:	b00b      	add	sp, #44	; 0x2c
   d8072:	ecbd 8b02 	vpop	{d8}
   d8076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d807a:	ec45 4b10 	vmov	d0, r4, r5
   d807e:	f000 ffa7 	bl	d8fd0 <finite>
   d8082:	b140      	cbz	r0, d8096 <pow+0xbe>
   d8084:	2200      	movs	r2, #0
   d8086:	2300      	movs	r3, #0
   d8088:	4620      	mov	r0, r4
   d808a:	4629      	mov	r1, r5
   d808c:	f001 fd06 	bl	d9a9c <__aeabi_dcmplt>
   d8090:	2800      	cmp	r0, #0
   d8092:	f040 80c5 	bne.w	d8220 <pow+0x248>
   d8096:	eeb0 0a48 	vmov.f32	s0, s16
   d809a:	eef0 0a68 	vmov.f32	s1, s17
   d809e:	b00b      	add	sp, #44	; 0x2c
   d80a0:	ecbd 8b02 	vpop	{d8}
   d80a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80a8:	eeb0 0a48 	vmov.f32	s0, s16
   d80ac:	eef0 0a68 	vmov.f32	s1, s17
   d80b0:	f000 ff8e 	bl	d8fd0 <finite>
   d80b4:	4680      	mov	r8, r0
   d80b6:	2800      	cmp	r0, #0
   d80b8:	d061      	beq.n	d817e <pow+0x1a6>
   d80ba:	f04f 0800 	mov.w	r8, #0
   d80be:	f04f 0900 	mov.w	r9, #0
   d80c2:	ec51 0b18 	vmov	r0, r1, d8
   d80c6:	4642      	mov	r2, r8
   d80c8:	464b      	mov	r3, r9
   d80ca:	f001 fcdd 	bl	d9a88 <__aeabi_dcmpeq>
   d80ce:	2800      	cmp	r0, #0
   d80d0:	d0e1      	beq.n	d8096 <pow+0xbe>
   d80d2:	ec47 6b10 	vmov	d0, r6, r7
   d80d6:	f000 ff7b 	bl	d8fd0 <finite>
   d80da:	2800      	cmp	r0, #0
   d80dc:	d0db      	beq.n	d8096 <pow+0xbe>
   d80de:	ec45 4b10 	vmov	d0, r4, r5
   d80e2:	f000 ff75 	bl	d8fd0 <finite>
   d80e6:	2800      	cmp	r0, #0
   d80e8:	d0d5      	beq.n	d8096 <pow+0xbe>
   d80ea:	f99a 3000 	ldrsb.w	r3, [sl]
   d80ee:	4a82      	ldr	r2, [pc, #520]	; (d82f8 <pow+0x320>)
   d80f0:	9201      	str	r2, [sp, #4]
   d80f2:	2104      	movs	r1, #4
   d80f4:	2200      	movs	r2, #0
   d80f6:	2b02      	cmp	r3, #2
   d80f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d80fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8100:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8104:	9100      	str	r1, [sp, #0]
   d8106:	9208      	str	r2, [sp, #32]
   d8108:	d003      	beq.n	d8112 <pow+0x13a>
   d810a:	4668      	mov	r0, sp
   d810c:	f000 ff68 	bl	d8fe0 <matherr>
   d8110:	b970      	cbnz	r0, d8130 <pow+0x158>
   d8112:	f7fe fb39 	bl	d6788 <__errno>
   d8116:	2322      	movs	r3, #34	; 0x22
   d8118:	6003      	str	r3, [r0, #0]
   d811a:	e009      	b.n	d8130 <pow+0x158>
   d811c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d82e0 <pow+0x308>
   d8120:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8124:	4668      	mov	r0, sp
   d8126:	f000 ff5b 	bl	d8fe0 <matherr>
   d812a:	2800      	cmp	r0, #0
   d812c:	f000 808e 	beq.w	d824c <pow+0x274>
   d8130:	9b08      	ldr	r3, [sp, #32]
   d8132:	b11b      	cbz	r3, d813c <pow+0x164>
   d8134:	f7fe fb28 	bl	d6788 <__errno>
   d8138:	9b08      	ldr	r3, [sp, #32]
   d813a:	6003      	str	r3, [r0, #0]
   d813c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8140:	b00b      	add	sp, #44	; 0x2c
   d8142:	ecbd 8b02 	vpop	{d8}
   d8146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d814a:	2200      	movs	r2, #0
   d814c:	2300      	movs	r3, #0
   d814e:	4620      	mov	r0, r4
   d8150:	4629      	mov	r1, r5
   d8152:	f001 fc99 	bl	d9a88 <__aeabi_dcmpeq>
   d8156:	2800      	cmp	r0, #0
   d8158:	d09d      	beq.n	d8096 <pow+0xbe>
   d815a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d82e8 <pow+0x310>
   d815e:	4b66      	ldr	r3, [pc, #408]	; (d82f8 <pow+0x320>)
   d8160:	f8cd b020 	str.w	fp, [sp, #32]
   d8164:	2201      	movs	r2, #1
   d8166:	f1b8 0f02 	cmp.w	r8, #2
   d816a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d816e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8172:	ed8d 0b06 	vstr	d0, [sp, #24]
   d8176:	e88d 000c 	stmia.w	sp, {r2, r3}
   d817a:	d1d3      	bne.n	d8124 <pow+0x14c>
   d817c:	e78f      	b.n	d809e <pow+0xc6>
   d817e:	ec47 6b10 	vmov	d0, r6, r7
   d8182:	f000 ff25 	bl	d8fd0 <finite>
   d8186:	2800      	cmp	r0, #0
   d8188:	d097      	beq.n	d80ba <pow+0xe2>
   d818a:	ec45 4b10 	vmov	d0, r4, r5
   d818e:	f000 ff1f 	bl	d8fd0 <finite>
   d8192:	2800      	cmp	r0, #0
   d8194:	d091      	beq.n	d80ba <pow+0xe2>
   d8196:	ec53 2b18 	vmov	r2, r3, d8
   d819a:	ee18 0a10 	vmov	r0, s16
   d819e:	4619      	mov	r1, r3
   d81a0:	f001 fca4 	bl	d9aec <__aeabi_dcmpun>
   d81a4:	2800      	cmp	r0, #0
   d81a6:	d17c      	bne.n	d82a2 <pow+0x2ca>
   d81a8:	2303      	movs	r3, #3
   d81aa:	f99a 8000 	ldrsb.w	r8, [sl]
   d81ae:	9300      	str	r3, [sp, #0]
   d81b0:	4b51      	ldr	r3, [pc, #324]	; (d82f8 <pow+0x320>)
   d81b2:	9008      	str	r0, [sp, #32]
   d81b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d81b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	f1b8 0f00 	cmp.w	r8, #0
   d81c2:	d148      	bne.n	d8256 <pow+0x27e>
   d81c4:	f8df 9144 	ldr.w	r9, [pc, #324]	; d830c <pow+0x334>
   d81c8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d81cc:	2200      	movs	r2, #0
   d81ce:	2300      	movs	r3, #0
   d81d0:	4630      	mov	r0, r6
   d81d2:	4639      	mov	r1, r7
   d81d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d81d8:	f001 fc60 	bl	d9a9c <__aeabi_dcmplt>
   d81dc:	2800      	cmp	r0, #0
   d81de:	d094      	beq.n	d810a <pow+0x132>
   d81e0:	2200      	movs	r2, #0
   d81e2:	4b46      	ldr	r3, [pc, #280]	; (d82fc <pow+0x324>)
   d81e4:	4620      	mov	r0, r4
   d81e6:	4629      	mov	r1, r5
   d81e8:	f001 f9e6 	bl	d95b8 <__aeabi_dmul>
   d81ec:	4604      	mov	r4, r0
   d81ee:	460d      	mov	r5, r1
   d81f0:	ec45 4b10 	vmov	d0, r4, r5
   d81f4:	f000 ff00 	bl	d8ff8 <rint>
   d81f8:	4620      	mov	r0, r4
   d81fa:	ec53 2b10 	vmov	r2, r3, d0
   d81fe:	4629      	mov	r1, r5
   d8200:	f001 fc42 	bl	d9a88 <__aeabi_dcmpeq>
   d8204:	2800      	cmp	r0, #0
   d8206:	d149      	bne.n	d829c <pow+0x2c4>
   d8208:	4b3d      	ldr	r3, [pc, #244]	; (d8300 <pow+0x328>)
   d820a:	f99a 8000 	ldrsb.w	r8, [sl]
   d820e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8212:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d8216:	f1b8 0f02 	cmp.w	r8, #2
   d821a:	f47f af76 	bne.w	d810a <pow+0x132>
   d821e:	e778      	b.n	d8112 <pow+0x13a>
   d8220:	4a35      	ldr	r2, [pc, #212]	; (d82f8 <pow+0x320>)
   d8222:	f99a 3000 	ldrsb.w	r3, [sl]
   d8226:	f8cd b020 	str.w	fp, [sp, #32]
   d822a:	2101      	movs	r1, #1
   d822c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8230:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8234:	e88d 0006 	stmia.w	sp, {r1, r2}
   d8238:	2b00      	cmp	r3, #0
   d823a:	f43f af6f 	beq.w	d811c <pow+0x144>
   d823e:	4931      	ldr	r1, [pc, #196]	; (d8304 <pow+0x32c>)
   d8240:	2000      	movs	r0, #0
   d8242:	2b02      	cmp	r3, #2
   d8244:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8248:	f47f af6c 	bne.w	d8124 <pow+0x14c>
   d824c:	f7fe fa9c 	bl	d6788 <__errno>
   d8250:	2321      	movs	r3, #33	; 0x21
   d8252:	6003      	str	r3, [r0, #0]
   d8254:	e76c      	b.n	d8130 <pow+0x158>
   d8256:	ed9f 7b26 	vldr	d7, [pc, #152]	; d82f0 <pow+0x318>
   d825a:	2200      	movs	r2, #0
   d825c:	2300      	movs	r3, #0
   d825e:	4630      	mov	r0, r6
   d8260:	4639      	mov	r1, r7
   d8262:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8266:	f001 fc19 	bl	d9a9c <__aeabi_dcmplt>
   d826a:	2800      	cmp	r0, #0
   d826c:	d0d3      	beq.n	d8216 <pow+0x23e>
   d826e:	2200      	movs	r2, #0
   d8270:	4b22      	ldr	r3, [pc, #136]	; (d82fc <pow+0x324>)
   d8272:	4620      	mov	r0, r4
   d8274:	4629      	mov	r1, r5
   d8276:	f001 f99f 	bl	d95b8 <__aeabi_dmul>
   d827a:	4604      	mov	r4, r0
   d827c:	460d      	mov	r5, r1
   d827e:	ec45 4b10 	vmov	d0, r4, r5
   d8282:	f000 feb9 	bl	d8ff8 <rint>
   d8286:	4620      	mov	r0, r4
   d8288:	ec53 2b10 	vmov	r2, r3, d0
   d828c:	4629      	mov	r1, r5
   d828e:	f001 fbfb 	bl	d9a88 <__aeabi_dcmpeq>
   d8292:	b918      	cbnz	r0, d829c <pow+0x2c4>
   d8294:	4b1b      	ldr	r3, [pc, #108]	; (d8304 <pow+0x32c>)
   d8296:	2200      	movs	r2, #0
   d8298:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d829c:	f99a 8000 	ldrsb.w	r8, [sl]
   d82a0:	e7b9      	b.n	d8216 <pow+0x23e>
   d82a2:	4b15      	ldr	r3, [pc, #84]	; (d82f8 <pow+0x320>)
   d82a4:	f99a 9000 	ldrsb.w	r9, [sl]
   d82a8:	f8cd 8020 	str.w	r8, [sp, #32]
   d82ac:	2201      	movs	r2, #1
   d82ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d82b2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d82b6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d82ba:	f1b9 0f00 	cmp.w	r9, #0
   d82be:	f43f af2d 	beq.w	d811c <pow+0x144>
   d82c2:	2200      	movs	r2, #0
   d82c4:	2300      	movs	r3, #0
   d82c6:	4610      	mov	r0, r2
   d82c8:	4619      	mov	r1, r3
   d82ca:	f001 fa9f 	bl	d980c <__aeabi_ddiv>
   d82ce:	f1b9 0f02 	cmp.w	r9, #2
   d82d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d82d6:	d0b9      	beq.n	d824c <pow+0x274>
   d82d8:	e724      	b.n	d8124 <pow+0x14c>
   d82da:	bf00      	nop
   d82dc:	f3af 8000 	nop.w
	...
   d82ec:	3ff00000 	.word	0x3ff00000
   d82f0:	00000000 	.word	0x00000000
   d82f4:	7ff00000 	.word	0x7ff00000
   d82f8:	000dc588 	.word	0x000dc588
   d82fc:	3fe00000 	.word	0x3fe00000
   d8300:	c7efffff 	.word	0xc7efffff
   d8304:	fff00000 	.word	0xfff00000
   d8308:	2003e114 	.word	0x2003e114
   d830c:	47efffff 	.word	0x47efffff

000d8310 <__ieee754_pow>:
   d8310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8314:	ec51 0b11 	vmov	r0, r1, d1
   d8318:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d831c:	ea58 0400 	orrs.w	r4, r8, r0
   d8320:	b093      	sub	sp, #76	; 0x4c
   d8322:	d03c      	beq.n	d839e <__ieee754_pow+0x8e>
   d8324:	ec53 2b10 	vmov	r2, r3, d0
   d8328:	4e6d      	ldr	r6, [pc, #436]	; (d84e0 <__ieee754_pow+0x1d0>)
   d832a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d832e:	42b4      	cmp	r4, r6
   d8330:	ee10 aa10 	vmov	sl, s0
   d8334:	461d      	mov	r5, r3
   d8336:	dc2b      	bgt.n	d8390 <__ieee754_pow+0x80>
   d8338:	4689      	mov	r9, r1
   d833a:	ee11 ea10 	vmov	lr, s2
   d833e:	d026      	beq.n	d838e <__ieee754_pow+0x7e>
   d8340:	45b0      	cmp	r8, r6
   d8342:	dc25      	bgt.n	d8390 <__ieee754_pow+0x80>
   d8344:	4e66      	ldr	r6, [pc, #408]	; (d84e0 <__ieee754_pow+0x1d0>)
   d8346:	45b0      	cmp	r8, r6
   d8348:	d077      	beq.n	d843a <__ieee754_pow+0x12a>
   d834a:	2d00      	cmp	r5, #0
   d834c:	4616      	mov	r6, r2
   d834e:	461f      	mov	r7, r3
   d8350:	e9cd 0100 	strd	r0, r1, [sp]
   d8354:	db75      	blt.n	d8442 <__ieee754_pow+0x132>
   d8356:	f04f 0b00 	mov.w	fp, #0
   d835a:	f1be 0f00 	cmp.w	lr, #0
   d835e:	d12d      	bne.n	d83bc <__ieee754_pow+0xac>
   d8360:	4b5f      	ldr	r3, [pc, #380]	; (d84e0 <__ieee754_pow+0x1d0>)
   d8362:	4598      	cmp	r8, r3
   d8364:	f000 8089 	beq.w	d847a <__ieee754_pow+0x16a>
   d8368:	4b5e      	ldr	r3, [pc, #376]	; (d84e4 <__ieee754_pow+0x1d4>)
   d836a:	4598      	cmp	r8, r3
   d836c:	d05e      	beq.n	d842c <__ieee754_pow+0x11c>
   d836e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d8372:	f000 83de 	beq.w	d8b32 <__ieee754_pow+0x822>
   d8376:	4b5c      	ldr	r3, [pc, #368]	; (d84e8 <__ieee754_pow+0x1d8>)
   d8378:	4599      	cmp	r9, r3
   d837a:	d11f      	bne.n	d83bc <__ieee754_pow+0xac>
   d837c:	2d00      	cmp	r5, #0
   d837e:	db1d      	blt.n	d83bc <__ieee754_pow+0xac>
   d8380:	ec47 6b10 	vmov	d0, r6, r7
   d8384:	b013      	add	sp, #76	; 0x4c
   d8386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d838a:	f000 bd49 	b.w	d8e20 <__ieee754_sqrt>
   d838e:	b15a      	cbz	r2, d83a8 <__ieee754_pow+0x98>
   d8390:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8394:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8398:	ea54 030a 	orrs.w	r3, r4, sl
   d839c:	d106      	bne.n	d83ac <__ieee754_pow+0x9c>
   d839e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d84c8 <__ieee754_pow+0x1b8>
   d83a2:	b013      	add	sp, #76	; 0x4c
   d83a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d83a8:	45a0      	cmp	r8, r4
   d83aa:	ddcb      	ble.n	d8344 <__ieee754_pow+0x34>
   d83ac:	484f      	ldr	r0, [pc, #316]	; (d84ec <__ieee754_pow+0x1dc>)
   d83ae:	b013      	add	sp, #76	; 0x4c
   d83b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83b4:	f000 be18 	b.w	d8fe8 <nan>
   d83b8:	f04f 0b00 	mov.w	fp, #0
   d83bc:	ec47 6b10 	vmov	d0, r6, r7
   d83c0:	f000 fdfe 	bl	d8fc0 <fabs>
   d83c4:	ec51 0b10 	vmov	r0, r1, d0
   d83c8:	f1ba 0f00 	cmp.w	sl, #0
   d83cc:	d01e      	beq.n	d840c <__ieee754_pow+0xfc>
   d83ce:	0fed      	lsrs	r5, r5, #31
   d83d0:	f105 3aff 	add.w	sl, r5, #4294967295
   d83d4:	ea5b 030a 	orrs.w	r3, fp, sl
   d83d8:	d063      	beq.n	d84a2 <__ieee754_pow+0x192>
   d83da:	4b45      	ldr	r3, [pc, #276]	; (d84f0 <__ieee754_pow+0x1e0>)
   d83dc:	4598      	cmp	r8, r3
   d83de:	f340 808d 	ble.w	d84fc <__ieee754_pow+0x1ec>
   d83e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d83e6:	4598      	cmp	r8, r3
   d83e8:	f340 8438 	ble.w	d8c5c <__ieee754_pow+0x94c>
   d83ec:	4b41      	ldr	r3, [pc, #260]	; (d84f4 <__ieee754_pow+0x1e4>)
   d83ee:	429c      	cmp	r4, r3
   d83f0:	dd62      	ble.n	d84b8 <__ieee754_pow+0x1a8>
   d83f2:	f1b9 0f00 	cmp.w	r9, #0
   d83f6:	dd62      	ble.n	d84be <__ieee754_pow+0x1ae>
   d83f8:	a335      	add	r3, pc, #212	; (adr r3, d84d0 <__ieee754_pow+0x1c0>)
   d83fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83fe:	4610      	mov	r0, r2
   d8400:	4619      	mov	r1, r3
   d8402:	f001 f8d9 	bl	d95b8 <__aeabi_dmul>
   d8406:	ec41 0b10 	vmov	d0, r0, r1
   d840a:	e7ca      	b.n	d83a2 <__ieee754_pow+0x92>
   d840c:	b124      	cbz	r4, d8418 <__ieee754_pow+0x108>
   d840e:	4b35      	ldr	r3, [pc, #212]	; (d84e4 <__ieee754_pow+0x1d4>)
   d8410:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d8414:	429a      	cmp	r2, r3
   d8416:	d1da      	bne.n	d83ce <__ieee754_pow+0xbe>
   d8418:	f1b9 0f00 	cmp.w	r9, #0
   d841c:	f2c0 83cb 	blt.w	d8bb6 <__ieee754_pow+0x8a6>
   d8420:	2d00      	cmp	r5, #0
   d8422:	f2c0 8374 	blt.w	d8b0e <__ieee754_pow+0x7fe>
   d8426:	ec41 0b10 	vmov	d0, r0, r1
   d842a:	e7ba      	b.n	d83a2 <__ieee754_pow+0x92>
   d842c:	f1b9 0f00 	cmp.w	r9, #0
   d8430:	f2c0 847a 	blt.w	d8d28 <__ieee754_pow+0xa18>
   d8434:	ec47 6b10 	vmov	d0, r6, r7
   d8438:	e7b3      	b.n	d83a2 <__ieee754_pow+0x92>
   d843a:	f1be 0f00 	cmp.w	lr, #0
   d843e:	d084      	beq.n	d834a <__ieee754_pow+0x3a>
   d8440:	e7a6      	b.n	d8390 <__ieee754_pow+0x80>
   d8442:	4b2d      	ldr	r3, [pc, #180]	; (d84f8 <__ieee754_pow+0x1e8>)
   d8444:	4598      	cmp	r8, r3
   d8446:	dc29      	bgt.n	d849c <__ieee754_pow+0x18c>
   d8448:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d844c:	4598      	cmp	r8, r3
   d844e:	dd82      	ble.n	d8356 <__ieee754_pow+0x46>
   d8450:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8454:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8458:	2b14      	cmp	r3, #20
   d845a:	f340 847f 	ble.w	d8d5c <__ieee754_pow+0xa4c>
   d845e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d8462:	fa2e f203 	lsr.w	r2, lr, r3
   d8466:	fa02 f303 	lsl.w	r3, r2, r3
   d846a:	459e      	cmp	lr, r3
   d846c:	f47f af73 	bne.w	d8356 <__ieee754_pow+0x46>
   d8470:	f002 0201 	and.w	r2, r2, #1
   d8474:	f1c2 0b02 	rsb	fp, r2, #2
   d8478:	e76f      	b.n	d835a <__ieee754_pow+0x4a>
   d847a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d847e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8482:	ea53 030a 	orrs.w	r3, r3, sl
   d8486:	d08a      	beq.n	d839e <__ieee754_pow+0x8e>
   d8488:	4b1a      	ldr	r3, [pc, #104]	; (d84f4 <__ieee754_pow+0x1e4>)
   d848a:	429c      	cmp	r4, r3
   d848c:	f340 8385 	ble.w	d8b9a <__ieee754_pow+0x88a>
   d8490:	f1b9 0f00 	cmp.w	r9, #0
   d8494:	db13      	blt.n	d84be <__ieee754_pow+0x1ae>
   d8496:	ed9d 0b00 	vldr	d0, [sp]
   d849a:	e782      	b.n	d83a2 <__ieee754_pow+0x92>
   d849c:	f04f 0b02 	mov.w	fp, #2
   d84a0:	e75b      	b.n	d835a <__ieee754_pow+0x4a>
   d84a2:	4632      	mov	r2, r6
   d84a4:	463b      	mov	r3, r7
   d84a6:	4610      	mov	r0, r2
   d84a8:	4619      	mov	r1, r3
   d84aa:	f000 fed1 	bl	d9250 <__aeabi_dsub>
   d84ae:	4602      	mov	r2, r0
   d84b0:	460b      	mov	r3, r1
   d84b2:	f001 f9ab 	bl	d980c <__aeabi_ddiv>
   d84b6:	e7b6      	b.n	d8426 <__ieee754_pow+0x116>
   d84b8:	f1b9 0f00 	cmp.w	r9, #0
   d84bc:	db9c      	blt.n	d83f8 <__ieee754_pow+0xe8>
   d84be:	ed9f 0b06 	vldr	d0, [pc, #24]	; d84d8 <__ieee754_pow+0x1c8>
   d84c2:	e76e      	b.n	d83a2 <__ieee754_pow+0x92>
   d84c4:	f3af 8000 	nop.w
   d84c8:	00000000 	.word	0x00000000
   d84cc:	3ff00000 	.word	0x3ff00000
   d84d0:	8800759c 	.word	0x8800759c
   d84d4:	7e37e43c 	.word	0x7e37e43c
	...
   d84e0:	7ff00000 	.word	0x7ff00000
   d84e4:	3ff00000 	.word	0x3ff00000
   d84e8:	3fe00000 	.word	0x3fe00000
   d84ec:	000dc58c 	.word	0x000dc58c
   d84f0:	41e00000 	.word	0x41e00000
   d84f4:	3fefffff 	.word	0x3fefffff
   d84f8:	433fffff 	.word	0x433fffff
   d84fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d8500:	f04f 0200 	mov.w	r2, #0
   d8504:	da05      	bge.n	d8512 <__ieee754_pow+0x202>
   d8506:	4bd6      	ldr	r3, [pc, #856]	; (d8860 <__ieee754_pow+0x550>)
   d8508:	f001 f856 	bl	d95b8 <__aeabi_dmul>
   d850c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d8510:	460c      	mov	r4, r1
   d8512:	1523      	asrs	r3, r4, #20
   d8514:	4ed3      	ldr	r6, [pc, #844]	; (d8864 <__ieee754_pow+0x554>)
   d8516:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d851a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d851e:	4413      	add	r3, r2
   d8520:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d8524:	42b4      	cmp	r4, r6
   d8526:	461a      	mov	r2, r3
   d8528:	930d      	str	r3, [sp, #52]	; 0x34
   d852a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d852e:	f340 8349 	ble.w	d8bc4 <__ieee754_pow+0x8b4>
   d8532:	4bcd      	ldr	r3, [pc, #820]	; (d8868 <__ieee754_pow+0x558>)
   d8534:	429c      	cmp	r4, r3
   d8536:	f340 842d 	ble.w	d8d94 <__ieee754_pow+0xa84>
   d853a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d8808 <__ieee754_pow+0x4f8>
   d853e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8542:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8546:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d8810 <__ieee754_pow+0x500>
   d854a:	4613      	mov	r3, r2
   d854c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8550:	3301      	adds	r3, #1
   d8552:	930d      	str	r3, [sp, #52]	; 0x34
   d8554:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8558:	f04f 0800 	mov.w	r8, #0
   d855c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8560:	4629      	mov	r1, r5
   d8562:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d8566:	f000 fe73 	bl	d9250 <__aeabi_dsub>
   d856a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d856e:	4606      	mov	r6, r0
   d8570:	460f      	mov	r7, r1
   d8572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d8576:	f000 fe6d 	bl	d9254 <__adddf3>
   d857a:	4602      	mov	r2, r0
   d857c:	460b      	mov	r3, r1
   d857e:	2000      	movs	r0, #0
   d8580:	49ba      	ldr	r1, [pc, #744]	; (d886c <__ieee754_pow+0x55c>)
   d8582:	f001 f943 	bl	d980c <__aeabi_ddiv>
   d8586:	4603      	mov	r3, r0
   d8588:	460c      	mov	r4, r1
   d858a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d858e:	4602      	mov	r2, r0
   d8590:	460b      	mov	r3, r1
   d8592:	4630      	mov	r0, r6
   d8594:	4639      	mov	r1, r7
   d8596:	f001 f80f 	bl	d95b8 <__aeabi_dmul>
   d859a:	106b      	asrs	r3, r5, #1
   d859c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d85a0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d85a4:	eb03 0508 	add.w	r5, r3, r8
   d85a8:	460a      	mov	r2, r1
   d85aa:	2300      	movs	r3, #0
   d85ac:	4601      	mov	r1, r0
   d85ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d85b2:	9302      	str	r3, [sp, #8]
   d85b4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d85b8:	2400      	movs	r4, #0
   d85ba:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d85be:	462b      	mov	r3, r5
   d85c0:	4622      	mov	r2, r4
   d85c2:	4640      	mov	r0, r8
   d85c4:	4649      	mov	r1, r9
   d85c6:	f000 fff7 	bl	d95b8 <__aeabi_dmul>
   d85ca:	4602      	mov	r2, r0
   d85cc:	460b      	mov	r3, r1
   d85ce:	4630      	mov	r0, r6
   d85d0:	4639      	mov	r1, r7
   d85d2:	f000 fe3d 	bl	d9250 <__aeabi_dsub>
   d85d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d85da:	4606      	mov	r6, r0
   d85dc:	460f      	mov	r7, r1
   d85de:	4620      	mov	r0, r4
   d85e0:	4629      	mov	r1, r5
   d85e2:	f000 fe35 	bl	d9250 <__aeabi_dsub>
   d85e6:	4602      	mov	r2, r0
   d85e8:	460b      	mov	r3, r1
   d85ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d85ee:	f000 fe2f 	bl	d9250 <__aeabi_dsub>
   d85f2:	4642      	mov	r2, r8
   d85f4:	464b      	mov	r3, r9
   d85f6:	f000 ffdf 	bl	d95b8 <__aeabi_dmul>
   d85fa:	4602      	mov	r2, r0
   d85fc:	460b      	mov	r3, r1
   d85fe:	4630      	mov	r0, r6
   d8600:	4639      	mov	r1, r7
   d8602:	f000 fe25 	bl	d9250 <__aeabi_dsub>
   d8606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d860a:	f000 ffd5 	bl	d95b8 <__aeabi_dmul>
   d860e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d8612:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8616:	4622      	mov	r2, r4
   d8618:	462b      	mov	r3, r5
   d861a:	4620      	mov	r0, r4
   d861c:	4629      	mov	r1, r5
   d861e:	f000 ffcb 	bl	d95b8 <__aeabi_dmul>
   d8622:	a37d      	add	r3, pc, #500	; (adr r3, d8818 <__ieee754_pow+0x508>)
   d8624:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8628:	4604      	mov	r4, r0
   d862a:	460d      	mov	r5, r1
   d862c:	f000 ffc4 	bl	d95b8 <__aeabi_dmul>
   d8630:	a37b      	add	r3, pc, #492	; (adr r3, d8820 <__ieee754_pow+0x510>)
   d8632:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8636:	f000 fe0d 	bl	d9254 <__adddf3>
   d863a:	4622      	mov	r2, r4
   d863c:	462b      	mov	r3, r5
   d863e:	f000 ffbb 	bl	d95b8 <__aeabi_dmul>
   d8642:	a379      	add	r3, pc, #484	; (adr r3, d8828 <__ieee754_pow+0x518>)
   d8644:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8648:	f000 fe04 	bl	d9254 <__adddf3>
   d864c:	4622      	mov	r2, r4
   d864e:	462b      	mov	r3, r5
   d8650:	f000 ffb2 	bl	d95b8 <__aeabi_dmul>
   d8654:	a376      	add	r3, pc, #472	; (adr r3, d8830 <__ieee754_pow+0x520>)
   d8656:	e9d3 2300 	ldrd	r2, r3, [r3]
   d865a:	f000 fdfb 	bl	d9254 <__adddf3>
   d865e:	4622      	mov	r2, r4
   d8660:	462b      	mov	r3, r5
   d8662:	f000 ffa9 	bl	d95b8 <__aeabi_dmul>
   d8666:	a374      	add	r3, pc, #464	; (adr r3, d8838 <__ieee754_pow+0x528>)
   d8668:	e9d3 2300 	ldrd	r2, r3, [r3]
   d866c:	f000 fdf2 	bl	d9254 <__adddf3>
   d8670:	4622      	mov	r2, r4
   d8672:	462b      	mov	r3, r5
   d8674:	f000 ffa0 	bl	d95b8 <__aeabi_dmul>
   d8678:	a371      	add	r3, pc, #452	; (adr r3, d8840 <__ieee754_pow+0x530>)
   d867a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d867e:	f000 fde9 	bl	d9254 <__adddf3>
   d8682:	4622      	mov	r2, r4
   d8684:	4606      	mov	r6, r0
   d8686:	460f      	mov	r7, r1
   d8688:	462b      	mov	r3, r5
   d868a:	4620      	mov	r0, r4
   d868c:	4629      	mov	r1, r5
   d868e:	f000 ff93 	bl	d95b8 <__aeabi_dmul>
   d8692:	4602      	mov	r2, r0
   d8694:	460b      	mov	r3, r1
   d8696:	4630      	mov	r0, r6
   d8698:	4639      	mov	r1, r7
   d869a:	f000 ff8d 	bl	d95b8 <__aeabi_dmul>
   d869e:	4642      	mov	r2, r8
   d86a0:	4604      	mov	r4, r0
   d86a2:	460d      	mov	r5, r1
   d86a4:	464b      	mov	r3, r9
   d86a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d86aa:	f000 fdd3 	bl	d9254 <__adddf3>
   d86ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d86b2:	f000 ff81 	bl	d95b8 <__aeabi_dmul>
   d86b6:	4622      	mov	r2, r4
   d86b8:	462b      	mov	r3, r5
   d86ba:	f000 fdcb 	bl	d9254 <__adddf3>
   d86be:	4642      	mov	r2, r8
   d86c0:	4606      	mov	r6, r0
   d86c2:	460f      	mov	r7, r1
   d86c4:	464b      	mov	r3, r9
   d86c6:	4640      	mov	r0, r8
   d86c8:	4649      	mov	r1, r9
   d86ca:	f000 ff75 	bl	d95b8 <__aeabi_dmul>
   d86ce:	2200      	movs	r2, #0
   d86d0:	4b67      	ldr	r3, [pc, #412]	; (d8870 <__ieee754_pow+0x560>)
   d86d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d86d6:	f000 fdbd 	bl	d9254 <__adddf3>
   d86da:	4632      	mov	r2, r6
   d86dc:	463b      	mov	r3, r7
   d86de:	f000 fdb9 	bl	d9254 <__adddf3>
   d86e2:	9802      	ldr	r0, [sp, #8]
   d86e4:	460d      	mov	r5, r1
   d86e6:	4604      	mov	r4, r0
   d86e8:	4622      	mov	r2, r4
   d86ea:	462b      	mov	r3, r5
   d86ec:	4640      	mov	r0, r8
   d86ee:	4649      	mov	r1, r9
   d86f0:	f000 ff62 	bl	d95b8 <__aeabi_dmul>
   d86f4:	2200      	movs	r2, #0
   d86f6:	4680      	mov	r8, r0
   d86f8:	4689      	mov	r9, r1
   d86fa:	4b5d      	ldr	r3, [pc, #372]	; (d8870 <__ieee754_pow+0x560>)
   d86fc:	4620      	mov	r0, r4
   d86fe:	4629      	mov	r1, r5
   d8700:	f000 fda6 	bl	d9250 <__aeabi_dsub>
   d8704:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8708:	f000 fda2 	bl	d9250 <__aeabi_dsub>
   d870c:	4602      	mov	r2, r0
   d870e:	460b      	mov	r3, r1
   d8710:	4630      	mov	r0, r6
   d8712:	4639      	mov	r1, r7
   d8714:	f000 fd9c 	bl	d9250 <__aeabi_dsub>
   d8718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d871c:	f000 ff4c 	bl	d95b8 <__aeabi_dmul>
   d8720:	4622      	mov	r2, r4
   d8722:	4606      	mov	r6, r0
   d8724:	460f      	mov	r7, r1
   d8726:	462b      	mov	r3, r5
   d8728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d872c:	f000 ff44 	bl	d95b8 <__aeabi_dmul>
   d8730:	4602      	mov	r2, r0
   d8732:	460b      	mov	r3, r1
   d8734:	4630      	mov	r0, r6
   d8736:	4639      	mov	r1, r7
   d8738:	f000 fd8c 	bl	d9254 <__adddf3>
   d873c:	4606      	mov	r6, r0
   d873e:	460f      	mov	r7, r1
   d8740:	4602      	mov	r2, r0
   d8742:	460b      	mov	r3, r1
   d8744:	4640      	mov	r0, r8
   d8746:	4649      	mov	r1, r9
   d8748:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d874c:	f000 fd82 	bl	d9254 <__adddf3>
   d8750:	9802      	ldr	r0, [sp, #8]
   d8752:	a33d      	add	r3, pc, #244	; (adr r3, d8848 <__ieee754_pow+0x538>)
   d8754:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8758:	4604      	mov	r4, r0
   d875a:	460d      	mov	r5, r1
   d875c:	f000 ff2c 	bl	d95b8 <__aeabi_dmul>
   d8760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8764:	4680      	mov	r8, r0
   d8766:	4689      	mov	r9, r1
   d8768:	4620      	mov	r0, r4
   d876a:	4629      	mov	r1, r5
   d876c:	f000 fd70 	bl	d9250 <__aeabi_dsub>
   d8770:	4602      	mov	r2, r0
   d8772:	460b      	mov	r3, r1
   d8774:	4630      	mov	r0, r6
   d8776:	4639      	mov	r1, r7
   d8778:	f000 fd6a 	bl	d9250 <__aeabi_dsub>
   d877c:	a334      	add	r3, pc, #208	; (adr r3, d8850 <__ieee754_pow+0x540>)
   d877e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8782:	f000 ff19 	bl	d95b8 <__aeabi_dmul>
   d8786:	a334      	add	r3, pc, #208	; (adr r3, d8858 <__ieee754_pow+0x548>)
   d8788:	e9d3 2300 	ldrd	r2, r3, [r3]
   d878c:	4606      	mov	r6, r0
   d878e:	460f      	mov	r7, r1
   d8790:	4620      	mov	r0, r4
   d8792:	4629      	mov	r1, r5
   d8794:	f000 ff10 	bl	d95b8 <__aeabi_dmul>
   d8798:	4602      	mov	r2, r0
   d879a:	460b      	mov	r3, r1
   d879c:	4630      	mov	r0, r6
   d879e:	4639      	mov	r1, r7
   d87a0:	f000 fd58 	bl	d9254 <__adddf3>
   d87a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d87a8:	f000 fd54 	bl	d9254 <__adddf3>
   d87ac:	4606      	mov	r6, r0
   d87ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   d87b0:	460f      	mov	r7, r1
   d87b2:	f000 fe9b 	bl	d94ec <__aeabi_i2d>
   d87b6:	4632      	mov	r2, r6
   d87b8:	4604      	mov	r4, r0
   d87ba:	460d      	mov	r5, r1
   d87bc:	463b      	mov	r3, r7
   d87be:	4640      	mov	r0, r8
   d87c0:	4649      	mov	r1, r9
   d87c2:	f000 fd47 	bl	d9254 <__adddf3>
   d87c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87ca:	f000 fd43 	bl	d9254 <__adddf3>
   d87ce:	4622      	mov	r2, r4
   d87d0:	462b      	mov	r3, r5
   d87d2:	f000 fd3f 	bl	d9254 <__adddf3>
   d87d6:	9802      	ldr	r0, [sp, #8]
   d87d8:	4622      	mov	r2, r4
   d87da:	462b      	mov	r3, r5
   d87dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d87e0:	f000 fd36 	bl	d9250 <__aeabi_dsub>
   d87e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87e8:	f000 fd32 	bl	d9250 <__aeabi_dsub>
   d87ec:	4642      	mov	r2, r8
   d87ee:	464b      	mov	r3, r9
   d87f0:	f000 fd2e 	bl	d9250 <__aeabi_dsub>
   d87f4:	4602      	mov	r2, r0
   d87f6:	460b      	mov	r3, r1
   d87f8:	4630      	mov	r0, r6
   d87fa:	4639      	mov	r1, r7
   d87fc:	f000 fd28 	bl	d9250 <__aeabi_dsub>
   d8800:	4680      	mov	r8, r0
   d8802:	4689      	mov	r9, r1
   d8804:	e036      	b.n	d8874 <__ieee754_pow+0x564>
   d8806:	bf00      	nop
	...
   d8814:	3ff00000 	.word	0x3ff00000
   d8818:	4a454eef 	.word	0x4a454eef
   d881c:	3fca7e28 	.word	0x3fca7e28
   d8820:	93c9db65 	.word	0x93c9db65
   d8824:	3fcd864a 	.word	0x3fcd864a
   d8828:	a91d4101 	.word	0xa91d4101
   d882c:	3fd17460 	.word	0x3fd17460
   d8830:	518f264d 	.word	0x518f264d
   d8834:	3fd55555 	.word	0x3fd55555
   d8838:	db6fabff 	.word	0xdb6fabff
   d883c:	3fdb6db6 	.word	0x3fdb6db6
   d8840:	33333303 	.word	0x33333303
   d8844:	3fe33333 	.word	0x3fe33333
   d8848:	e0000000 	.word	0xe0000000
   d884c:	3feec709 	.word	0x3feec709
   d8850:	dc3a03fd 	.word	0xdc3a03fd
   d8854:	3feec709 	.word	0x3feec709
   d8858:	145b01f5 	.word	0x145b01f5
   d885c:	be3e2fe0 	.word	0xbe3e2fe0
   d8860:	43400000 	.word	0x43400000
   d8864:	0003988e 	.word	0x0003988e
   d8868:	000bb679 	.word	0x000bb679
   d886c:	3ff00000 	.word	0x3ff00000
   d8870:	40080000 	.word	0x40080000
   d8874:	f10b 33ff 	add.w	r3, fp, #4294967295
   d8878:	ea53 030a 	orrs.w	r3, r3, sl
   d887c:	f000 8188 	beq.w	d8b90 <__ieee754_pow+0x880>
   d8880:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d8be0 <__ieee754_pow+0x8d0>
   d8884:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8888:	e9dd ab00 	ldrd	sl, fp, [sp]
   d888c:	4653      	mov	r3, sl
   d888e:	465c      	mov	r4, fp
   d8890:	e9cd 3400 	strd	r3, r4, [sp]
   d8894:	2300      	movs	r3, #0
   d8896:	9300      	str	r3, [sp, #0]
   d8898:	e9dd 4500 	ldrd	r4, r5, [sp]
   d889c:	4650      	mov	r0, sl
   d889e:	4622      	mov	r2, r4
   d88a0:	462b      	mov	r3, r5
   d88a2:	4659      	mov	r1, fp
   d88a4:	f000 fcd4 	bl	d9250 <__aeabi_dsub>
   d88a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d88ac:	f000 fe84 	bl	d95b8 <__aeabi_dmul>
   d88b0:	4652      	mov	r2, sl
   d88b2:	4606      	mov	r6, r0
   d88b4:	460f      	mov	r7, r1
   d88b6:	465b      	mov	r3, fp
   d88b8:	4640      	mov	r0, r8
   d88ba:	4649      	mov	r1, r9
   d88bc:	f000 fe7c 	bl	d95b8 <__aeabi_dmul>
   d88c0:	4602      	mov	r2, r0
   d88c2:	460b      	mov	r3, r1
   d88c4:	4630      	mov	r0, r6
   d88c6:	4639      	mov	r1, r7
   d88c8:	f000 fcc4 	bl	d9254 <__adddf3>
   d88cc:	4622      	mov	r2, r4
   d88ce:	4680      	mov	r8, r0
   d88d0:	4689      	mov	r9, r1
   d88d2:	462b      	mov	r3, r5
   d88d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d88d8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d88dc:	f000 fe6c 	bl	d95b8 <__aeabi_dmul>
   d88e0:	460b      	mov	r3, r1
   d88e2:	4602      	mov	r2, r0
   d88e4:	4606      	mov	r6, r0
   d88e6:	460f      	mov	r7, r1
   d88e8:	4640      	mov	r0, r8
   d88ea:	4649      	mov	r1, r9
   d88ec:	f000 fcb2 	bl	d9254 <__adddf3>
   d88f0:	4bd5      	ldr	r3, [pc, #852]	; (d8c48 <__ieee754_pow+0x938>)
   d88f2:	4299      	cmp	r1, r3
   d88f4:	4604      	mov	r4, r0
   d88f6:	460d      	mov	r5, r1
   d88f8:	468a      	mov	sl, r1
   d88fa:	f340 8123 	ble.w	d8b44 <__ieee754_pow+0x834>
   d88fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8902:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8906:	4303      	orrs	r3, r0
   d8908:	f040 8218 	bne.w	d8d3c <__ieee754_pow+0xa2c>
   d890c:	a3b6      	add	r3, pc, #728	; (adr r3, d8be8 <__ieee754_pow+0x8d8>)
   d890e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8916:	f000 fc9d 	bl	d9254 <__adddf3>
   d891a:	4632      	mov	r2, r6
   d891c:	4680      	mov	r8, r0
   d891e:	4689      	mov	r9, r1
   d8920:	463b      	mov	r3, r7
   d8922:	4620      	mov	r0, r4
   d8924:	4629      	mov	r1, r5
   d8926:	f000 fc93 	bl	d9250 <__aeabi_dsub>
   d892a:	4602      	mov	r2, r0
   d892c:	460b      	mov	r3, r1
   d892e:	4640      	mov	r0, r8
   d8930:	4649      	mov	r1, r9
   d8932:	f001 f8d1 	bl	d9ad8 <__aeabi_dcmpgt>
   d8936:	2800      	cmp	r0, #0
   d8938:	f040 8200 	bne.w	d8d3c <__ieee754_pow+0xa2c>
   d893c:	46a8      	mov	r8, r5
   d893e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8946:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d894a:	fa42 f303 	asr.w	r3, r2, r3
   d894e:	4453      	add	r3, sl
   d8950:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8954:	4dbd      	ldr	r5, [pc, #756]	; (d8c4c <__ieee754_pow+0x93c>)
   d8956:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d895a:	4115      	asrs	r5, r2
   d895c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8960:	2000      	movs	r0, #0
   d8962:	f1c2 0414 	rsb	r4, r2, #20
   d8966:	ea23 0105 	bic.w	r1, r3, r5
   d896a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d896e:	f1ba 0f00 	cmp.w	sl, #0
   d8972:	4602      	mov	r2, r0
   d8974:	460b      	mov	r3, r1
   d8976:	fa4b fb04 	asr.w	fp, fp, r4
   d897a:	4630      	mov	r0, r6
   d897c:	4639      	mov	r1, r7
   d897e:	bfb8      	it	lt
   d8980:	f1cb 0b00 	rsblt	fp, fp, #0
   d8984:	f000 fc64 	bl	d9250 <__aeabi_dsub>
   d8988:	4602      	mov	r2, r0
   d898a:	460b      	mov	r3, r1
   d898c:	4606      	mov	r6, r0
   d898e:	460f      	mov	r7, r1
   d8990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8994:	f000 fc5e 	bl	d9254 <__adddf3>
   d8998:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d899c:	2400      	movs	r4, #0
   d899e:	a394      	add	r3, pc, #592	; (adr r3, d8bf0 <__ieee754_pow+0x8e0>)
   d89a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89a4:	4620      	mov	r0, r4
   d89a6:	460d      	mov	r5, r1
   d89a8:	f000 fe06 	bl	d95b8 <__aeabi_dmul>
   d89ac:	4632      	mov	r2, r6
   d89ae:	4680      	mov	r8, r0
   d89b0:	4689      	mov	r9, r1
   d89b2:	463b      	mov	r3, r7
   d89b4:	4620      	mov	r0, r4
   d89b6:	4629      	mov	r1, r5
   d89b8:	f000 fc4a 	bl	d9250 <__aeabi_dsub>
   d89bc:	4602      	mov	r2, r0
   d89be:	460b      	mov	r3, r1
   d89c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d89c4:	f000 fc44 	bl	d9250 <__aeabi_dsub>
   d89c8:	a38b      	add	r3, pc, #556	; (adr r3, d8bf8 <__ieee754_pow+0x8e8>)
   d89ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89ce:	f000 fdf3 	bl	d95b8 <__aeabi_dmul>
   d89d2:	a38b      	add	r3, pc, #556	; (adr r3, d8c00 <__ieee754_pow+0x8f0>)
   d89d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89d8:	4606      	mov	r6, r0
   d89da:	460f      	mov	r7, r1
   d89dc:	4620      	mov	r0, r4
   d89de:	4629      	mov	r1, r5
   d89e0:	f000 fdea 	bl	d95b8 <__aeabi_dmul>
   d89e4:	4602      	mov	r2, r0
   d89e6:	460b      	mov	r3, r1
   d89e8:	4630      	mov	r0, r6
   d89ea:	4639      	mov	r1, r7
   d89ec:	f000 fc32 	bl	d9254 <__adddf3>
   d89f0:	4606      	mov	r6, r0
   d89f2:	460f      	mov	r7, r1
   d89f4:	4602      	mov	r2, r0
   d89f6:	460b      	mov	r3, r1
   d89f8:	4640      	mov	r0, r8
   d89fa:	4649      	mov	r1, r9
   d89fc:	f000 fc2a 	bl	d9254 <__adddf3>
   d8a00:	4642      	mov	r2, r8
   d8a02:	464b      	mov	r3, r9
   d8a04:	4604      	mov	r4, r0
   d8a06:	460d      	mov	r5, r1
   d8a08:	f000 fc22 	bl	d9250 <__aeabi_dsub>
   d8a0c:	4602      	mov	r2, r0
   d8a0e:	460b      	mov	r3, r1
   d8a10:	4630      	mov	r0, r6
   d8a12:	4639      	mov	r1, r7
   d8a14:	f000 fc1c 	bl	d9250 <__aeabi_dsub>
   d8a18:	4622      	mov	r2, r4
   d8a1a:	4680      	mov	r8, r0
   d8a1c:	4689      	mov	r9, r1
   d8a1e:	462b      	mov	r3, r5
   d8a20:	4620      	mov	r0, r4
   d8a22:	4629      	mov	r1, r5
   d8a24:	f000 fdc8 	bl	d95b8 <__aeabi_dmul>
   d8a28:	a377      	add	r3, pc, #476	; (adr r3, d8c08 <__ieee754_pow+0x8f8>)
   d8a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a2e:	4606      	mov	r6, r0
   d8a30:	460f      	mov	r7, r1
   d8a32:	f000 fdc1 	bl	d95b8 <__aeabi_dmul>
   d8a36:	a376      	add	r3, pc, #472	; (adr r3, d8c10 <__ieee754_pow+0x900>)
   d8a38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a3c:	f000 fc08 	bl	d9250 <__aeabi_dsub>
   d8a40:	4632      	mov	r2, r6
   d8a42:	463b      	mov	r3, r7
   d8a44:	f000 fdb8 	bl	d95b8 <__aeabi_dmul>
   d8a48:	a373      	add	r3, pc, #460	; (adr r3, d8c18 <__ieee754_pow+0x908>)
   d8a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a4e:	f000 fc01 	bl	d9254 <__adddf3>
   d8a52:	4632      	mov	r2, r6
   d8a54:	463b      	mov	r3, r7
   d8a56:	f000 fdaf 	bl	d95b8 <__aeabi_dmul>
   d8a5a:	a371      	add	r3, pc, #452	; (adr r3, d8c20 <__ieee754_pow+0x910>)
   d8a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a60:	f000 fbf6 	bl	d9250 <__aeabi_dsub>
   d8a64:	4632      	mov	r2, r6
   d8a66:	463b      	mov	r3, r7
   d8a68:	f000 fda6 	bl	d95b8 <__aeabi_dmul>
   d8a6c:	a36e      	add	r3, pc, #440	; (adr r3, d8c28 <__ieee754_pow+0x918>)
   d8a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a72:	f000 fbef 	bl	d9254 <__adddf3>
   d8a76:	4632      	mov	r2, r6
   d8a78:	463b      	mov	r3, r7
   d8a7a:	f000 fd9d 	bl	d95b8 <__aeabi_dmul>
   d8a7e:	4602      	mov	r2, r0
   d8a80:	460b      	mov	r3, r1
   d8a82:	4620      	mov	r0, r4
   d8a84:	4629      	mov	r1, r5
   d8a86:	f000 fbe3 	bl	d9250 <__aeabi_dsub>
   d8a8a:	4606      	mov	r6, r0
   d8a8c:	460f      	mov	r7, r1
   d8a8e:	4602      	mov	r2, r0
   d8a90:	460b      	mov	r3, r1
   d8a92:	4620      	mov	r0, r4
   d8a94:	4629      	mov	r1, r5
   d8a96:	f000 fd8f 	bl	d95b8 <__aeabi_dmul>
   d8a9a:	2200      	movs	r2, #0
   d8a9c:	e9cd 0100 	strd	r0, r1, [sp]
   d8aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8aa4:	4630      	mov	r0, r6
   d8aa6:	4639      	mov	r1, r7
   d8aa8:	f000 fbd2 	bl	d9250 <__aeabi_dsub>
   d8aac:	4602      	mov	r2, r0
   d8aae:	460b      	mov	r3, r1
   d8ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8ab4:	f000 feaa 	bl	d980c <__aeabi_ddiv>
   d8ab8:	4642      	mov	r2, r8
   d8aba:	4606      	mov	r6, r0
   d8abc:	460f      	mov	r7, r1
   d8abe:	464b      	mov	r3, r9
   d8ac0:	4620      	mov	r0, r4
   d8ac2:	4629      	mov	r1, r5
   d8ac4:	f000 fd78 	bl	d95b8 <__aeabi_dmul>
   d8ac8:	4642      	mov	r2, r8
   d8aca:	464b      	mov	r3, r9
   d8acc:	f000 fbc2 	bl	d9254 <__adddf3>
   d8ad0:	4602      	mov	r2, r0
   d8ad2:	460b      	mov	r3, r1
   d8ad4:	4630      	mov	r0, r6
   d8ad6:	4639      	mov	r1, r7
   d8ad8:	f000 fbba 	bl	d9250 <__aeabi_dsub>
   d8adc:	4622      	mov	r2, r4
   d8ade:	462b      	mov	r3, r5
   d8ae0:	f000 fbb6 	bl	d9250 <__aeabi_dsub>
   d8ae4:	4602      	mov	r2, r0
   d8ae6:	460b      	mov	r3, r1
   d8ae8:	2000      	movs	r0, #0
   d8aea:	4959      	ldr	r1, [pc, #356]	; (d8c50 <__ieee754_pow+0x940>)
   d8aec:	f000 fbb0 	bl	d9250 <__aeabi_dsub>
   d8af0:	448a      	add	sl, r1
   d8af2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8af6:	4602      	mov	r2, r0
   d8af8:	460b      	mov	r3, r1
   d8afa:	f2c0 815b 	blt.w	d8db4 <__ieee754_pow+0xaa4>
   d8afe:	4651      	mov	r1, sl
   d8b00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8b04:	f000 fd58 	bl	d95b8 <__aeabi_dmul>
   d8b08:	ec41 0b10 	vmov	d0, r0, r1
   d8b0c:	e449      	b.n	d83a2 <__ieee754_pow+0x92>
   d8b0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8b12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8b16:	ea54 030b 	orrs.w	r3, r4, fp
   d8b1a:	f000 8137 	beq.w	d8d8c <__ieee754_pow+0xa7c>
   d8b1e:	f1bb 0f01 	cmp.w	fp, #1
   d8b22:	f47f ac80 	bne.w	d8426 <__ieee754_pow+0x116>
   d8b26:	4602      	mov	r2, r0
   d8b28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b2c:	ec43 2b10 	vmov	d0, r2, r3
   d8b30:	e437      	b.n	d83a2 <__ieee754_pow+0x92>
   d8b32:	4632      	mov	r2, r6
   d8b34:	463b      	mov	r3, r7
   d8b36:	4630      	mov	r0, r6
   d8b38:	4639      	mov	r1, r7
   d8b3a:	f000 fd3d 	bl	d95b8 <__aeabi_dmul>
   d8b3e:	ec41 0b10 	vmov	d0, r0, r1
   d8b42:	e42e      	b.n	d83a2 <__ieee754_pow+0x92>
   d8b44:	4b43      	ldr	r3, [pc, #268]	; (d8c54 <__ieee754_pow+0x944>)
   d8b46:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8b4a:	4598      	cmp	r8, r3
   d8b4c:	f340 8115 	ble.w	d8d7a <__ieee754_pow+0xa6a>
   d8b50:	4b41      	ldr	r3, [pc, #260]	; (d8c58 <__ieee754_pow+0x948>)
   d8b52:	440b      	add	r3, r1
   d8b54:	4303      	orrs	r3, r0
   d8b56:	d10c      	bne.n	d8b72 <__ieee754_pow+0x862>
   d8b58:	4632      	mov	r2, r6
   d8b5a:	463b      	mov	r3, r7
   d8b5c:	f000 fb78 	bl	d9250 <__aeabi_dsub>
   d8b60:	4602      	mov	r2, r0
   d8b62:	460b      	mov	r3, r1
   d8b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8b68:	f000 ffa2 	bl	d9ab0 <__aeabi_dcmple>
   d8b6c:	2800      	cmp	r0, #0
   d8b6e:	f43f aee6 	beq.w	d893e <__ieee754_pow+0x62e>
   d8b72:	a32f      	add	r3, pc, #188	; (adr r3, d8c30 <__ieee754_pow+0x920>)
   d8b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8b7c:	f000 fd1c 	bl	d95b8 <__aeabi_dmul>
   d8b80:	a32b      	add	r3, pc, #172	; (adr r3, d8c30 <__ieee754_pow+0x920>)
   d8b82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b86:	f000 fd17 	bl	d95b8 <__aeabi_dmul>
   d8b8a:	ec41 0b10 	vmov	d0, r0, r1
   d8b8e:	e408      	b.n	d83a2 <__ieee754_pow+0x92>
   d8b90:	ed9f 7b29 	vldr	d7, [pc, #164]	; d8c38 <__ieee754_pow+0x928>
   d8b94:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8b98:	e676      	b.n	d8888 <__ieee754_pow+0x578>
   d8b9a:	f1b9 0f00 	cmp.w	r9, #0
   d8b9e:	f6bf ac8e 	bge.w	d84be <__ieee754_pow+0x1ae>
   d8ba2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8ba6:	ee00 3a10 	vmov	s0, r3
   d8baa:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d8bae:	ee00 3a90 	vmov	s1, r3
   d8bb2:	f7ff bbf6 	b.w	d83a2 <__ieee754_pow+0x92>
   d8bb6:	4602      	mov	r2, r0
   d8bb8:	460b      	mov	r3, r1
   d8bba:	2000      	movs	r0, #0
   d8bbc:	4924      	ldr	r1, [pc, #144]	; (d8c50 <__ieee754_pow+0x940>)
   d8bbe:	f000 fe25 	bl	d980c <__aeabi_ddiv>
   d8bc2:	e42d      	b.n	d8420 <__ieee754_pow+0x110>
   d8bc4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d8c40 <__ieee754_pow+0x930>
   d8bc8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8bcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8bd0:	ed9f 7b03 	vldr	d7, [pc, #12]	; d8be0 <__ieee754_pow+0x8d0>
   d8bd4:	f04f 0800 	mov.w	r8, #0
   d8bd8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8bdc:	e4be      	b.n	d855c <__ieee754_pow+0x24c>
   d8bde:	bf00      	nop
   d8be0:	00000000 	.word	0x00000000
   d8be4:	3ff00000 	.word	0x3ff00000
   d8be8:	652b82fe 	.word	0x652b82fe
   d8bec:	3c971547 	.word	0x3c971547
   d8bf0:	00000000 	.word	0x00000000
   d8bf4:	3fe62e43 	.word	0x3fe62e43
   d8bf8:	fefa39ef 	.word	0xfefa39ef
   d8bfc:	3fe62e42 	.word	0x3fe62e42
   d8c00:	0ca86c39 	.word	0x0ca86c39
   d8c04:	be205c61 	.word	0xbe205c61
   d8c08:	72bea4d0 	.word	0x72bea4d0
   d8c0c:	3e663769 	.word	0x3e663769
   d8c10:	c5d26bf1 	.word	0xc5d26bf1
   d8c14:	3ebbbd41 	.word	0x3ebbbd41
   d8c18:	af25de2c 	.word	0xaf25de2c
   d8c1c:	3f11566a 	.word	0x3f11566a
   d8c20:	16bebd93 	.word	0x16bebd93
   d8c24:	3f66c16c 	.word	0x3f66c16c
   d8c28:	5555553e 	.word	0x5555553e
   d8c2c:	3fc55555 	.word	0x3fc55555
   d8c30:	c2f8f359 	.word	0xc2f8f359
   d8c34:	01a56e1f 	.word	0x01a56e1f
   d8c38:	00000000 	.word	0x00000000
   d8c3c:	bff00000 	.word	0xbff00000
	...
   d8c48:	408fffff 	.word	0x408fffff
   d8c4c:	000fffff 	.word	0x000fffff
   d8c50:	3ff00000 	.word	0x3ff00000
   d8c54:	4090cbff 	.word	0x4090cbff
   d8c58:	3f6f3400 	.word	0x3f6f3400
   d8c5c:	4b6c      	ldr	r3, [pc, #432]	; (d8e10 <__ieee754_pow+0xb00>)
   d8c5e:	429c      	cmp	r4, r3
   d8c60:	f77f ac2a 	ble.w	d84b8 <__ieee754_pow+0x1a8>
   d8c64:	4b6b      	ldr	r3, [pc, #428]	; (d8e14 <__ieee754_pow+0xb04>)
   d8c66:	429c      	cmp	r4, r3
   d8c68:	f73f abc3 	bgt.w	d83f2 <__ieee754_pow+0xe2>
   d8c6c:	2200      	movs	r2, #0
   d8c6e:	4b69      	ldr	r3, [pc, #420]	; (d8e14 <__ieee754_pow+0xb04>)
   d8c70:	f000 faee 	bl	d9250 <__aeabi_dsub>
   d8c74:	a356      	add	r3, pc, #344	; (adr r3, d8dd0 <__ieee754_pow+0xac0>)
   d8c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c7a:	4604      	mov	r4, r0
   d8c7c:	460d      	mov	r5, r1
   d8c7e:	f000 fc9b 	bl	d95b8 <__aeabi_dmul>
   d8c82:	a355      	add	r3, pc, #340	; (adr r3, d8dd8 <__ieee754_pow+0xac8>)
   d8c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c88:	4680      	mov	r8, r0
   d8c8a:	4689      	mov	r9, r1
   d8c8c:	4620      	mov	r0, r4
   d8c8e:	4629      	mov	r1, r5
   d8c90:	f000 fc92 	bl	d95b8 <__aeabi_dmul>
   d8c94:	2200      	movs	r2, #0
   d8c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8c9a:	4b5f      	ldr	r3, [pc, #380]	; (d8e18 <__ieee754_pow+0xb08>)
   d8c9c:	4620      	mov	r0, r4
   d8c9e:	4629      	mov	r1, r5
   d8ca0:	f000 fc8a 	bl	d95b8 <__aeabi_dmul>
   d8ca4:	4602      	mov	r2, r0
   d8ca6:	460b      	mov	r3, r1
   d8ca8:	a14d      	add	r1, pc, #308	; (adr r1, d8de0 <__ieee754_pow+0xad0>)
   d8caa:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8cae:	f000 facf 	bl	d9250 <__aeabi_dsub>
   d8cb2:	4622      	mov	r2, r4
   d8cb4:	462b      	mov	r3, r5
   d8cb6:	f000 fc7f 	bl	d95b8 <__aeabi_dmul>
   d8cba:	4602      	mov	r2, r0
   d8cbc:	460b      	mov	r3, r1
   d8cbe:	2000      	movs	r0, #0
   d8cc0:	4956      	ldr	r1, [pc, #344]	; (d8e1c <__ieee754_pow+0xb0c>)
   d8cc2:	f000 fac5 	bl	d9250 <__aeabi_dsub>
   d8cc6:	4622      	mov	r2, r4
   d8cc8:	462b      	mov	r3, r5
   d8cca:	4606      	mov	r6, r0
   d8ccc:	460f      	mov	r7, r1
   d8cce:	4620      	mov	r0, r4
   d8cd0:	4629      	mov	r1, r5
   d8cd2:	f000 fc71 	bl	d95b8 <__aeabi_dmul>
   d8cd6:	4602      	mov	r2, r0
   d8cd8:	460b      	mov	r3, r1
   d8cda:	4630      	mov	r0, r6
   d8cdc:	4639      	mov	r1, r7
   d8cde:	f000 fc6b 	bl	d95b8 <__aeabi_dmul>
   d8ce2:	a341      	add	r3, pc, #260	; (adr r3, d8de8 <__ieee754_pow+0xad8>)
   d8ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ce8:	f000 fc66 	bl	d95b8 <__aeabi_dmul>
   d8cec:	4602      	mov	r2, r0
   d8cee:	460b      	mov	r3, r1
   d8cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8cf4:	f000 faac 	bl	d9250 <__aeabi_dsub>
   d8cf8:	4602      	mov	r2, r0
   d8cfa:	460b      	mov	r3, r1
   d8cfc:	4604      	mov	r4, r0
   d8cfe:	460d      	mov	r5, r1
   d8d00:	4640      	mov	r0, r8
   d8d02:	4649      	mov	r1, r9
   d8d04:	f000 faa6 	bl	d9254 <__adddf3>
   d8d08:	4642      	mov	r2, r8
   d8d0a:	464b      	mov	r3, r9
   d8d0c:	2000      	movs	r0, #0
   d8d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8d12:	f000 fa9d 	bl	d9250 <__aeabi_dsub>
   d8d16:	4602      	mov	r2, r0
   d8d18:	460b      	mov	r3, r1
   d8d1a:	4620      	mov	r0, r4
   d8d1c:	4629      	mov	r1, r5
   d8d1e:	f000 fa97 	bl	d9250 <__aeabi_dsub>
   d8d22:	4680      	mov	r8, r0
   d8d24:	4689      	mov	r9, r1
   d8d26:	e5a5      	b.n	d8874 <__ieee754_pow+0x564>
   d8d28:	4632      	mov	r2, r6
   d8d2a:	463b      	mov	r3, r7
   d8d2c:	2000      	movs	r0, #0
   d8d2e:	4939      	ldr	r1, [pc, #228]	; (d8e14 <__ieee754_pow+0xb04>)
   d8d30:	f000 fd6c 	bl	d980c <__aeabi_ddiv>
   d8d34:	ec41 0b10 	vmov	d0, r0, r1
   d8d38:	f7ff bb33 	b.w	d83a2 <__ieee754_pow+0x92>
   d8d3c:	a32c      	add	r3, pc, #176	; (adr r3, d8df0 <__ieee754_pow+0xae0>)
   d8d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8d46:	f000 fc37 	bl	d95b8 <__aeabi_dmul>
   d8d4a:	a329      	add	r3, pc, #164	; (adr r3, d8df0 <__ieee754_pow+0xae0>)
   d8d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d50:	f000 fc32 	bl	d95b8 <__aeabi_dmul>
   d8d54:	ec41 0b10 	vmov	d0, r0, r1
   d8d58:	f7ff bb23 	b.w	d83a2 <__ieee754_pow+0x92>
   d8d5c:	f1be 0f00 	cmp.w	lr, #0
   d8d60:	f47f ab2a 	bne.w	d83b8 <__ieee754_pow+0xa8>
   d8d64:	f1c3 0314 	rsb	r3, r3, #20
   d8d68:	fa48 f203 	asr.w	r2, r8, r3
   d8d6c:	fa02 f303 	lsl.w	r3, r2, r3
   d8d70:	4598      	cmp	r8, r3
   d8d72:	d027      	beq.n	d8dc4 <__ieee754_pow+0xab4>
   d8d74:	46f3      	mov	fp, lr
   d8d76:	f7ff baf7 	b.w	d8368 <__ieee754_pow+0x58>
   d8d7a:	4b28      	ldr	r3, [pc, #160]	; (d8e1c <__ieee754_pow+0xb0c>)
   d8d7c:	4598      	cmp	r8, r3
   d8d7e:	f73f adde 	bgt.w	d893e <__ieee754_pow+0x62e>
   d8d82:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8d86:	469a      	mov	sl, r3
   d8d88:	469b      	mov	fp, r3
   d8d8a:	e607      	b.n	d899c <__ieee754_pow+0x68c>
   d8d8c:	4602      	mov	r2, r0
   d8d8e:	460b      	mov	r3, r1
   d8d90:	f7ff bb89 	b.w	d84a6 <__ieee754_pow+0x196>
   d8d94:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8df8 <__ieee754_pow+0xae8>
   d8d98:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8d9c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8e00 <__ieee754_pow+0xaf0>
   d8da0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8da4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8e08 <__ieee754_pow+0xaf8>
   d8da8:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d8dac:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8db0:	f7ff bbd4 	b.w	d855c <__ieee754_pow+0x24c>
   d8db4:	4658      	mov	r0, fp
   d8db6:	ec43 2b10 	vmov	d0, r2, r3
   d8dba:	f000 f9b1 	bl	d9120 <scalbn>
   d8dbe:	ec51 0b10 	vmov	r0, r1, d0
   d8dc2:	e69d      	b.n	d8b00 <__ieee754_pow+0x7f0>
   d8dc4:	f002 0201 	and.w	r2, r2, #1
   d8dc8:	f1c2 0b02 	rsb	fp, r2, #2
   d8dcc:	f7ff bacc 	b.w	d8368 <__ieee754_pow+0x58>
   d8dd0:	60000000 	.word	0x60000000
   d8dd4:	3ff71547 	.word	0x3ff71547
   d8dd8:	f85ddf44 	.word	0xf85ddf44
   d8ddc:	3e54ae0b 	.word	0x3e54ae0b
   d8de0:	55555555 	.word	0x55555555
   d8de4:	3fd55555 	.word	0x3fd55555
   d8de8:	652b82fe 	.word	0x652b82fe
   d8dec:	3ff71547 	.word	0x3ff71547
   d8df0:	8800759c 	.word	0x8800759c
   d8df4:	7e37e43c 	.word	0x7e37e43c
   d8df8:	40000000 	.word	0x40000000
   d8dfc:	3fe2b803 	.word	0x3fe2b803
   d8e00:	43cfd006 	.word	0x43cfd006
   d8e04:	3e4cfdeb 	.word	0x3e4cfdeb
   d8e08:	00000000 	.word	0x00000000
   d8e0c:	3ff80000 	.word	0x3ff80000
   d8e10:	3feffffe 	.word	0x3feffffe
   d8e14:	3ff00000 	.word	0x3ff00000
   d8e18:	3fd00000 	.word	0x3fd00000
   d8e1c:	3fe00000 	.word	0x3fe00000

000d8e20 <__ieee754_sqrt>:
   d8e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e24:	4965      	ldr	r1, [pc, #404]	; (d8fbc <__ieee754_sqrt+0x19c>)
   d8e26:	ec55 4b10 	vmov	r4, r5, d0
   d8e2a:	460e      	mov	r6, r1
   d8e2c:	4029      	ands	r1, r5
   d8e2e:	42b1      	cmp	r1, r6
   d8e30:	f000 8097 	beq.w	d8f62 <__ieee754_sqrt+0x142>
   d8e34:	2d00      	cmp	r5, #0
   d8e36:	462b      	mov	r3, r5
   d8e38:	ee10 2a10 	vmov	r2, s0
   d8e3c:	dd74      	ble.n	d8f28 <__ieee754_sqrt+0x108>
   d8e3e:	152f      	asrs	r7, r5, #20
   d8e40:	d07f      	beq.n	d8f42 <__ieee754_sqrt+0x122>
   d8e42:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d8e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8e4a:	07f9      	lsls	r1, r7, #31
   d8e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8e50:	d465      	bmi.n	d8f1e <__ieee754_sqrt+0xfe>
   d8e52:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d8e56:	2600      	movs	r6, #0
   d8e58:	440b      	add	r3, r1
   d8e5a:	107f      	asrs	r7, r7, #1
   d8e5c:	0052      	lsls	r2, r2, #1
   d8e5e:	46b6      	mov	lr, r6
   d8e60:	2016      	movs	r0, #22
   d8e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d8e66:	eb0e 0401 	add.w	r4, lr, r1
   d8e6a:	429c      	cmp	r4, r3
   d8e6c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8e70:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8e74:	dc03      	bgt.n	d8e7e <__ieee754_sqrt+0x5e>
   d8e76:	1b1b      	subs	r3, r3, r4
   d8e78:	eb04 0e01 	add.w	lr, r4, r1
   d8e7c:	440e      	add	r6, r1
   d8e7e:	3801      	subs	r0, #1
   d8e80:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8e84:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8e88:	d1ed      	bne.n	d8e66 <__ieee754_sqrt+0x46>
   d8e8a:	4684      	mov	ip, r0
   d8e8c:	2420      	movs	r4, #32
   d8e8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8e92:	e009      	b.n	d8ea8 <__ieee754_sqrt+0x88>
   d8e94:	d020      	beq.n	d8ed8 <__ieee754_sqrt+0xb8>
   d8e96:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8e9a:	3c01      	subs	r4, #1
   d8e9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8ea0:	442b      	add	r3, r5
   d8ea2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8ea6:	d020      	beq.n	d8eea <__ieee754_sqrt+0xca>
   d8ea8:	459e      	cmp	lr, r3
   d8eaa:	eb01 050c 	add.w	r5, r1, ip
   d8eae:	daf1      	bge.n	d8e94 <__ieee754_sqrt+0x74>
   d8eb0:	2d00      	cmp	r5, #0
   d8eb2:	eb05 0c01 	add.w	ip, r5, r1
   d8eb6:	db09      	blt.n	d8ecc <__ieee754_sqrt+0xac>
   d8eb8:	46f0      	mov	r8, lr
   d8eba:	4295      	cmp	r5, r2
   d8ebc:	ebce 0303 	rsb	r3, lr, r3
   d8ec0:	d900      	bls.n	d8ec4 <__ieee754_sqrt+0xa4>
   d8ec2:	3b01      	subs	r3, #1
   d8ec4:	1b52      	subs	r2, r2, r5
   d8ec6:	4408      	add	r0, r1
   d8ec8:	46c6      	mov	lr, r8
   d8eca:	e7e4      	b.n	d8e96 <__ieee754_sqrt+0x76>
   d8ecc:	f1bc 0f00 	cmp.w	ip, #0
   d8ed0:	dbf2      	blt.n	d8eb8 <__ieee754_sqrt+0x98>
   d8ed2:	f10e 0801 	add.w	r8, lr, #1
   d8ed6:	e7f0      	b.n	d8eba <__ieee754_sqrt+0x9a>
   d8ed8:	4295      	cmp	r5, r2
   d8eda:	d81e      	bhi.n	d8f1a <__ieee754_sqrt+0xfa>
   d8edc:	2d00      	cmp	r5, #0
   d8ede:	eb05 0c01 	add.w	ip, r5, r1
   d8ee2:	db50      	blt.n	d8f86 <__ieee754_sqrt+0x166>
   d8ee4:	4698      	mov	r8, r3
   d8ee6:	2300      	movs	r3, #0
   d8ee8:	e7ec      	b.n	d8ec4 <__ieee754_sqrt+0xa4>
   d8eea:	4313      	orrs	r3, r2
   d8eec:	d004      	beq.n	d8ef8 <__ieee754_sqrt+0xd8>
   d8eee:	1c42      	adds	r2, r0, #1
   d8ef0:	d04d      	beq.n	d8f8e <__ieee754_sqrt+0x16e>
   d8ef2:	f000 0301 	and.w	r3, r0, #1
   d8ef6:	4418      	add	r0, r3
   d8ef8:	0840      	lsrs	r0, r0, #1
   d8efa:	1071      	asrs	r1, r6, #1
   d8efc:	07f3      	lsls	r3, r6, #31
   d8efe:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8f02:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8f06:	bf48      	it	mi
   d8f08:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d8f0c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8f10:	4602      	mov	r2, r0
   d8f12:	ec43 2b10 	vmov	d0, r2, r3
   d8f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f1a:	4673      	mov	r3, lr
   d8f1c:	e7bb      	b.n	d8e96 <__ieee754_sqrt+0x76>
   d8f1e:	005b      	lsls	r3, r3, #1
   d8f20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8f24:	0052      	lsls	r2, r2, #1
   d8f26:	e794      	b.n	d8e52 <__ieee754_sqrt+0x32>
   d8f28:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8f2c:	4321      	orrs	r1, r4
   d8f2e:	d028      	beq.n	d8f82 <__ieee754_sqrt+0x162>
   d8f30:	bbad      	cbnz	r5, d8f9e <__ieee754_sqrt+0x17e>
   d8f32:	462f      	mov	r7, r5
   d8f34:	0ad3      	lsrs	r3, r2, #11
   d8f36:	3f15      	subs	r7, #21
   d8f38:	0552      	lsls	r2, r2, #21
   d8f3a:	2b00      	cmp	r3, #0
   d8f3c:	d0fa      	beq.n	d8f34 <__ieee754_sqrt+0x114>
   d8f3e:	02dd      	lsls	r5, r3, #11
   d8f40:	d428      	bmi.n	d8f94 <__ieee754_sqrt+0x174>
   d8f42:	2100      	movs	r1, #0
   d8f44:	e000      	b.n	d8f48 <__ieee754_sqrt+0x128>
   d8f46:	4601      	mov	r1, r0
   d8f48:	005b      	lsls	r3, r3, #1
   d8f4a:	02dc      	lsls	r4, r3, #11
   d8f4c:	f101 0001 	add.w	r0, r1, #1
   d8f50:	d5f9      	bpl.n	d8f46 <__ieee754_sqrt+0x126>
   d8f52:	f1c0 0420 	rsb	r4, r0, #32
   d8f56:	fa22 f404 	lsr.w	r4, r2, r4
   d8f5a:	4323      	orrs	r3, r4
   d8f5c:	1a7f      	subs	r7, r7, r1
   d8f5e:	4082      	lsls	r2, r0
   d8f60:	e76f      	b.n	d8e42 <__ieee754_sqrt+0x22>
   d8f62:	ee10 2a10 	vmov	r2, s0
   d8f66:	462b      	mov	r3, r5
   d8f68:	ee10 0a10 	vmov	r0, s0
   d8f6c:	4629      	mov	r1, r5
   d8f6e:	f000 fb23 	bl	d95b8 <__aeabi_dmul>
   d8f72:	4622      	mov	r2, r4
   d8f74:	462b      	mov	r3, r5
   d8f76:	f000 f96d 	bl	d9254 <__adddf3>
   d8f7a:	ec41 0b10 	vmov	d0, r0, r1
   d8f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f86:	f1bc 0f00 	cmp.w	ip, #0
   d8f8a:	daa2      	bge.n	d8ed2 <__ieee754_sqrt+0xb2>
   d8f8c:	e7aa      	b.n	d8ee4 <__ieee754_sqrt+0xc4>
   d8f8e:	3601      	adds	r6, #1
   d8f90:	4620      	mov	r0, r4
   d8f92:	e7b2      	b.n	d8efa <__ieee754_sqrt+0xda>
   d8f94:	2420      	movs	r4, #32
   d8f96:	f04f 31ff 	mov.w	r1, #4294967295
   d8f9a:	2000      	movs	r0, #0
   d8f9c:	e7db      	b.n	d8f56 <__ieee754_sqrt+0x136>
   d8f9e:	ee10 2a10 	vmov	r2, s0
   d8fa2:	462b      	mov	r3, r5
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	4629      	mov	r1, r5
   d8fa8:	f000 f952 	bl	d9250 <__aeabi_dsub>
   d8fac:	4602      	mov	r2, r0
   d8fae:	460b      	mov	r3, r1
   d8fb0:	f000 fc2c 	bl	d980c <__aeabi_ddiv>
   d8fb4:	ec41 0b10 	vmov	d0, r0, r1
   d8fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fbc:	7ff00000 	.word	0x7ff00000

000d8fc0 <fabs>:
   d8fc0:	ec53 2b10 	vmov	r2, r3, d0
   d8fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8fc8:	ec43 2b10 	vmov	d0, r2, r3
   d8fcc:	4770      	bx	lr
   d8fce:	bf00      	nop

000d8fd0 <finite>:
   d8fd0:	ee10 3a90 	vmov	r3, s1
   d8fd4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8fd8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8fdc:	0fc0      	lsrs	r0, r0, #31
   d8fde:	4770      	bx	lr

000d8fe0 <matherr>:
   d8fe0:	2000      	movs	r0, #0
   d8fe2:	4770      	bx	lr
   d8fe4:	0000      	movs	r0, r0
	...

000d8fe8 <nan>:
   d8fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8ff0 <nan+0x8>
   d8fec:	4770      	bx	lr
   d8fee:	bf00      	nop
   d8ff0:	00000000 	.word	0x00000000
   d8ff4:	7ff80000 	.word	0x7ff80000

000d8ff8 <rint>:
   d8ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ffa:	ec53 2b10 	vmov	r2, r3, d0
   d8ffe:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d9002:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d9006:	2813      	cmp	r0, #19
   d9008:	b083      	sub	sp, #12
   d900a:	4619      	mov	r1, r3
   d900c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d9010:	ee10 5a10 	vmov	r5, s0
   d9014:	dc2f      	bgt.n	d9076 <rint+0x7e>
   d9016:	2800      	cmp	r0, #0
   d9018:	db49      	blt.n	d90ae <rint+0xb6>
   d901a:	4e3f      	ldr	r6, [pc, #252]	; (d9118 <rint+0x120>)
   d901c:	4106      	asrs	r6, r0
   d901e:	ea03 0706 	and.w	r7, r3, r6
   d9022:	4317      	orrs	r7, r2
   d9024:	d02c      	beq.n	d9080 <rint+0x88>
   d9026:	0876      	lsrs	r6, r6, #1
   d9028:	4033      	ands	r3, r6
   d902a:	431d      	orrs	r5, r3
   d902c:	d00c      	beq.n	d9048 <rint+0x50>
   d902e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d9032:	2813      	cmp	r0, #19
   d9034:	ea21 0606 	bic.w	r6, r1, r6
   d9038:	fa43 f100 	asr.w	r1, r3, r0
   d903c:	ea41 0106 	orr.w	r1, r1, r6
   d9040:	bf0c      	ite	eq
   d9042:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9046:	2500      	movne	r5, #0
   d9048:	4834      	ldr	r0, [pc, #208]	; (d911c <rint+0x124>)
   d904a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d904e:	462a      	mov	r2, r5
   d9050:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9054:	4610      	mov	r0, r2
   d9056:	462b      	mov	r3, r5
   d9058:	4622      	mov	r2, r4
   d905a:	f000 f8fb 	bl	d9254 <__adddf3>
   d905e:	e9cd 0100 	strd	r0, r1, [sp]
   d9062:	4622      	mov	r2, r4
   d9064:	462b      	mov	r3, r5
   d9066:	e9dd 0100 	ldrd	r0, r1, [sp]
   d906a:	f000 f8f1 	bl	d9250 <__aeabi_dsub>
   d906e:	ec41 0b10 	vmov	d0, r0, r1
   d9072:	b003      	add	sp, #12
   d9074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9076:	2833      	cmp	r0, #51	; 0x33
   d9078:	dd06      	ble.n	d9088 <rint+0x90>
   d907a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d907e:	d042      	beq.n	d9106 <rint+0x10e>
   d9080:	ec43 2b10 	vmov	d0, r2, r3
   d9084:	b003      	add	sp, #12
   d9086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9088:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d908c:	f04f 30ff 	mov.w	r0, #4294967295
   d9090:	40f0      	lsrs	r0, r6
   d9092:	4202      	tst	r2, r0
   d9094:	d0f4      	beq.n	d9080 <rint+0x88>
   d9096:	0840      	lsrs	r0, r0, #1
   d9098:	4202      	tst	r2, r0
   d909a:	d0d5      	beq.n	d9048 <rint+0x50>
   d909c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d90a0:	ea25 0000 	bic.w	r0, r5, r0
   d90a4:	fa43 f606 	asr.w	r6, r3, r6
   d90a8:	ea46 0500 	orr.w	r5, r6, r0
   d90ac:	e7cc      	b.n	d9048 <rint+0x50>
   d90ae:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d90b2:	4310      	orrs	r0, r2
   d90b4:	ee10 7a10 	vmov	r7, s0
   d90b8:	d0e2      	beq.n	d9080 <rint+0x88>
   d90ba:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d90be:	4307      	orrs	r7, r0
   d90c0:	4278      	negs	r0, r7
   d90c2:	4307      	orrs	r7, r0
   d90c4:	4815      	ldr	r0, [pc, #84]	; (d911c <rint+0x124>)
   d90c6:	0c59      	lsrs	r1, r3, #17
   d90c8:	0b3f      	lsrs	r7, r7, #12
   d90ca:	0449      	lsls	r1, r1, #17
   d90cc:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d90d0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d90d4:	ea47 0301 	orr.w	r3, r7, r1
   d90d8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d90dc:	4619      	mov	r1, r3
   d90de:	4610      	mov	r0, r2
   d90e0:	463b      	mov	r3, r7
   d90e2:	4632      	mov	r2, r6
   d90e4:	f000 f8b6 	bl	d9254 <__adddf3>
   d90e8:	e9cd 0100 	strd	r0, r1, [sp]
   d90ec:	463b      	mov	r3, r7
   d90ee:	4632      	mov	r2, r6
   d90f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d90f4:	f000 f8ac 	bl	d9250 <__aeabi_dsub>
   d90f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d90fc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d9100:	ec41 0b10 	vmov	d0, r0, r1
   d9104:	e7be      	b.n	d9084 <rint+0x8c>
   d9106:	ee10 0a10 	vmov	r0, s0
   d910a:	4619      	mov	r1, r3
   d910c:	f000 f8a2 	bl	d9254 <__adddf3>
   d9110:	ec41 0b10 	vmov	d0, r0, r1
   d9114:	e7b6      	b.n	d9084 <rint+0x8c>
   d9116:	bf00      	nop
   d9118:	000fffff 	.word	0x000fffff
   d911c:	000dc590 	.word	0x000dc590

000d9120 <scalbn>:
   d9120:	ec53 2b10 	vmov	r2, r3, d0
   d9124:	b570      	push	{r4, r5, r6, lr}
   d9126:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d912a:	4619      	mov	r1, r3
   d912c:	4605      	mov	r5, r0
   d912e:	bb14      	cbnz	r4, d9176 <scalbn+0x56>
   d9130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9134:	4311      	orrs	r1, r2
   d9136:	d02a      	beq.n	d918e <scalbn+0x6e>
   d9138:	4619      	mov	r1, r3
   d913a:	2200      	movs	r2, #0
   d913c:	4b38      	ldr	r3, [pc, #224]	; (d9220 <scalbn+0x100>)
   d913e:	4e39      	ldr	r6, [pc, #228]	; (d9224 <scalbn+0x104>)
   d9140:	ee10 0a10 	vmov	r0, s0
   d9144:	f000 fa38 	bl	d95b8 <__aeabi_dmul>
   d9148:	42b5      	cmp	r5, r6
   d914a:	4602      	mov	r2, r0
   d914c:	460b      	mov	r3, r1
   d914e:	db1f      	blt.n	d9190 <scalbn+0x70>
   d9150:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d9154:	3c36      	subs	r4, #54	; 0x36
   d9156:	442c      	add	r4, r5
   d9158:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d915c:	4284      	cmp	r4, r0
   d915e:	dc1f      	bgt.n	d91a0 <scalbn+0x80>
   d9160:	2c00      	cmp	r4, #0
   d9162:	dd2d      	ble.n	d91c0 <scalbn+0xa0>
   d9164:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9168:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d916c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9170:	ec43 2b10 	vmov	d0, r2, r3
   d9174:	bd70      	pop	{r4, r5, r6, pc}
   d9176:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d917a:	4284      	cmp	r4, r0
   d917c:	d1eb      	bne.n	d9156 <scalbn+0x36>
   d917e:	ee10 0a10 	vmov	r0, s0
   d9182:	4619      	mov	r1, r3
   d9184:	f000 f866 	bl	d9254 <__adddf3>
   d9188:	ec41 0b10 	vmov	d0, r0, r1
   d918c:	bd70      	pop	{r4, r5, r6, pc}
   d918e:	bd70      	pop	{r4, r5, r6, pc}
   d9190:	a31f      	add	r3, pc, #124	; (adr r3, d9210 <scalbn+0xf0>)
   d9192:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9196:	f000 fa0f 	bl	d95b8 <__aeabi_dmul>
   d919a:	ec41 0b10 	vmov	d0, r0, r1
   d919e:	bd70      	pop	{r4, r5, r6, pc}
   d91a0:	ec43 2b11 	vmov	d1, r2, r3
   d91a4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d9218 <scalbn+0xf8>
   d91a8:	f000 f840 	bl	d922c <copysign>
   d91ac:	a31a      	add	r3, pc, #104	; (adr r3, d9218 <scalbn+0xf8>)
   d91ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91b2:	ec51 0b10 	vmov	r0, r1, d0
   d91b6:	f000 f9ff 	bl	d95b8 <__aeabi_dmul>
   d91ba:	ec41 0b10 	vmov	d0, r0, r1
   d91be:	bd70      	pop	{r4, r5, r6, pc}
   d91c0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d91c4:	da13      	bge.n	d91ee <scalbn+0xce>
   d91c6:	f24c 3150 	movw	r1, #50000	; 0xc350
   d91ca:	428d      	cmp	r5, r1
   d91cc:	ec43 2b11 	vmov	d1, r2, r3
   d91d0:	dce8      	bgt.n	d91a4 <scalbn+0x84>
   d91d2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d9210 <scalbn+0xf0>
   d91d6:	f000 f829 	bl	d922c <copysign>
   d91da:	a30d      	add	r3, pc, #52	; (adr r3, d9210 <scalbn+0xf0>)
   d91dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91e0:	ec51 0b10 	vmov	r0, r1, d0
   d91e4:	f000 f9e8 	bl	d95b8 <__aeabi_dmul>
   d91e8:	ec41 0b10 	vmov	d0, r0, r1
   d91ec:	bd70      	pop	{r4, r5, r6, pc}
   d91ee:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d91f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d91f6:	3436      	adds	r4, #54	; 0x36
   d91f8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d91fc:	4610      	mov	r0, r2
   d91fe:	4619      	mov	r1, r3
   d9200:	2200      	movs	r2, #0
   d9202:	4b09      	ldr	r3, [pc, #36]	; (d9228 <scalbn+0x108>)
   d9204:	f000 f9d8 	bl	d95b8 <__aeabi_dmul>
   d9208:	ec41 0b10 	vmov	d0, r0, r1
   d920c:	bd70      	pop	{r4, r5, r6, pc}
   d920e:	bf00      	nop
   d9210:	c2f8f359 	.word	0xc2f8f359
   d9214:	01a56e1f 	.word	0x01a56e1f
   d9218:	8800759c 	.word	0x8800759c
   d921c:	7e37e43c 	.word	0x7e37e43c
   d9220:	43500000 	.word	0x43500000
   d9224:	ffff3cb0 	.word	0xffff3cb0
   d9228:	3c900000 	.word	0x3c900000

000d922c <copysign>:
   d922c:	ec53 2b10 	vmov	r2, r3, d0
   d9230:	ee11 0a90 	vmov	r0, s3
   d9234:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9238:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d923c:	ea41 0300 	orr.w	r3, r1, r0
   d9240:	ec43 2b10 	vmov	d0, r2, r3
   d9244:	4770      	bx	lr
   d9246:	bf00      	nop

000d9248 <__aeabi_drsub>:
   d9248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d924c:	e002      	b.n	d9254 <__adddf3>
   d924e:	bf00      	nop

000d9250 <__aeabi_dsub>:
   d9250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9254 <__adddf3>:
   d9254:	b530      	push	{r4, r5, lr}
   d9256:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d925a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d925e:	ea94 0f05 	teq	r4, r5
   d9262:	bf08      	it	eq
   d9264:	ea90 0f02 	teqeq	r0, r2
   d9268:	bf1f      	itttt	ne
   d926a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d926e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d927a:	f000 80e2 	beq.w	d9442 <__adddf3+0x1ee>
   d927e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9286:	bfb8      	it	lt
   d9288:	426d      	neglt	r5, r5
   d928a:	dd0c      	ble.n	d92a6 <__adddf3+0x52>
   d928c:	442c      	add	r4, r5
   d928e:	ea80 0202 	eor.w	r2, r0, r2
   d9292:	ea81 0303 	eor.w	r3, r1, r3
   d9296:	ea82 0000 	eor.w	r0, r2, r0
   d929a:	ea83 0101 	eor.w	r1, r3, r1
   d929e:	ea80 0202 	eor.w	r2, r0, r2
   d92a2:	ea81 0303 	eor.w	r3, r1, r3
   d92a6:	2d36      	cmp	r5, #54	; 0x36
   d92a8:	bf88      	it	hi
   d92aa:	bd30      	pophi	{r4, r5, pc}
   d92ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d92b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d92b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d92b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d92bc:	d002      	beq.n	d92c4 <__adddf3+0x70>
   d92be:	4240      	negs	r0, r0
   d92c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d92c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d92c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d92cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d92d0:	d002      	beq.n	d92d8 <__adddf3+0x84>
   d92d2:	4252      	negs	r2, r2
   d92d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d92d8:	ea94 0f05 	teq	r4, r5
   d92dc:	f000 80a7 	beq.w	d942e <__adddf3+0x1da>
   d92e0:	f1a4 0401 	sub.w	r4, r4, #1
   d92e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d92e8:	db0d      	blt.n	d9306 <__adddf3+0xb2>
   d92ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d92ee:	fa22 f205 	lsr.w	r2, r2, r5
   d92f2:	1880      	adds	r0, r0, r2
   d92f4:	f141 0100 	adc.w	r1, r1, #0
   d92f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d92fc:	1880      	adds	r0, r0, r2
   d92fe:	fa43 f305 	asr.w	r3, r3, r5
   d9302:	4159      	adcs	r1, r3
   d9304:	e00e      	b.n	d9324 <__adddf3+0xd0>
   d9306:	f1a5 0520 	sub.w	r5, r5, #32
   d930a:	f10e 0e20 	add.w	lr, lr, #32
   d930e:	2a01      	cmp	r2, #1
   d9310:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9314:	bf28      	it	cs
   d9316:	f04c 0c02 	orrcs.w	ip, ip, #2
   d931a:	fa43 f305 	asr.w	r3, r3, r5
   d931e:	18c0      	adds	r0, r0, r3
   d9320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9328:	d507      	bpl.n	d933a <__adddf3+0xe6>
   d932a:	f04f 0e00 	mov.w	lr, #0
   d932e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9332:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9336:	eb6e 0101 	sbc.w	r1, lr, r1
   d933a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d933e:	d31b      	bcc.n	d9378 <__adddf3+0x124>
   d9340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9344:	d30c      	bcc.n	d9360 <__adddf3+0x10c>
   d9346:	0849      	lsrs	r1, r1, #1
   d9348:	ea5f 0030 	movs.w	r0, r0, rrx
   d934c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9350:	f104 0401 	add.w	r4, r4, #1
   d9354:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d935c:	f080 809a 	bcs.w	d9494 <__adddf3+0x240>
   d9360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9364:	bf08      	it	eq
   d9366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d936a:	f150 0000 	adcs.w	r0, r0, #0
   d936e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9372:	ea41 0105 	orr.w	r1, r1, r5
   d9376:	bd30      	pop	{r4, r5, pc}
   d9378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d937c:	4140      	adcs	r0, r0
   d937e:	eb41 0101 	adc.w	r1, r1, r1
   d9382:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9386:	f1a4 0401 	sub.w	r4, r4, #1
   d938a:	d1e9      	bne.n	d9360 <__adddf3+0x10c>
   d938c:	f091 0f00 	teq	r1, #0
   d9390:	bf04      	itt	eq
   d9392:	4601      	moveq	r1, r0
   d9394:	2000      	moveq	r0, #0
   d9396:	fab1 f381 	clz	r3, r1
   d939a:	bf08      	it	eq
   d939c:	3320      	addeq	r3, #32
   d939e:	f1a3 030b 	sub.w	r3, r3, #11
   d93a2:	f1b3 0220 	subs.w	r2, r3, #32
   d93a6:	da0c      	bge.n	d93c2 <__adddf3+0x16e>
   d93a8:	320c      	adds	r2, #12
   d93aa:	dd08      	ble.n	d93be <__adddf3+0x16a>
   d93ac:	f102 0c14 	add.w	ip, r2, #20
   d93b0:	f1c2 020c 	rsb	r2, r2, #12
   d93b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d93b8:	fa21 f102 	lsr.w	r1, r1, r2
   d93bc:	e00c      	b.n	d93d8 <__adddf3+0x184>
   d93be:	f102 0214 	add.w	r2, r2, #20
   d93c2:	bfd8      	it	le
   d93c4:	f1c2 0c20 	rsble	ip, r2, #32
   d93c8:	fa01 f102 	lsl.w	r1, r1, r2
   d93cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d93d0:	bfdc      	itt	le
   d93d2:	ea41 010c 	orrle.w	r1, r1, ip
   d93d6:	4090      	lslle	r0, r2
   d93d8:	1ae4      	subs	r4, r4, r3
   d93da:	bfa2      	ittt	ge
   d93dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d93e0:	4329      	orrge	r1, r5
   d93e2:	bd30      	popge	{r4, r5, pc}
   d93e4:	ea6f 0404 	mvn.w	r4, r4
   d93e8:	3c1f      	subs	r4, #31
   d93ea:	da1c      	bge.n	d9426 <__adddf3+0x1d2>
   d93ec:	340c      	adds	r4, #12
   d93ee:	dc0e      	bgt.n	d940e <__adddf3+0x1ba>
   d93f0:	f104 0414 	add.w	r4, r4, #20
   d93f4:	f1c4 0220 	rsb	r2, r4, #32
   d93f8:	fa20 f004 	lsr.w	r0, r0, r4
   d93fc:	fa01 f302 	lsl.w	r3, r1, r2
   d9400:	ea40 0003 	orr.w	r0, r0, r3
   d9404:	fa21 f304 	lsr.w	r3, r1, r4
   d9408:	ea45 0103 	orr.w	r1, r5, r3
   d940c:	bd30      	pop	{r4, r5, pc}
   d940e:	f1c4 040c 	rsb	r4, r4, #12
   d9412:	f1c4 0220 	rsb	r2, r4, #32
   d9416:	fa20 f002 	lsr.w	r0, r0, r2
   d941a:	fa01 f304 	lsl.w	r3, r1, r4
   d941e:	ea40 0003 	orr.w	r0, r0, r3
   d9422:	4629      	mov	r1, r5
   d9424:	bd30      	pop	{r4, r5, pc}
   d9426:	fa21 f004 	lsr.w	r0, r1, r4
   d942a:	4629      	mov	r1, r5
   d942c:	bd30      	pop	{r4, r5, pc}
   d942e:	f094 0f00 	teq	r4, #0
   d9432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9436:	bf06      	itte	eq
   d9438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d943c:	3401      	addeq	r4, #1
   d943e:	3d01      	subne	r5, #1
   d9440:	e74e      	b.n	d92e0 <__adddf3+0x8c>
   d9442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9446:	bf18      	it	ne
   d9448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d944c:	d029      	beq.n	d94a2 <__adddf3+0x24e>
   d944e:	ea94 0f05 	teq	r4, r5
   d9452:	bf08      	it	eq
   d9454:	ea90 0f02 	teqeq	r0, r2
   d9458:	d005      	beq.n	d9466 <__adddf3+0x212>
   d945a:	ea54 0c00 	orrs.w	ip, r4, r0
   d945e:	bf04      	itt	eq
   d9460:	4619      	moveq	r1, r3
   d9462:	4610      	moveq	r0, r2
   d9464:	bd30      	pop	{r4, r5, pc}
   d9466:	ea91 0f03 	teq	r1, r3
   d946a:	bf1e      	ittt	ne
   d946c:	2100      	movne	r1, #0
   d946e:	2000      	movne	r0, #0
   d9470:	bd30      	popne	{r4, r5, pc}
   d9472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9476:	d105      	bne.n	d9484 <__adddf3+0x230>
   d9478:	0040      	lsls	r0, r0, #1
   d947a:	4149      	adcs	r1, r1
   d947c:	bf28      	it	cs
   d947e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9482:	bd30      	pop	{r4, r5, pc}
   d9484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9488:	bf3c      	itt	cc
   d948a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d948e:	bd30      	popcc	{r4, r5, pc}
   d9490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d949c:	f04f 0000 	mov.w	r0, #0
   d94a0:	bd30      	pop	{r4, r5, pc}
   d94a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d94a6:	bf1a      	itte	ne
   d94a8:	4619      	movne	r1, r3
   d94aa:	4610      	movne	r0, r2
   d94ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d94b0:	bf1c      	itt	ne
   d94b2:	460b      	movne	r3, r1
   d94b4:	4602      	movne	r2, r0
   d94b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d94ba:	bf06      	itte	eq
   d94bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d94c0:	ea91 0f03 	teqeq	r1, r3
   d94c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d94c8:	bd30      	pop	{r4, r5, pc}
   d94ca:	bf00      	nop

000d94cc <__aeabi_ui2d>:
   d94cc:	f090 0f00 	teq	r0, #0
   d94d0:	bf04      	itt	eq
   d94d2:	2100      	moveq	r1, #0
   d94d4:	4770      	bxeq	lr
   d94d6:	b530      	push	{r4, r5, lr}
   d94d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94e0:	f04f 0500 	mov.w	r5, #0
   d94e4:	f04f 0100 	mov.w	r1, #0
   d94e8:	e750      	b.n	d938c <__adddf3+0x138>
   d94ea:	bf00      	nop

000d94ec <__aeabi_i2d>:
   d94ec:	f090 0f00 	teq	r0, #0
   d94f0:	bf04      	itt	eq
   d94f2:	2100      	moveq	r1, #0
   d94f4:	4770      	bxeq	lr
   d94f6:	b530      	push	{r4, r5, lr}
   d94f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9504:	bf48      	it	mi
   d9506:	4240      	negmi	r0, r0
   d9508:	f04f 0100 	mov.w	r1, #0
   d950c:	e73e      	b.n	d938c <__adddf3+0x138>
   d950e:	bf00      	nop

000d9510 <__aeabi_f2d>:
   d9510:	0042      	lsls	r2, r0, #1
   d9512:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9516:	ea4f 0131 	mov.w	r1, r1, rrx
   d951a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d951e:	bf1f      	itttt	ne
   d9520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d952c:	4770      	bxne	lr
   d952e:	f092 0f00 	teq	r2, #0
   d9532:	bf14      	ite	ne
   d9534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9538:	4770      	bxeq	lr
   d953a:	b530      	push	{r4, r5, lr}
   d953c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9548:	e720      	b.n	d938c <__adddf3+0x138>
   d954a:	bf00      	nop

000d954c <__aeabi_ul2d>:
   d954c:	ea50 0201 	orrs.w	r2, r0, r1
   d9550:	bf08      	it	eq
   d9552:	4770      	bxeq	lr
   d9554:	b530      	push	{r4, r5, lr}
   d9556:	f04f 0500 	mov.w	r5, #0
   d955a:	e00a      	b.n	d9572 <__aeabi_l2d+0x16>

000d955c <__aeabi_l2d>:
   d955c:	ea50 0201 	orrs.w	r2, r0, r1
   d9560:	bf08      	it	eq
   d9562:	4770      	bxeq	lr
   d9564:	b530      	push	{r4, r5, lr}
   d9566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d956a:	d502      	bpl.n	d9572 <__aeabi_l2d+0x16>
   d956c:	4240      	negs	r0, r0
   d956e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d957a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d957e:	f43f aedc 	beq.w	d933a <__adddf3+0xe6>
   d9582:	f04f 0203 	mov.w	r2, #3
   d9586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d958a:	bf18      	it	ne
   d958c:	3203      	addne	r2, #3
   d958e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9592:	bf18      	it	ne
   d9594:	3203      	addne	r2, #3
   d9596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d959a:	f1c2 0320 	rsb	r3, r2, #32
   d959e:	fa00 fc03 	lsl.w	ip, r0, r3
   d95a2:	fa20 f002 	lsr.w	r0, r0, r2
   d95a6:	fa01 fe03 	lsl.w	lr, r1, r3
   d95aa:	ea40 000e 	orr.w	r0, r0, lr
   d95ae:	fa21 f102 	lsr.w	r1, r1, r2
   d95b2:	4414      	add	r4, r2
   d95b4:	e6c1      	b.n	d933a <__adddf3+0xe6>
   d95b6:	bf00      	nop

000d95b8 <__aeabi_dmul>:
   d95b8:	b570      	push	{r4, r5, r6, lr}
   d95ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d95be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d95c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d95c6:	bf1d      	ittte	ne
   d95c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d95cc:	ea94 0f0c 	teqne	r4, ip
   d95d0:	ea95 0f0c 	teqne	r5, ip
   d95d4:	f000 f8de 	bleq	d9794 <__aeabi_dmul+0x1dc>
   d95d8:	442c      	add	r4, r5
   d95da:	ea81 0603 	eor.w	r6, r1, r3
   d95de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d95e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d95e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d95ea:	bf18      	it	ne
   d95ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d95f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d95f8:	d038      	beq.n	d966c <__aeabi_dmul+0xb4>
   d95fa:	fba0 ce02 	umull	ip, lr, r0, r2
   d95fe:	f04f 0500 	mov.w	r5, #0
   d9602:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d960a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d960e:	f04f 0600 	mov.w	r6, #0
   d9612:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9616:	f09c 0f00 	teq	ip, #0
   d961a:	bf18      	it	ne
   d961c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d962c:	d204      	bcs.n	d9638 <__aeabi_dmul+0x80>
   d962e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9632:	416d      	adcs	r5, r5
   d9634:	eb46 0606 	adc.w	r6, r6, r6
   d9638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d963c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d964c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9650:	bf88      	it	hi
   d9652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9656:	d81e      	bhi.n	d9696 <__aeabi_dmul+0xde>
   d9658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d965c:	bf08      	it	eq
   d965e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9662:	f150 0000 	adcs.w	r0, r0, #0
   d9666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d966a:	bd70      	pop	{r4, r5, r6, pc}
   d966c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9670:	ea46 0101 	orr.w	r1, r6, r1
   d9674:	ea40 0002 	orr.w	r0, r0, r2
   d9678:	ea81 0103 	eor.w	r1, r1, r3
   d967c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9680:	bfc2      	ittt	gt
   d9682:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d968a:	bd70      	popgt	{r4, r5, r6, pc}
   d968c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9690:	f04f 0e00 	mov.w	lr, #0
   d9694:	3c01      	subs	r4, #1
   d9696:	f300 80ab 	bgt.w	d97f0 <__aeabi_dmul+0x238>
   d969a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d969e:	bfde      	ittt	le
   d96a0:	2000      	movle	r0, #0
   d96a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d96a6:	bd70      	pople	{r4, r5, r6, pc}
   d96a8:	f1c4 0400 	rsb	r4, r4, #0
   d96ac:	3c20      	subs	r4, #32
   d96ae:	da35      	bge.n	d971c <__aeabi_dmul+0x164>
   d96b0:	340c      	adds	r4, #12
   d96b2:	dc1b      	bgt.n	d96ec <__aeabi_dmul+0x134>
   d96b4:	f104 0414 	add.w	r4, r4, #20
   d96b8:	f1c4 0520 	rsb	r5, r4, #32
   d96bc:	fa00 f305 	lsl.w	r3, r0, r5
   d96c0:	fa20 f004 	lsr.w	r0, r0, r4
   d96c4:	fa01 f205 	lsl.w	r2, r1, r5
   d96c8:	ea40 0002 	orr.w	r0, r0, r2
   d96cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d96d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d96d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d96d8:	fa21 f604 	lsr.w	r6, r1, r4
   d96dc:	eb42 0106 	adc.w	r1, r2, r6
   d96e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96e4:	bf08      	it	eq
   d96e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96ea:	bd70      	pop	{r4, r5, r6, pc}
   d96ec:	f1c4 040c 	rsb	r4, r4, #12
   d96f0:	f1c4 0520 	rsb	r5, r4, #32
   d96f4:	fa00 f304 	lsl.w	r3, r0, r4
   d96f8:	fa20 f005 	lsr.w	r0, r0, r5
   d96fc:	fa01 f204 	lsl.w	r2, r1, r4
   d9700:	ea40 0002 	orr.w	r0, r0, r2
   d9704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d970c:	f141 0100 	adc.w	r1, r1, #0
   d9710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9714:	bf08      	it	eq
   d9716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d971a:	bd70      	pop	{r4, r5, r6, pc}
   d971c:	f1c4 0520 	rsb	r5, r4, #32
   d9720:	fa00 f205 	lsl.w	r2, r0, r5
   d9724:	ea4e 0e02 	orr.w	lr, lr, r2
   d9728:	fa20 f304 	lsr.w	r3, r0, r4
   d972c:	fa01 f205 	lsl.w	r2, r1, r5
   d9730:	ea43 0302 	orr.w	r3, r3, r2
   d9734:	fa21 f004 	lsr.w	r0, r1, r4
   d9738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d973c:	fa21 f204 	lsr.w	r2, r1, r4
   d9740:	ea20 0002 	bic.w	r0, r0, r2
   d9744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d974c:	bf08      	it	eq
   d974e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9752:	bd70      	pop	{r4, r5, r6, pc}
   d9754:	f094 0f00 	teq	r4, #0
   d9758:	d10f      	bne.n	d977a <__aeabi_dmul+0x1c2>
   d975a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d975e:	0040      	lsls	r0, r0, #1
   d9760:	eb41 0101 	adc.w	r1, r1, r1
   d9764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9768:	bf08      	it	eq
   d976a:	3c01      	subeq	r4, #1
   d976c:	d0f7      	beq.n	d975e <__aeabi_dmul+0x1a6>
   d976e:	ea41 0106 	orr.w	r1, r1, r6
   d9772:	f095 0f00 	teq	r5, #0
   d9776:	bf18      	it	ne
   d9778:	4770      	bxne	lr
   d977a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d977e:	0052      	lsls	r2, r2, #1
   d9780:	eb43 0303 	adc.w	r3, r3, r3
   d9784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9788:	bf08      	it	eq
   d978a:	3d01      	subeq	r5, #1
   d978c:	d0f7      	beq.n	d977e <__aeabi_dmul+0x1c6>
   d978e:	ea43 0306 	orr.w	r3, r3, r6
   d9792:	4770      	bx	lr
   d9794:	ea94 0f0c 	teq	r4, ip
   d9798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d979c:	bf18      	it	ne
   d979e:	ea95 0f0c 	teqne	r5, ip
   d97a2:	d00c      	beq.n	d97be <__aeabi_dmul+0x206>
   d97a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97a8:	bf18      	it	ne
   d97aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97ae:	d1d1      	bne.n	d9754 <__aeabi_dmul+0x19c>
   d97b0:	ea81 0103 	eor.w	r1, r1, r3
   d97b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d97b8:	f04f 0000 	mov.w	r0, #0
   d97bc:	bd70      	pop	{r4, r5, r6, pc}
   d97be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97c2:	bf06      	itte	eq
   d97c4:	4610      	moveq	r0, r2
   d97c6:	4619      	moveq	r1, r3
   d97c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97cc:	d019      	beq.n	d9802 <__aeabi_dmul+0x24a>
   d97ce:	ea94 0f0c 	teq	r4, ip
   d97d2:	d102      	bne.n	d97da <__aeabi_dmul+0x222>
   d97d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d97d8:	d113      	bne.n	d9802 <__aeabi_dmul+0x24a>
   d97da:	ea95 0f0c 	teq	r5, ip
   d97de:	d105      	bne.n	d97ec <__aeabi_dmul+0x234>
   d97e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d97e4:	bf1c      	itt	ne
   d97e6:	4610      	movne	r0, r2
   d97e8:	4619      	movne	r1, r3
   d97ea:	d10a      	bne.n	d9802 <__aeabi_dmul+0x24a>
   d97ec:	ea81 0103 	eor.w	r1, r1, r3
   d97f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d97f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d97f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d97fc:	f04f 0000 	mov.w	r0, #0
   d9800:	bd70      	pop	{r4, r5, r6, pc}
   d9802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d980a:	bd70      	pop	{r4, r5, r6, pc}

000d980c <__aeabi_ddiv>:
   d980c:	b570      	push	{r4, r5, r6, lr}
   d980e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d981a:	bf1d      	ittte	ne
   d981c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9820:	ea94 0f0c 	teqne	r4, ip
   d9824:	ea95 0f0c 	teqne	r5, ip
   d9828:	f000 f8a7 	bleq	d997a <__aeabi_ddiv+0x16e>
   d982c:	eba4 0405 	sub.w	r4, r4, r5
   d9830:	ea81 0e03 	eor.w	lr, r1, r3
   d9834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d983c:	f000 8088 	beq.w	d9950 <__aeabi_ddiv+0x144>
   d9840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d984c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d985c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9864:	429d      	cmp	r5, r3
   d9866:	bf08      	it	eq
   d9868:	4296      	cmpeq	r6, r2
   d986a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d986e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9872:	d202      	bcs.n	d987a <__aeabi_ddiv+0x6e>
   d9874:	085b      	lsrs	r3, r3, #1
   d9876:	ea4f 0232 	mov.w	r2, r2, rrx
   d987a:	1ab6      	subs	r6, r6, r2
   d987c:	eb65 0503 	sbc.w	r5, r5, r3
   d9880:	085b      	lsrs	r3, r3, #1
   d9882:	ea4f 0232 	mov.w	r2, r2, rrx
   d9886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d988a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d988e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9892:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9896:	bf22      	ittt	cs
   d9898:	1ab6      	subcs	r6, r6, r2
   d989a:	4675      	movcs	r5, lr
   d989c:	ea40 000c 	orrcs.w	r0, r0, ip
   d98a0:	085b      	lsrs	r3, r3, #1
   d98a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d98a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d98aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98ae:	bf22      	ittt	cs
   d98b0:	1ab6      	subcs	r6, r6, r2
   d98b2:	4675      	movcs	r5, lr
   d98b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d98b8:	085b      	lsrs	r3, r3, #1
   d98ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d98be:	ebb6 0e02 	subs.w	lr, r6, r2
   d98c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98c6:	bf22      	ittt	cs
   d98c8:	1ab6      	subcs	r6, r6, r2
   d98ca:	4675      	movcs	r5, lr
   d98cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d98d0:	085b      	lsrs	r3, r3, #1
   d98d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d98d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d98da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98de:	bf22      	ittt	cs
   d98e0:	1ab6      	subcs	r6, r6, r2
   d98e2:	4675      	movcs	r5, lr
   d98e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d98e8:	ea55 0e06 	orrs.w	lr, r5, r6
   d98ec:	d018      	beq.n	d9920 <__aeabi_ddiv+0x114>
   d98ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d98f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d98f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d98fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d98fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d990a:	d1c0      	bne.n	d988e <__aeabi_ddiv+0x82>
   d990c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9910:	d10b      	bne.n	d992a <__aeabi_ddiv+0x11e>
   d9912:	ea41 0100 	orr.w	r1, r1, r0
   d9916:	f04f 0000 	mov.w	r0, #0
   d991a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d991e:	e7b6      	b.n	d988e <__aeabi_ddiv+0x82>
   d9920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9924:	bf04      	itt	eq
   d9926:	4301      	orreq	r1, r0
   d9928:	2000      	moveq	r0, #0
   d992a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d992e:	bf88      	it	hi
   d9930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9934:	f63f aeaf 	bhi.w	d9696 <__aeabi_dmul+0xde>
   d9938:	ebb5 0c03 	subs.w	ip, r5, r3
   d993c:	bf04      	itt	eq
   d993e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9946:	f150 0000 	adcs.w	r0, r0, #0
   d994a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d994e:	bd70      	pop	{r4, r5, r6, pc}
   d9950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d995c:	bfc2      	ittt	gt
   d995e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9966:	bd70      	popgt	{r4, r5, r6, pc}
   d9968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d996c:	f04f 0e00 	mov.w	lr, #0
   d9970:	3c01      	subs	r4, #1
   d9972:	e690      	b.n	d9696 <__aeabi_dmul+0xde>
   d9974:	ea45 0e06 	orr.w	lr, r5, r6
   d9978:	e68d      	b.n	d9696 <__aeabi_dmul+0xde>
   d997a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d997e:	ea94 0f0c 	teq	r4, ip
   d9982:	bf08      	it	eq
   d9984:	ea95 0f0c 	teqeq	r5, ip
   d9988:	f43f af3b 	beq.w	d9802 <__aeabi_dmul+0x24a>
   d998c:	ea94 0f0c 	teq	r4, ip
   d9990:	d10a      	bne.n	d99a8 <__aeabi_ddiv+0x19c>
   d9992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9996:	f47f af34 	bne.w	d9802 <__aeabi_dmul+0x24a>
   d999a:	ea95 0f0c 	teq	r5, ip
   d999e:	f47f af25 	bne.w	d97ec <__aeabi_dmul+0x234>
   d99a2:	4610      	mov	r0, r2
   d99a4:	4619      	mov	r1, r3
   d99a6:	e72c      	b.n	d9802 <__aeabi_dmul+0x24a>
   d99a8:	ea95 0f0c 	teq	r5, ip
   d99ac:	d106      	bne.n	d99bc <__aeabi_ddiv+0x1b0>
   d99ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d99b2:	f43f aefd 	beq.w	d97b0 <__aeabi_dmul+0x1f8>
   d99b6:	4610      	mov	r0, r2
   d99b8:	4619      	mov	r1, r3
   d99ba:	e722      	b.n	d9802 <__aeabi_dmul+0x24a>
   d99bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d99c0:	bf18      	it	ne
   d99c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d99c6:	f47f aec5 	bne.w	d9754 <__aeabi_dmul+0x19c>
   d99ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d99ce:	f47f af0d 	bne.w	d97ec <__aeabi_dmul+0x234>
   d99d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d99d6:	f47f aeeb 	bne.w	d97b0 <__aeabi_dmul+0x1f8>
   d99da:	e712      	b.n	d9802 <__aeabi_dmul+0x24a>

000d99dc <__gedf2>:
   d99dc:	f04f 3cff 	mov.w	ip, #4294967295
   d99e0:	e006      	b.n	d99f0 <__cmpdf2+0x4>
   d99e2:	bf00      	nop

000d99e4 <__ledf2>:
   d99e4:	f04f 0c01 	mov.w	ip, #1
   d99e8:	e002      	b.n	d99f0 <__cmpdf2+0x4>
   d99ea:	bf00      	nop

000d99ec <__cmpdf2>:
   d99ec:	f04f 0c01 	mov.w	ip, #1
   d99f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d99f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d99f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a00:	bf18      	it	ne
   d9a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9a06:	d01b      	beq.n	d9a40 <__cmpdf2+0x54>
   d9a08:	b001      	add	sp, #4
   d9a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9a0e:	bf0c      	ite	eq
   d9a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9a14:	ea91 0f03 	teqne	r1, r3
   d9a18:	bf02      	ittt	eq
   d9a1a:	ea90 0f02 	teqeq	r0, r2
   d9a1e:	2000      	moveq	r0, #0
   d9a20:	4770      	bxeq	lr
   d9a22:	f110 0f00 	cmn.w	r0, #0
   d9a26:	ea91 0f03 	teq	r1, r3
   d9a2a:	bf58      	it	pl
   d9a2c:	4299      	cmppl	r1, r3
   d9a2e:	bf08      	it	eq
   d9a30:	4290      	cmpeq	r0, r2
   d9a32:	bf2c      	ite	cs
   d9a34:	17d8      	asrcs	r0, r3, #31
   d9a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9a3a:	f040 0001 	orr.w	r0, r0, #1
   d9a3e:	4770      	bx	lr
   d9a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a48:	d102      	bne.n	d9a50 <__cmpdf2+0x64>
   d9a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a4e:	d107      	bne.n	d9a60 <__cmpdf2+0x74>
   d9a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a58:	d1d6      	bne.n	d9a08 <__cmpdf2+0x1c>
   d9a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a5e:	d0d3      	beq.n	d9a08 <__cmpdf2+0x1c>
   d9a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9a64:	4770      	bx	lr
   d9a66:	bf00      	nop

000d9a68 <__aeabi_cdrcmple>:
   d9a68:	4684      	mov	ip, r0
   d9a6a:	4610      	mov	r0, r2
   d9a6c:	4662      	mov	r2, ip
   d9a6e:	468c      	mov	ip, r1
   d9a70:	4619      	mov	r1, r3
   d9a72:	4663      	mov	r3, ip
   d9a74:	e000      	b.n	d9a78 <__aeabi_cdcmpeq>
   d9a76:	bf00      	nop

000d9a78 <__aeabi_cdcmpeq>:
   d9a78:	b501      	push	{r0, lr}
   d9a7a:	f7ff ffb7 	bl	d99ec <__cmpdf2>
   d9a7e:	2800      	cmp	r0, #0
   d9a80:	bf48      	it	mi
   d9a82:	f110 0f00 	cmnmi.w	r0, #0
   d9a86:	bd01      	pop	{r0, pc}

000d9a88 <__aeabi_dcmpeq>:
   d9a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a8c:	f7ff fff4 	bl	d9a78 <__aeabi_cdcmpeq>
   d9a90:	bf0c      	ite	eq
   d9a92:	2001      	moveq	r0, #1
   d9a94:	2000      	movne	r0, #0
   d9a96:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a9a:	bf00      	nop

000d9a9c <__aeabi_dcmplt>:
   d9a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9aa0:	f7ff ffea 	bl	d9a78 <__aeabi_cdcmpeq>
   d9aa4:	bf34      	ite	cc
   d9aa6:	2001      	movcc	r0, #1
   d9aa8:	2000      	movcs	r0, #0
   d9aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   d9aae:	bf00      	nop

000d9ab0 <__aeabi_dcmple>:
   d9ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ab4:	f7ff ffe0 	bl	d9a78 <__aeabi_cdcmpeq>
   d9ab8:	bf94      	ite	ls
   d9aba:	2001      	movls	r0, #1
   d9abc:	2000      	movhi	r0, #0
   d9abe:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ac2:	bf00      	nop

000d9ac4 <__aeabi_dcmpge>:
   d9ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ac8:	f7ff ffce 	bl	d9a68 <__aeabi_cdrcmple>
   d9acc:	bf94      	ite	ls
   d9ace:	2001      	movls	r0, #1
   d9ad0:	2000      	movhi	r0, #0
   d9ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ad6:	bf00      	nop

000d9ad8 <__aeabi_dcmpgt>:
   d9ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9adc:	f7ff ffc4 	bl	d9a68 <__aeabi_cdrcmple>
   d9ae0:	bf34      	ite	cc
   d9ae2:	2001      	movcc	r0, #1
   d9ae4:	2000      	movcs	r0, #0
   d9ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9aea:	bf00      	nop

000d9aec <__aeabi_dcmpun>:
   d9aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9af4:	d102      	bne.n	d9afc <__aeabi_dcmpun+0x10>
   d9af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9afa:	d10a      	bne.n	d9b12 <__aeabi_dcmpun+0x26>
   d9afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9b04:	d102      	bne.n	d9b0c <__aeabi_dcmpun+0x20>
   d9b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9b0a:	d102      	bne.n	d9b12 <__aeabi_dcmpun+0x26>
   d9b0c:	f04f 0000 	mov.w	r0, #0
   d9b10:	4770      	bx	lr
   d9b12:	f04f 0001 	mov.w	r0, #1
   d9b16:	4770      	bx	lr

000d9b18 <__aeabi_d2iz>:
   d9b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9b20:	d215      	bcs.n	d9b4e <__aeabi_d2iz+0x36>
   d9b22:	d511      	bpl.n	d9b48 <__aeabi_d2iz+0x30>
   d9b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9b2c:	d912      	bls.n	d9b54 <__aeabi_d2iz+0x3c>
   d9b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9b3e:	fa23 f002 	lsr.w	r0, r3, r2
   d9b42:	bf18      	it	ne
   d9b44:	4240      	negne	r0, r0
   d9b46:	4770      	bx	lr
   d9b48:	f04f 0000 	mov.w	r0, #0
   d9b4c:	4770      	bx	lr
   d9b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9b52:	d105      	bne.n	d9b60 <__aeabi_d2iz+0x48>
   d9b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9b58:	bf08      	it	eq
   d9b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9b5e:	4770      	bx	lr
   d9b60:	f04f 0000 	mov.w	r0, #0
   d9b64:	4770      	bx	lr
   d9b66:	bf00      	nop

000d9b68 <__aeabi_d2uiz>:
   d9b68:	004a      	lsls	r2, r1, #1
   d9b6a:	d211      	bcs.n	d9b90 <__aeabi_d2uiz+0x28>
   d9b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9b70:	d211      	bcs.n	d9b96 <__aeabi_d2uiz+0x2e>
   d9b72:	d50d      	bpl.n	d9b90 <__aeabi_d2uiz+0x28>
   d9b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9b7c:	d40e      	bmi.n	d9b9c <__aeabi_d2uiz+0x34>
   d9b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9b8a:	fa23 f002 	lsr.w	r0, r3, r2
   d9b8e:	4770      	bx	lr
   d9b90:	f04f 0000 	mov.w	r0, #0
   d9b94:	4770      	bx	lr
   d9b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9b9a:	d102      	bne.n	d9ba2 <__aeabi_d2uiz+0x3a>
   d9b9c:	f04f 30ff 	mov.w	r0, #4294967295
   d9ba0:	4770      	bx	lr
   d9ba2:	f04f 0000 	mov.w	r0, #0
   d9ba6:	4770      	bx	lr

000d9ba8 <__aeabi_d2f>:
   d9ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9bb0:	bf24      	itt	cs
   d9bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9bba:	d90d      	bls.n	d9bd8 <__aeabi_d2f+0x30>
   d9bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9bd0:	bf08      	it	eq
   d9bd2:	f020 0001 	biceq.w	r0, r0, #1
   d9bd6:	4770      	bx	lr
   d9bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9bdc:	d121      	bne.n	d9c22 <__aeabi_d2f+0x7a>
   d9bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9be2:	bfbc      	itt	lt
   d9be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9be8:	4770      	bxlt	lr
   d9bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9bf2:	f1c2 0218 	rsb	r2, r2, #24
   d9bf6:	f1c2 0c20 	rsb	ip, r2, #32
   d9bfa:	fa10 f30c 	lsls.w	r3, r0, ip
   d9bfe:	fa20 f002 	lsr.w	r0, r0, r2
   d9c02:	bf18      	it	ne
   d9c04:	f040 0001 	orrne.w	r0, r0, #1
   d9c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9c10:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9c14:	ea40 000c 	orr.w	r0, r0, ip
   d9c18:	fa23 f302 	lsr.w	r3, r3, r2
   d9c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9c20:	e7cc      	b.n	d9bbc <__aeabi_d2f+0x14>
   d9c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9c26:	d107      	bne.n	d9c38 <__aeabi_d2f+0x90>
   d9c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9c2c:	bf1e      	ittt	ne
   d9c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9c36:	4770      	bxne	lr
   d9c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9c44:	4770      	bx	lr
   d9c46:	bf00      	nop

000d9c48 <atof>:
   d9c48:	2100      	movs	r1, #0
   d9c4a:	f000 bef5 	b.w	daa38 <strtod>
	...

000d9c50 <__cxa_atexit>:
   d9c50:	b510      	push	{r4, lr}
   d9c52:	4c05      	ldr	r4, [pc, #20]	; (d9c68 <__cxa_atexit+0x18>)
   d9c54:	4613      	mov	r3, r2
   d9c56:	b12c      	cbz	r4, d9c64 <__cxa_atexit+0x14>
   d9c58:	460a      	mov	r2, r1
   d9c5a:	4601      	mov	r1, r0
   d9c5c:	2002      	movs	r0, #2
   d9c5e:	f3af 8000 	nop.w
   d9c62:	bd10      	pop	{r4, pc}
   d9c64:	4620      	mov	r0, r4
   d9c66:	bd10      	pop	{r4, pc}
   d9c68:	00000000 	.word	0x00000000

000d9c6c <ldiv>:
   d9c6c:	2900      	cmp	r1, #0
   d9c6e:	b510      	push	{r4, lr}
   d9c70:	fb91 f4f2 	sdiv	r4, r1, r2
   d9c74:	fb02 1314 	mls	r3, r2, r4, r1
   d9c78:	db04      	blt.n	d9c84 <ldiv+0x18>
   d9c7a:	2b00      	cmp	r3, #0
   d9c7c:	da07      	bge.n	d9c8e <ldiv+0x22>
   d9c7e:	3401      	adds	r4, #1
   d9c80:	1a9b      	subs	r3, r3, r2
   d9c82:	e004      	b.n	d9c8e <ldiv+0x22>
   d9c84:	2b00      	cmp	r3, #0
   d9c86:	bfc4      	itt	gt
   d9c88:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d9c8c:	189b      	addgt	r3, r3, r2
   d9c8e:	6004      	str	r4, [r0, #0]
   d9c90:	6043      	str	r3, [r0, #4]
   d9c92:	bd10      	pop	{r4, pc}

000d9c94 <_localeconv_r>:
   d9c94:	4800      	ldr	r0, [pc, #0]	; (d9c98 <_localeconv_r+0x4>)
   d9c96:	4770      	bx	lr
   d9c98:	2003e180 	.word	0x2003e180

000d9c9c <memcpy>:
   d9c9c:	b510      	push	{r4, lr}
   d9c9e:	1e43      	subs	r3, r0, #1
   d9ca0:	440a      	add	r2, r1
   d9ca2:	4291      	cmp	r1, r2
   d9ca4:	d004      	beq.n	d9cb0 <memcpy+0x14>
   d9ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9caa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9cae:	e7f8      	b.n	d9ca2 <memcpy+0x6>
   d9cb0:	bd10      	pop	{r4, pc}

000d9cb2 <memmove>:
   d9cb2:	4288      	cmp	r0, r1
   d9cb4:	b510      	push	{r4, lr}
   d9cb6:	eb01 0302 	add.w	r3, r1, r2
   d9cba:	d801      	bhi.n	d9cc0 <memmove+0xe>
   d9cbc:	1e42      	subs	r2, r0, #1
   d9cbe:	e00b      	b.n	d9cd8 <memmove+0x26>
   d9cc0:	4298      	cmp	r0, r3
   d9cc2:	d2fb      	bcs.n	d9cbc <memmove+0xa>
   d9cc4:	1881      	adds	r1, r0, r2
   d9cc6:	1ad2      	subs	r2, r2, r3
   d9cc8:	42d3      	cmn	r3, r2
   d9cca:	d004      	beq.n	d9cd6 <memmove+0x24>
   d9ccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9cd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9cd4:	e7f8      	b.n	d9cc8 <memmove+0x16>
   d9cd6:	bd10      	pop	{r4, pc}
   d9cd8:	4299      	cmp	r1, r3
   d9cda:	d004      	beq.n	d9ce6 <memmove+0x34>
   d9cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9ce0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9ce4:	e7f8      	b.n	d9cd8 <memmove+0x26>
   d9ce6:	bd10      	pop	{r4, pc}

000d9ce8 <memset>:
   d9ce8:	4402      	add	r2, r0
   d9cea:	4603      	mov	r3, r0
   d9cec:	4293      	cmp	r3, r2
   d9cee:	d002      	beq.n	d9cf6 <memset+0xe>
   d9cf0:	f803 1b01 	strb.w	r1, [r3], #1
   d9cf4:	e7fa      	b.n	d9cec <memset+0x4>
   d9cf6:	4770      	bx	lr

000d9cf8 <srand>:
   d9cf8:	b538      	push	{r3, r4, r5, lr}
   d9cfa:	4b12      	ldr	r3, [pc, #72]	; (d9d44 <srand+0x4c>)
   d9cfc:	681c      	ldr	r4, [r3, #0]
   d9cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d00:	4605      	mov	r5, r0
   d9d02:	b9d3      	cbnz	r3, d9d3a <srand+0x42>
   d9d04:	2018      	movs	r0, #24
   d9d06:	f7fc fd17 	bl	d6738 <malloc>
   d9d0a:	f243 330e 	movw	r3, #13070	; 0x330e
   d9d0e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9d10:	8003      	strh	r3, [r0, #0]
   d9d12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9d16:	8043      	strh	r3, [r0, #2]
   d9d18:	f241 2334 	movw	r3, #4660	; 0x1234
   d9d1c:	8083      	strh	r3, [r0, #4]
   d9d1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9d22:	80c3      	strh	r3, [r0, #6]
   d9d24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9d28:	8103      	strh	r3, [r0, #8]
   d9d2a:	2305      	movs	r3, #5
   d9d2c:	8143      	strh	r3, [r0, #10]
   d9d2e:	230b      	movs	r3, #11
   d9d30:	8183      	strh	r3, [r0, #12]
   d9d32:	2201      	movs	r2, #1
   d9d34:	2300      	movs	r3, #0
   d9d36:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9d3c:	2200      	movs	r2, #0
   d9d3e:	611d      	str	r5, [r3, #16]
   d9d40:	615a      	str	r2, [r3, #20]
   d9d42:	bd38      	pop	{r3, r4, r5, pc}
   d9d44:	2003e17c 	.word	0x2003e17c

000d9d48 <strcpy>:
   d9d48:	4603      	mov	r3, r0
   d9d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9d4e:	f803 2b01 	strb.w	r2, [r3], #1
   d9d52:	2a00      	cmp	r2, #0
   d9d54:	d1f9      	bne.n	d9d4a <strcpy+0x2>
   d9d56:	4770      	bx	lr

000d9d58 <strlen>:
   d9d58:	4603      	mov	r3, r0
   d9d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d5e:	2a00      	cmp	r2, #0
   d9d60:	d1fb      	bne.n	d9d5a <strlen+0x2>
   d9d62:	1a18      	subs	r0, r3, r0
   d9d64:	3801      	subs	r0, #1
   d9d66:	4770      	bx	lr

000d9d68 <strncasecmp>:
   d9d68:	4b10      	ldr	r3, [pc, #64]	; (d9dac <strncasecmp+0x44>)
   d9d6a:	b570      	push	{r4, r5, r6, lr}
   d9d6c:	681e      	ldr	r6, [r3, #0]
   d9d6e:	440a      	add	r2, r1
   d9d70:	4291      	cmp	r1, r2
   d9d72:	d017      	beq.n	d9da4 <strncasecmp+0x3c>
   d9d74:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9d78:	18f4      	adds	r4, r6, r3
   d9d7a:	7864      	ldrb	r4, [r4, #1]
   d9d7c:	f004 0403 	and.w	r4, r4, #3
   d9d80:	2c01      	cmp	r4, #1
   d9d82:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9d86:	eb06 0504 	add.w	r5, r6, r4
   d9d8a:	bf08      	it	eq
   d9d8c:	3320      	addeq	r3, #32
   d9d8e:	786d      	ldrb	r5, [r5, #1]
   d9d90:	f005 0503 	and.w	r5, r5, #3
   d9d94:	2d01      	cmp	r5, #1
   d9d96:	bf08      	it	eq
   d9d98:	3420      	addeq	r4, #32
   d9d9a:	1b1b      	subs	r3, r3, r4
   d9d9c:	d103      	bne.n	d9da6 <strncasecmp+0x3e>
   d9d9e:	2c00      	cmp	r4, #0
   d9da0:	d1e6      	bne.n	d9d70 <strncasecmp+0x8>
   d9da2:	e000      	b.n	d9da6 <strncasecmp+0x3e>
   d9da4:	2300      	movs	r3, #0
   d9da6:	4618      	mov	r0, r3
   d9da8:	bd70      	pop	{r4, r5, r6, pc}
   d9daa:	bf00      	nop
   d9dac:	2003e118 	.word	0x2003e118

000d9db0 <strncmp>:
   d9db0:	b530      	push	{r4, r5, lr}
   d9db2:	b182      	cbz	r2, d9dd6 <strncmp+0x26>
   d9db4:	1e45      	subs	r5, r0, #1
   d9db6:	3901      	subs	r1, #1
   d9db8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9dbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9dc0:	42a3      	cmp	r3, r4
   d9dc2:	d106      	bne.n	d9dd2 <strncmp+0x22>
   d9dc4:	43ec      	mvns	r4, r5
   d9dc6:	4414      	add	r4, r2
   d9dc8:	42e0      	cmn	r0, r4
   d9dca:	d001      	beq.n	d9dd0 <strncmp+0x20>
   d9dcc:	2b00      	cmp	r3, #0
   d9dce:	d1f3      	bne.n	d9db8 <strncmp+0x8>
   d9dd0:	461c      	mov	r4, r3
   d9dd2:	1b18      	subs	r0, r3, r4
   d9dd4:	bd30      	pop	{r4, r5, pc}
   d9dd6:	4610      	mov	r0, r2
   d9dd8:	bd30      	pop	{r4, r5, pc}

000d9dda <strncpy>:
   d9dda:	b510      	push	{r4, lr}
   d9ddc:	4603      	mov	r3, r0
   d9dde:	b142      	cbz	r2, d9df2 <strncpy+0x18>
   d9de0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9de4:	f803 4b01 	strb.w	r4, [r3], #1
   d9de8:	3a01      	subs	r2, #1
   d9dea:	2c00      	cmp	r4, #0
   d9dec:	d1f7      	bne.n	d9dde <strncpy+0x4>
   d9dee:	441a      	add	r2, r3
   d9df0:	e000      	b.n	d9df4 <strncpy+0x1a>
   d9df2:	bd10      	pop	{r4, pc}
   d9df4:	4293      	cmp	r3, r2
   d9df6:	d002      	beq.n	d9dfe <strncpy+0x24>
   d9df8:	f803 4b01 	strb.w	r4, [r3], #1
   d9dfc:	e7fa      	b.n	d9df4 <strncpy+0x1a>
   d9dfe:	bd10      	pop	{r4, pc}

000d9e00 <sulp>:
   d9e00:	b570      	push	{r4, r5, r6, lr}
   d9e02:	4604      	mov	r4, r0
   d9e04:	460d      	mov	r5, r1
   d9e06:	ec45 4b10 	vmov	d0, r4, r5
   d9e0a:	4616      	mov	r6, r2
   d9e0c:	f001 fc00 	bl	db610 <__ulp>
   d9e10:	ec51 0b10 	vmov	r0, r1, d0
   d9e14:	b17e      	cbz	r6, d9e36 <sulp+0x36>
   d9e16:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9e1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9e1e:	2b00      	cmp	r3, #0
   d9e20:	dd09      	ble.n	d9e36 <sulp+0x36>
   d9e22:	051b      	lsls	r3, r3, #20
   d9e24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9e28:	2400      	movs	r4, #0
   d9e2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9e2e:	4622      	mov	r2, r4
   d9e30:	462b      	mov	r3, r5
   d9e32:	f7ff fbc1 	bl	d95b8 <__aeabi_dmul>
   d9e36:	bd70      	pop	{r4, r5, r6, pc}

000d9e38 <_strtod_r>:
   d9e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e3c:	b09d      	sub	sp, #116	; 0x74
   d9e3e:	2300      	movs	r3, #0
   d9e40:	9002      	str	r0, [sp, #8]
   d9e42:	460c      	mov	r4, r1
   d9e44:	9213      	str	r2, [sp, #76]	; 0x4c
   d9e46:	9318      	str	r3, [sp, #96]	; 0x60
   d9e48:	f04f 0a00 	mov.w	sl, #0
   d9e4c:	f04f 0b00 	mov.w	fp, #0
   d9e50:	9117      	str	r1, [sp, #92]	; 0x5c
   d9e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9e54:	781a      	ldrb	r2, [r3, #0]
   d9e56:	2a0d      	cmp	r2, #13
   d9e58:	d805      	bhi.n	d9e66 <_strtod_r+0x2e>
   d9e5a:	2a09      	cmp	r2, #9
   d9e5c:	d213      	bcs.n	d9e86 <_strtod_r+0x4e>
   d9e5e:	2a00      	cmp	r2, #0
   d9e60:	f000 81ac 	beq.w	da1bc <_strtod_r+0x384>
   d9e64:	e012      	b.n	d9e8c <_strtod_r+0x54>
   d9e66:	2a2b      	cmp	r2, #43	; 0x2b
   d9e68:	d004      	beq.n	d9e74 <_strtod_r+0x3c>
   d9e6a:	2a2d      	cmp	r2, #45	; 0x2d
   d9e6c:	d004      	beq.n	d9e78 <_strtod_r+0x40>
   d9e6e:	2a20      	cmp	r2, #32
   d9e70:	d10c      	bne.n	d9e8c <_strtod_r+0x54>
   d9e72:	e008      	b.n	d9e86 <_strtod_r+0x4e>
   d9e74:	2200      	movs	r2, #0
   d9e76:	e000      	b.n	d9e7a <_strtod_r+0x42>
   d9e78:	2201      	movs	r2, #1
   d9e7a:	920c      	str	r2, [sp, #48]	; 0x30
   d9e7c:	1c5a      	adds	r2, r3, #1
   d9e7e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9e80:	785b      	ldrb	r3, [r3, #1]
   d9e82:	b92b      	cbnz	r3, d9e90 <_strtod_r+0x58>
   d9e84:	e19a      	b.n	da1bc <_strtod_r+0x384>
   d9e86:	3301      	adds	r3, #1
   d9e88:	9317      	str	r3, [sp, #92]	; 0x5c
   d9e8a:	e7e2      	b.n	d9e52 <_strtod_r+0x1a>
   d9e8c:	2300      	movs	r3, #0
   d9e8e:	930c      	str	r3, [sp, #48]	; 0x30
   d9e90:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9e92:	782b      	ldrb	r3, [r5, #0]
   d9e94:	2b30      	cmp	r3, #48	; 0x30
   d9e96:	d15c      	bne.n	d9f52 <_strtod_r+0x11a>
   d9e98:	786b      	ldrb	r3, [r5, #1]
   d9e9a:	2b58      	cmp	r3, #88	; 0x58
   d9e9c:	d001      	beq.n	d9ea2 <_strtod_r+0x6a>
   d9e9e:	2b78      	cmp	r3, #120	; 0x78
   d9ea0:	d14c      	bne.n	d9f3c <_strtod_r+0x104>
   d9ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9ea4:	9301      	str	r3, [sp, #4]
   d9ea6:	ab18      	add	r3, sp, #96	; 0x60
   d9ea8:	9300      	str	r3, [sp, #0]
   d9eaa:	4aa9      	ldr	r2, [pc, #676]	; (da150 <_strtod_r+0x318>)
   d9eac:	9802      	ldr	r0, [sp, #8]
   d9eae:	ab19      	add	r3, sp, #100	; 0x64
   d9eb0:	a917      	add	r1, sp, #92	; 0x5c
   d9eb2:	f000 fe14 	bl	daade <__gethex>
   d9eb6:	f010 0607 	ands.w	r6, r0, #7
   d9eba:	4604      	mov	r4, r0
   d9ebc:	f000 8587 	beq.w	da9ce <_strtod_r+0xb96>
   d9ec0:	2e06      	cmp	r6, #6
   d9ec2:	d105      	bne.n	d9ed0 <_strtod_r+0x98>
   d9ec4:	3501      	adds	r5, #1
   d9ec6:	2300      	movs	r3, #0
   d9ec8:	9517      	str	r5, [sp, #92]	; 0x5c
   d9eca:	930c      	str	r3, [sp, #48]	; 0x30
   d9ecc:	f000 bd7f 	b.w	da9ce <_strtod_r+0xb96>
   d9ed0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9ed2:	b13a      	cbz	r2, d9ee4 <_strtod_r+0xac>
   d9ed4:	2135      	movs	r1, #53	; 0x35
   d9ed6:	a81a      	add	r0, sp, #104	; 0x68
   d9ed8:	f001 fc87 	bl	db7ea <__copybits>
   d9edc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9ede:	9802      	ldr	r0, [sp, #8]
   d9ee0:	f001 f904 	bl	db0ec <_Bfree>
   d9ee4:	2e06      	cmp	r6, #6
   d9ee6:	d822      	bhi.n	d9f2e <_strtod_r+0xf6>
   d9ee8:	e8df f006 	tbb	[pc, r6]
   d9eec:	18080d04 	.word	0x18080d04
   d9ef0:	0d1d      	.short	0x0d1d
   d9ef2:	04          	.byte	0x04
   d9ef3:	00          	.byte	0x00
   d9ef4:	f04f 0b00 	mov.w	fp, #0
   d9ef8:	46da      	mov	sl, fp
   d9efa:	e018      	b.n	d9f2e <_strtod_r+0xf6>
   d9efc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9f00:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9f04:	e013      	b.n	d9f2e <_strtod_r+0xf6>
   d9f06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9f08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9f0a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9f0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9f12:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9f16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9f1a:	e008      	b.n	d9f2e <_strtod_r+0xf6>
   d9f1c:	f8df b234 	ldr.w	fp, [pc, #564]	; da154 <_strtod_r+0x31c>
   d9f20:	f04f 0a00 	mov.w	sl, #0
   d9f24:	e003      	b.n	d9f2e <_strtod_r+0xf6>
   d9f26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9f2a:	f04f 3aff 	mov.w	sl, #4294967295
   d9f2e:	0721      	lsls	r1, r4, #28
   d9f30:	f140 854d 	bpl.w	da9ce <_strtod_r+0xb96>
   d9f34:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9f38:	f000 bd49 	b.w	da9ce <_strtod_r+0xb96>
   d9f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9f3e:	1c5a      	adds	r2, r3, #1
   d9f40:	9217      	str	r2, [sp, #92]	; 0x5c
   d9f42:	785b      	ldrb	r3, [r3, #1]
   d9f44:	2b30      	cmp	r3, #48	; 0x30
   d9f46:	d0f9      	beq.n	d9f3c <_strtod_r+0x104>
   d9f48:	2b00      	cmp	r3, #0
   d9f4a:	f000 8540 	beq.w	da9ce <_strtod_r+0xb96>
   d9f4e:	2301      	movs	r3, #1
   d9f50:	e000      	b.n	d9f54 <_strtod_r+0x11c>
   d9f52:	2300      	movs	r3, #0
   d9f54:	f04f 0800 	mov.w	r8, #0
   d9f58:	9306      	str	r3, [sp, #24]
   d9f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9f5c:	9307      	str	r3, [sp, #28]
   d9f5e:	f8cd 8014 	str.w	r8, [sp, #20]
   d9f62:	f8cd 8010 	str.w	r8, [sp, #16]
   d9f66:	220a      	movs	r2, #10
   d9f68:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9f6a:	782e      	ldrb	r6, [r5, #0]
   d9f6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9f70:	b2d9      	uxtb	r1, r3
   d9f72:	2909      	cmp	r1, #9
   d9f74:	d80e      	bhi.n	d9f94 <_strtod_r+0x15c>
   d9f76:	9904      	ldr	r1, [sp, #16]
   d9f78:	2908      	cmp	r1, #8
   d9f7a:	bfdd      	ittte	le
   d9f7c:	9905      	ldrle	r1, [sp, #20]
   d9f7e:	fb02 3301 	mlale	r3, r2, r1, r3
   d9f82:	9305      	strle	r3, [sp, #20]
   d9f84:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9f88:	9b04      	ldr	r3, [sp, #16]
   d9f8a:	3501      	adds	r5, #1
   d9f8c:	3301      	adds	r3, #1
   d9f8e:	9304      	str	r3, [sp, #16]
   d9f90:	9517      	str	r5, [sp, #92]	; 0x5c
   d9f92:	e7e9      	b.n	d9f68 <_strtod_r+0x130>
   d9f94:	9802      	ldr	r0, [sp, #8]
   d9f96:	f7ff fe7d 	bl	d9c94 <_localeconv_r>
   d9f9a:	6807      	ldr	r7, [r0, #0]
   d9f9c:	9802      	ldr	r0, [sp, #8]
   d9f9e:	f7ff fe79 	bl	d9c94 <_localeconv_r>
   d9fa2:	6800      	ldr	r0, [r0, #0]
   d9fa4:	f7ff fed8 	bl	d9d58 <strlen>
   d9fa8:	4639      	mov	r1, r7
   d9faa:	4602      	mov	r2, r0
   d9fac:	4628      	mov	r0, r5
   d9fae:	f7ff feff 	bl	d9db0 <strncmp>
   d9fb2:	4607      	mov	r7, r0
   d9fb4:	b128      	cbz	r0, d9fc2 <_strtod_r+0x18a>
   d9fb6:	2000      	movs	r0, #0
   d9fb8:	4633      	mov	r3, r6
   d9fba:	9d04      	ldr	r5, [sp, #16]
   d9fbc:	4602      	mov	r2, r0
   d9fbe:	4601      	mov	r1, r0
   d9fc0:	e057      	b.n	da072 <_strtod_r+0x23a>
   d9fc2:	9802      	ldr	r0, [sp, #8]
   d9fc4:	f7ff fe66 	bl	d9c94 <_localeconv_r>
   d9fc8:	6800      	ldr	r0, [r0, #0]
   d9fca:	f7ff fec5 	bl	d9d58 <strlen>
   d9fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9fd0:	181a      	adds	r2, r3, r0
   d9fd2:	9217      	str	r2, [sp, #92]	; 0x5c
   d9fd4:	9a04      	ldr	r2, [sp, #16]
   d9fd6:	5c1b      	ldrb	r3, [r3, r0]
   d9fd8:	2a00      	cmp	r2, #0
   d9fda:	d142      	bne.n	da062 <_strtod_r+0x22a>
   d9fdc:	4610      	mov	r0, r2
   d9fde:	2b30      	cmp	r3, #48	; 0x30
   d9fe0:	d105      	bne.n	d9fee <_strtod_r+0x1b6>
   d9fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9fe4:	1c5a      	adds	r2, r3, #1
   d9fe6:	9217      	str	r2, [sp, #92]	; 0x5c
   d9fe8:	3001      	adds	r0, #1
   d9fea:	785b      	ldrb	r3, [r3, #1]
   d9fec:	e7f7      	b.n	d9fde <_strtod_r+0x1a6>
   d9fee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9ff2:	2a08      	cmp	r2, #8
   d9ff4:	d843      	bhi.n	da07e <_strtod_r+0x246>
   d9ff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9ff8:	9207      	str	r2, [sp, #28]
   d9ffa:	4602      	mov	r2, r0
   d9ffc:	2000      	movs	r0, #0
   d9ffe:	4605      	mov	r5, r0
   da000:	3b30      	subs	r3, #48	; 0x30
   da002:	f100 0101 	add.w	r1, r0, #1
   da006:	d026      	beq.n	da056 <_strtod_r+0x21e>
   da008:	440a      	add	r2, r1
   da00a:	eb05 0c00 	add.w	ip, r5, r0
   da00e:	4629      	mov	r1, r5
   da010:	260a      	movs	r6, #10
   da012:	4561      	cmp	r1, ip
   da014:	d00e      	beq.n	da034 <_strtod_r+0x1fc>
   da016:	3101      	adds	r1, #1
   da018:	f101 3eff 	add.w	lr, r1, #4294967295
   da01c:	f1be 0f08 	cmp.w	lr, #8
   da020:	dc03      	bgt.n	da02a <_strtod_r+0x1f2>
   da022:	9f05      	ldr	r7, [sp, #20]
   da024:	4377      	muls	r7, r6
   da026:	9705      	str	r7, [sp, #20]
   da028:	e7f3      	b.n	da012 <_strtod_r+0x1da>
   da02a:	2910      	cmp	r1, #16
   da02c:	bfd8      	it	le
   da02e:	fb06 f808 	mulle.w	r8, r6, r8
   da032:	e7ee      	b.n	da012 <_strtod_r+0x1da>
   da034:	4428      	add	r0, r5
   da036:	2808      	cmp	r0, #8
   da038:	f100 0501 	add.w	r5, r0, #1
   da03c:	dc05      	bgt.n	da04a <_strtod_r+0x212>
   da03e:	9805      	ldr	r0, [sp, #20]
   da040:	210a      	movs	r1, #10
   da042:	fb01 3300 	mla	r3, r1, r0, r3
   da046:	9305      	str	r3, [sp, #20]
   da048:	e004      	b.n	da054 <_strtod_r+0x21c>
   da04a:	2d10      	cmp	r5, #16
   da04c:	bfdc      	itt	le
   da04e:	210a      	movle	r1, #10
   da050:	fb01 3808 	mlale	r8, r1, r8, r3
   da054:	2100      	movs	r1, #0
   da056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da058:	1c58      	adds	r0, r3, #1
   da05a:	9017      	str	r0, [sp, #92]	; 0x5c
   da05c:	785b      	ldrb	r3, [r3, #1]
   da05e:	4608      	mov	r0, r1
   da060:	e002      	b.n	da068 <_strtod_r+0x230>
   da062:	9d04      	ldr	r5, [sp, #16]
   da064:	4638      	mov	r0, r7
   da066:	463a      	mov	r2, r7
   da068:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   da06c:	2909      	cmp	r1, #9
   da06e:	d9c7      	bls.n	da000 <_strtod_r+0x1c8>
   da070:	2101      	movs	r1, #1
   da072:	2b65      	cmp	r3, #101	; 0x65
   da074:	d001      	beq.n	da07a <_strtod_r+0x242>
   da076:	2b45      	cmp	r3, #69	; 0x45
   da078:	d151      	bne.n	da11e <_strtod_r+0x2e6>
   da07a:	b96d      	cbnz	r5, da098 <_strtod_r+0x260>
   da07c:	e004      	b.n	da088 <_strtod_r+0x250>
   da07e:	2b65      	cmp	r3, #101	; 0x65
   da080:	f040 84b3 	bne.w	da9ea <_strtod_r+0xbb2>
   da084:	2200      	movs	r2, #0
   da086:	2101      	movs	r1, #1
   da088:	b928      	cbnz	r0, da096 <_strtod_r+0x25e>
   da08a:	9b06      	ldr	r3, [sp, #24]
   da08c:	2b00      	cmp	r3, #0
   da08e:	f000 8095 	beq.w	da1bc <_strtod_r+0x384>
   da092:	4605      	mov	r5, r0
   da094:	e000      	b.n	da098 <_strtod_r+0x260>
   da096:	2500      	movs	r5, #0
   da098:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   da09a:	1c63      	adds	r3, r4, #1
   da09c:	9317      	str	r3, [sp, #92]	; 0x5c
   da09e:	7863      	ldrb	r3, [r4, #1]
   da0a0:	2b2b      	cmp	r3, #43	; 0x2b
   da0a2:	d006      	beq.n	da0b2 <_strtod_r+0x27a>
   da0a4:	2b2d      	cmp	r3, #45	; 0x2d
   da0a6:	d002      	beq.n	da0ae <_strtod_r+0x276>
   da0a8:	2600      	movs	r6, #0
   da0aa:	9603      	str	r6, [sp, #12]
   da0ac:	e006      	b.n	da0bc <_strtod_r+0x284>
   da0ae:	2301      	movs	r3, #1
   da0b0:	e000      	b.n	da0b4 <_strtod_r+0x27c>
   da0b2:	2300      	movs	r3, #0
   da0b4:	9303      	str	r3, [sp, #12]
   da0b6:	1ca3      	adds	r3, r4, #2
   da0b8:	9317      	str	r3, [sp, #92]	; 0x5c
   da0ba:	78a3      	ldrb	r3, [r4, #2]
   da0bc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   da0c0:	2e09      	cmp	r6, #9
   da0c2:	d82b      	bhi.n	da11c <_strtod_r+0x2e4>
   da0c4:	2b30      	cmp	r3, #48	; 0x30
   da0c6:	d104      	bne.n	da0d2 <_strtod_r+0x29a>
   da0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0ca:	1c5e      	adds	r6, r3, #1
   da0cc:	9617      	str	r6, [sp, #92]	; 0x5c
   da0ce:	785b      	ldrb	r3, [r3, #1]
   da0d0:	e7f8      	b.n	da0c4 <_strtod_r+0x28c>
   da0d2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   da0d6:	2e08      	cmp	r6, #8
   da0d8:	d821      	bhi.n	da11e <_strtod_r+0x2e6>
   da0da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   da0de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0e0:	f04f 0c0a 	mov.w	ip, #10
   da0e4:	461f      	mov	r7, r3
   da0e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da0e8:	1c5e      	adds	r6, r3, #1
   da0ea:	9617      	str	r6, [sp, #92]	; 0x5c
   da0ec:	785b      	ldrb	r3, [r3, #1]
   da0ee:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   da0f2:	f1b9 0f09 	cmp.w	r9, #9
   da0f6:	d804      	bhi.n	da102 <_strtod_r+0x2ca>
   da0f8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   da0fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   da100:	e7f1      	b.n	da0e6 <_strtod_r+0x2ae>
   da102:	1bf6      	subs	r6, r6, r7
   da104:	2e08      	cmp	r6, #8
   da106:	f644 691f 	movw	r9, #19999	; 0x4e1f
   da10a:	dc02      	bgt.n	da112 <_strtod_r+0x2da>
   da10c:	45f1      	cmp	r9, lr
   da10e:	bfa8      	it	ge
   da110:	46f1      	movge	r9, lr
   da112:	9e03      	ldr	r6, [sp, #12]
   da114:	b12e      	cbz	r6, da122 <_strtod_r+0x2ea>
   da116:	f1c9 0900 	rsb	r9, r9, #0
   da11a:	e002      	b.n	da122 <_strtod_r+0x2ea>
   da11c:	9417      	str	r4, [sp, #92]	; 0x5c
   da11e:	f04f 0900 	mov.w	r9, #0
   da122:	2d00      	cmp	r5, #0
   da124:	d153      	bne.n	da1ce <_strtod_r+0x396>
   da126:	2800      	cmp	r0, #0
   da128:	f040 8451 	bne.w	da9ce <_strtod_r+0xb96>
   da12c:	9a06      	ldr	r2, [sp, #24]
   da12e:	2a00      	cmp	r2, #0
   da130:	f040 844d 	bne.w	da9ce <_strtod_r+0xb96>
   da134:	2900      	cmp	r1, #0
   da136:	d141      	bne.n	da1bc <_strtod_r+0x384>
   da138:	2b4e      	cmp	r3, #78	; 0x4e
   da13a:	d020      	beq.n	da17e <_strtod_r+0x346>
   da13c:	dc02      	bgt.n	da144 <_strtod_r+0x30c>
   da13e:	2b49      	cmp	r3, #73	; 0x49
   da140:	d00a      	beq.n	da158 <_strtod_r+0x320>
   da142:	e03b      	b.n	da1bc <_strtod_r+0x384>
   da144:	2b69      	cmp	r3, #105	; 0x69
   da146:	d007      	beq.n	da158 <_strtod_r+0x320>
   da148:	2b6e      	cmp	r3, #110	; 0x6e
   da14a:	d018      	beq.n	da17e <_strtod_r+0x346>
   da14c:	e036      	b.n	da1bc <_strtod_r+0x384>
   da14e:	bf00      	nop
   da150:	000dc70c 	.word	0x000dc70c
   da154:	7ff00000 	.word	0x7ff00000
   da158:	49a8      	ldr	r1, [pc, #672]	; (da3fc <_strtod_r+0x5c4>)
   da15a:	a817      	add	r0, sp, #92	; 0x5c
   da15c:	f000 fef0 	bl	daf40 <__match>
   da160:	b360      	cbz	r0, da1bc <_strtod_r+0x384>
   da162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da164:	49a6      	ldr	r1, [pc, #664]	; (da400 <_strtod_r+0x5c8>)
   da166:	3b01      	subs	r3, #1
   da168:	a817      	add	r0, sp, #92	; 0x5c
   da16a:	9317      	str	r3, [sp, #92]	; 0x5c
   da16c:	f000 fee8 	bl	daf40 <__match>
   da170:	b910      	cbnz	r0, da178 <_strtod_r+0x340>
   da172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da174:	3301      	adds	r3, #1
   da176:	9317      	str	r3, [sp, #92]	; 0x5c
   da178:	f8df b2a0 	ldr.w	fp, [pc, #672]	; da41c <_strtod_r+0x5e4>
   da17c:	e01a      	b.n	da1b4 <_strtod_r+0x37c>
   da17e:	49a1      	ldr	r1, [pc, #644]	; (da404 <_strtod_r+0x5cc>)
   da180:	a817      	add	r0, sp, #92	; 0x5c
   da182:	f000 fedd 	bl	daf40 <__match>
   da186:	b1c8      	cbz	r0, da1bc <_strtod_r+0x384>
   da188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da18a:	781b      	ldrb	r3, [r3, #0]
   da18c:	2b28      	cmp	r3, #40	; 0x28
   da18e:	d10f      	bne.n	da1b0 <_strtod_r+0x378>
   da190:	aa1a      	add	r2, sp, #104	; 0x68
   da192:	499d      	ldr	r1, [pc, #628]	; (da408 <_strtod_r+0x5d0>)
   da194:	a817      	add	r0, sp, #92	; 0x5c
   da196:	f000 fee6 	bl	daf66 <__hexnan>
   da19a:	2805      	cmp	r0, #5
   da19c:	d108      	bne.n	da1b0 <_strtod_r+0x378>
   da19e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   da1a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   da1a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   da1a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   da1ac:	f000 bc0f 	b.w	da9ce <_strtod_r+0xb96>
   da1b0:	f8df b26c 	ldr.w	fp, [pc, #620]	; da420 <_strtod_r+0x5e8>
   da1b4:	f04f 0a00 	mov.w	sl, #0
   da1b8:	f000 bc09 	b.w	da9ce <_strtod_r+0xb96>
   da1bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da1be:	9417      	str	r4, [sp, #92]	; 0x5c
   da1c0:	2b00      	cmp	r3, #0
   da1c2:	f000 840f 	beq.w	da9e4 <_strtod_r+0xbac>
   da1c6:	2300      	movs	r3, #0
   da1c8:	930c      	str	r3, [sp, #48]	; 0x30
   da1ca:	f000 bc02 	b.w	da9d2 <_strtod_r+0xb9a>
   da1ce:	9b04      	ldr	r3, [sp, #16]
   da1d0:	9805      	ldr	r0, [sp, #20]
   da1d2:	2b00      	cmp	r3, #0
   da1d4:	bf08      	it	eq
   da1d6:	462b      	moveq	r3, r5
   da1d8:	2d10      	cmp	r5, #16
   da1da:	462c      	mov	r4, r5
   da1dc:	ebc2 0909 	rsb	r9, r2, r9
   da1e0:	bfa8      	it	ge
   da1e2:	2410      	movge	r4, #16
   da1e4:	9304      	str	r3, [sp, #16]
   da1e6:	f7ff f971 	bl	d94cc <__aeabi_ui2d>
   da1ea:	2c09      	cmp	r4, #9
   da1ec:	4682      	mov	sl, r0
   da1ee:	468b      	mov	fp, r1
   da1f0:	dd13      	ble.n	da21a <_strtod_r+0x3e2>
   da1f2:	4b86      	ldr	r3, [pc, #536]	; (da40c <_strtod_r+0x5d4>)
   da1f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   da1f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   da1fc:	f7ff f9dc 	bl	d95b8 <__aeabi_dmul>
   da200:	4606      	mov	r6, r0
   da202:	4640      	mov	r0, r8
   da204:	460f      	mov	r7, r1
   da206:	f7ff f961 	bl	d94cc <__aeabi_ui2d>
   da20a:	4602      	mov	r2, r0
   da20c:	460b      	mov	r3, r1
   da20e:	4630      	mov	r0, r6
   da210:	4639      	mov	r1, r7
   da212:	f7ff f81f 	bl	d9254 <__adddf3>
   da216:	4682      	mov	sl, r0
   da218:	468b      	mov	fp, r1
   da21a:	2d0f      	cmp	r5, #15
   da21c:	dc36      	bgt.n	da28c <_strtod_r+0x454>
   da21e:	f1b9 0f00 	cmp.w	r9, #0
   da222:	f000 83d4 	beq.w	da9ce <_strtod_r+0xb96>
   da226:	dd24      	ble.n	da272 <_strtod_r+0x43a>
   da228:	f1b9 0f16 	cmp.w	r9, #22
   da22c:	dc07      	bgt.n	da23e <_strtod_r+0x406>
   da22e:	4d77      	ldr	r5, [pc, #476]	; (da40c <_strtod_r+0x5d4>)
   da230:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   da234:	4652      	mov	r2, sl
   da236:	465b      	mov	r3, fp
   da238:	e9d9 0100 	ldrd	r0, r1, [r9]
   da23c:	e014      	b.n	da268 <_strtod_r+0x430>
   da23e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   da242:	4599      	cmp	r9, r3
   da244:	dc22      	bgt.n	da28c <_strtod_r+0x454>
   da246:	4c71      	ldr	r4, [pc, #452]	; (da40c <_strtod_r+0x5d4>)
   da248:	f1c5 050f 	rsb	r5, r5, #15
   da24c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   da250:	ebc5 0509 	rsb	r5, r5, r9
   da254:	4652      	mov	r2, sl
   da256:	465b      	mov	r3, fp
   da258:	e9d1 0100 	ldrd	r0, r1, [r1]
   da25c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   da260:	f7ff f9aa 	bl	d95b8 <__aeabi_dmul>
   da264:	e9d4 2300 	ldrd	r2, r3, [r4]
   da268:	f7ff f9a6 	bl	d95b8 <__aeabi_dmul>
   da26c:	4682      	mov	sl, r0
   da26e:	468b      	mov	fp, r1
   da270:	e3ad      	b.n	da9ce <_strtod_r+0xb96>
   da272:	f119 0f16 	cmn.w	r9, #22
   da276:	db09      	blt.n	da28c <_strtod_r+0x454>
   da278:	4d64      	ldr	r5, [pc, #400]	; (da40c <_strtod_r+0x5d4>)
   da27a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   da27e:	e9d9 2300 	ldrd	r2, r3, [r9]
   da282:	4650      	mov	r0, sl
   da284:	4659      	mov	r1, fp
   da286:	f7ff fac1 	bl	d980c <__aeabi_ddiv>
   da28a:	e7ef      	b.n	da26c <_strtod_r+0x434>
   da28c:	1b2c      	subs	r4, r5, r4
   da28e:	444c      	add	r4, r9
   da290:	2c00      	cmp	r4, #0
   da292:	dd57      	ble.n	da344 <_strtod_r+0x50c>
   da294:	f014 010f 	ands.w	r1, r4, #15
   da298:	d00a      	beq.n	da2b0 <_strtod_r+0x478>
   da29a:	4b5c      	ldr	r3, [pc, #368]	; (da40c <_strtod_r+0x5d4>)
   da29c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   da2a0:	4652      	mov	r2, sl
   da2a2:	465b      	mov	r3, fp
   da2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   da2a8:	f7ff f986 	bl	d95b8 <__aeabi_dmul>
   da2ac:	4682      	mov	sl, r0
   da2ae:	468b      	mov	fp, r1
   da2b0:	f034 040f 	bics.w	r4, r4, #15
   da2b4:	f000 80b8 	beq.w	da428 <_strtod_r+0x5f0>
   da2b8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   da2bc:	dd0b      	ble.n	da2d6 <_strtod_r+0x49e>
   da2be:	2400      	movs	r4, #0
   da2c0:	4625      	mov	r5, r4
   da2c2:	9405      	str	r4, [sp, #20]
   da2c4:	9404      	str	r4, [sp, #16]
   da2c6:	9a02      	ldr	r2, [sp, #8]
   da2c8:	f8df b150 	ldr.w	fp, [pc, #336]	; da41c <_strtod_r+0x5e4>
   da2cc:	2322      	movs	r3, #34	; 0x22
   da2ce:	6013      	str	r3, [r2, #0]
   da2d0:	f04f 0a00 	mov.w	sl, #0
   da2d4:	e187      	b.n	da5e6 <_strtod_r+0x7ae>
   da2d6:	4e4e      	ldr	r6, [pc, #312]	; (da410 <_strtod_r+0x5d8>)
   da2d8:	2300      	movs	r3, #0
   da2da:	1124      	asrs	r4, r4, #4
   da2dc:	4650      	mov	r0, sl
   da2de:	4659      	mov	r1, fp
   da2e0:	4698      	mov	r8, r3
   da2e2:	4637      	mov	r7, r6
   da2e4:	2c01      	cmp	r4, #1
   da2e6:	dd0b      	ble.n	da300 <_strtod_r+0x4c8>
   da2e8:	07e2      	lsls	r2, r4, #31
   da2ea:	d504      	bpl.n	da2f6 <_strtod_r+0x4be>
   da2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   da2f0:	f7ff f962 	bl	d95b8 <__aeabi_dmul>
   da2f4:	2301      	movs	r3, #1
   da2f6:	f108 0801 	add.w	r8, r8, #1
   da2fa:	1064      	asrs	r4, r4, #1
   da2fc:	3608      	adds	r6, #8
   da2fe:	e7f1      	b.n	da2e4 <_strtod_r+0x4ac>
   da300:	b10b      	cbz	r3, da306 <_strtod_r+0x4ce>
   da302:	4682      	mov	sl, r0
   da304:	468b      	mov	fp, r1
   da306:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da30a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   da30e:	4652      	mov	r2, sl
   da310:	465b      	mov	r3, fp
   da312:	e9d7 0100 	ldrd	r0, r1, [r7]
   da316:	f7ff f94f 	bl	d95b8 <__aeabi_dmul>
   da31a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da31e:	468b      	mov	fp, r1
   da320:	460a      	mov	r2, r1
   da322:	0d1b      	lsrs	r3, r3, #20
   da324:	493b      	ldr	r1, [pc, #236]	; (da414 <_strtod_r+0x5dc>)
   da326:	051b      	lsls	r3, r3, #20
   da328:	428b      	cmp	r3, r1
   da32a:	4682      	mov	sl, r0
   da32c:	d8c7      	bhi.n	da2be <_strtod_r+0x486>
   da32e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   da332:	428b      	cmp	r3, r1
   da334:	bf86      	itte	hi
   da336:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; da424 <_strtod_r+0x5ec>
   da33a:	f04f 3aff 	movhi.w	sl, #4294967295
   da33e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   da342:	e071      	b.n	da428 <_strtod_r+0x5f0>
   da344:	d070      	beq.n	da428 <_strtod_r+0x5f0>
   da346:	4264      	negs	r4, r4
   da348:	f014 020f 	ands.w	r2, r4, #15
   da34c:	d00a      	beq.n	da364 <_strtod_r+0x52c>
   da34e:	4b2f      	ldr	r3, [pc, #188]	; (da40c <_strtod_r+0x5d4>)
   da350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   da354:	4650      	mov	r0, sl
   da356:	4659      	mov	r1, fp
   da358:	e9d3 2300 	ldrd	r2, r3, [r3]
   da35c:	f7ff fa56 	bl	d980c <__aeabi_ddiv>
   da360:	4682      	mov	sl, r0
   da362:	468b      	mov	fp, r1
   da364:	1124      	asrs	r4, r4, #4
   da366:	d05f      	beq.n	da428 <_strtod_r+0x5f0>
   da368:	2c1f      	cmp	r4, #31
   da36a:	dd04      	ble.n	da376 <_strtod_r+0x53e>
   da36c:	2400      	movs	r4, #0
   da36e:	4625      	mov	r5, r4
   da370:	9405      	str	r4, [sp, #20]
   da372:	9404      	str	r4, [sp, #16]
   da374:	e130      	b.n	da5d8 <_strtod_r+0x7a0>
   da376:	f014 0f10 	tst.w	r4, #16
   da37a:	bf0c      	ite	eq
   da37c:	2300      	moveq	r3, #0
   da37e:	236a      	movne	r3, #106	; 0x6a
   da380:	4e25      	ldr	r6, [pc, #148]	; (da418 <_strtod_r+0x5e0>)
   da382:	9303      	str	r3, [sp, #12]
   da384:	4650      	mov	r0, sl
   da386:	4659      	mov	r1, fp
   da388:	2300      	movs	r3, #0
   da38a:	2c00      	cmp	r4, #0
   da38c:	dd09      	ble.n	da3a2 <_strtod_r+0x56a>
   da38e:	07e2      	lsls	r2, r4, #31
   da390:	d504      	bpl.n	da39c <_strtod_r+0x564>
   da392:	e9d6 2300 	ldrd	r2, r3, [r6]
   da396:	f7ff f90f 	bl	d95b8 <__aeabi_dmul>
   da39a:	2301      	movs	r3, #1
   da39c:	1064      	asrs	r4, r4, #1
   da39e:	3608      	adds	r6, #8
   da3a0:	e7f3      	b.n	da38a <_strtod_r+0x552>
   da3a2:	b10b      	cbz	r3, da3a8 <_strtod_r+0x570>
   da3a4:	4682      	mov	sl, r0
   da3a6:	468b      	mov	fp, r1
   da3a8:	9b03      	ldr	r3, [sp, #12]
   da3aa:	b1eb      	cbz	r3, da3e8 <_strtod_r+0x5b0>
   da3ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
   da3b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da3b4:	2b00      	cmp	r3, #0
   da3b6:	4659      	mov	r1, fp
   da3b8:	dd16      	ble.n	da3e8 <_strtod_r+0x5b0>
   da3ba:	2b1f      	cmp	r3, #31
   da3bc:	dd0e      	ble.n	da3dc <_strtod_r+0x5a4>
   da3be:	2b34      	cmp	r3, #52	; 0x34
   da3c0:	bfde      	ittt	le
   da3c2:	3b20      	suble	r3, #32
   da3c4:	f04f 32ff 	movle.w	r2, #4294967295
   da3c8:	fa02 f303 	lslle.w	r3, r2, r3
   da3cc:	f04f 0a00 	mov.w	sl, #0
   da3d0:	bfcc      	ite	gt
   da3d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   da3d6:	ea03 0b01 	andle.w	fp, r3, r1
   da3da:	e005      	b.n	da3e8 <_strtod_r+0x5b0>
   da3dc:	f04f 32ff 	mov.w	r2, #4294967295
   da3e0:	fa02 f303 	lsl.w	r3, r2, r3
   da3e4:	ea03 0a0a 	and.w	sl, r3, sl
   da3e8:	2200      	movs	r2, #0
   da3ea:	2300      	movs	r3, #0
   da3ec:	4650      	mov	r0, sl
   da3ee:	4659      	mov	r1, fp
   da3f0:	f7ff fb4a 	bl	d9a88 <__aeabi_dcmpeq>
   da3f4:	2800      	cmp	r0, #0
   da3f6:	d1b9      	bne.n	da36c <_strtod_r+0x534>
   da3f8:	e018      	b.n	da42c <_strtod_r+0x5f4>
   da3fa:	bf00      	nop
   da3fc:	000dc734 	.word	0x000dc734
   da400:	000dc737 	.word	0x000dc737
   da404:	000dc73d 	.word	0x000dc73d
   da408:	000dc720 	.word	0x000dc720
   da40c:	000dc768 	.word	0x000dc768
   da410:	000dc830 	.word	0x000dc830
   da414:	7ca00000 	.word	0x7ca00000
   da418:	000dc740 	.word	0x000dc740
   da41c:	7ff00000 	.word	0x7ff00000
   da420:	fff80000 	.word	0xfff80000
   da424:	7fefffff 	.word	0x7fefffff
   da428:	2300      	movs	r3, #0
   da42a:	9303      	str	r3, [sp, #12]
   da42c:	9b05      	ldr	r3, [sp, #20]
   da42e:	9300      	str	r3, [sp, #0]
   da430:	9a04      	ldr	r2, [sp, #16]
   da432:	9907      	ldr	r1, [sp, #28]
   da434:	9802      	ldr	r0, [sp, #8]
   da436:	462b      	mov	r3, r5
   da438:	f000 feaa 	bl	db190 <__s2b>
   da43c:	9005      	str	r0, [sp, #20]
   da43e:	2800      	cmp	r0, #0
   da440:	f43f af3d 	beq.w	da2be <_strtod_r+0x486>
   da444:	f1b9 0f00 	cmp.w	r9, #0
   da448:	f1c9 0300 	rsb	r3, r9, #0
   da44c:	bfa8      	it	ge
   da44e:	2300      	movge	r3, #0
   da450:	930d      	str	r3, [sp, #52]	; 0x34
   da452:	2400      	movs	r4, #0
   da454:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   da458:	9312      	str	r3, [sp, #72]	; 0x48
   da45a:	4625      	mov	r5, r4
   da45c:	9b05      	ldr	r3, [sp, #20]
   da45e:	9802      	ldr	r0, [sp, #8]
   da460:	6859      	ldr	r1, [r3, #4]
   da462:	f000 fe0e 	bl	db082 <_Balloc>
   da466:	9004      	str	r0, [sp, #16]
   da468:	2800      	cmp	r0, #0
   da46a:	f43f af2c 	beq.w	da2c6 <_strtod_r+0x48e>
   da46e:	9b05      	ldr	r3, [sp, #20]
   da470:	691a      	ldr	r2, [r3, #16]
   da472:	3202      	adds	r2, #2
   da474:	f103 010c 	add.w	r1, r3, #12
   da478:	0092      	lsls	r2, r2, #2
   da47a:	300c      	adds	r0, #12
   da47c:	f7ff fc0e 	bl	d9c9c <memcpy>
   da480:	aa1a      	add	r2, sp, #104	; 0x68
   da482:	a919      	add	r1, sp, #100	; 0x64
   da484:	ec4b ab10 	vmov	d0, sl, fp
   da488:	9802      	ldr	r0, [sp, #8]
   da48a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da48e:	f001 f934 	bl	db6fa <__d2b>
   da492:	9018      	str	r0, [sp, #96]	; 0x60
   da494:	2800      	cmp	r0, #0
   da496:	f43f af16 	beq.w	da2c6 <_strtod_r+0x48e>
   da49a:	2101      	movs	r1, #1
   da49c:	9802      	ldr	r0, [sp, #8]
   da49e:	f000 ff02 	bl	db2a6 <__i2b>
   da4a2:	4605      	mov	r5, r0
   da4a4:	2800      	cmp	r0, #0
   da4a6:	f43f af0e 	beq.w	da2c6 <_strtod_r+0x48e>
   da4aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da4ac:	9903      	ldr	r1, [sp, #12]
   da4ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   da4b0:	2b00      	cmp	r3, #0
   da4b2:	bfad      	iteet	ge
   da4b4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   da4b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   da4b8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   da4bc:	eb02 0803 	addge.w	r8, r2, r3
   da4c0:	bfb8      	it	lt
   da4c2:	1ad2      	sublt	r2, r2, r3
   da4c4:	eba3 0301 	sub.w	r3, r3, r1
   da4c8:	4433      	add	r3, r6
   da4ca:	49b5      	ldr	r1, [pc, #724]	; (da7a0 <_strtod_r+0x968>)
   da4cc:	bfa8      	it	ge
   da4ce:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   da4d0:	3b01      	subs	r3, #1
   da4d2:	428b      	cmp	r3, r1
   da4d4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   da4d8:	f280 808a 	bge.w	da5f0 <_strtod_r+0x7b8>
   da4dc:	1ac9      	subs	r1, r1, r3
   da4de:	291f      	cmp	r1, #31
   da4e0:	bfc8      	it	gt
   da4e2:	4fb0      	ldrgt	r7, [pc, #704]	; (da7a4 <_strtod_r+0x96c>)
   da4e4:	f04f 0901 	mov.w	r9, #1
   da4e8:	bfd4      	ite	le
   da4ea:	fa09 f301 	lslle.w	r3, r9, r1
   da4ee:	1aff      	subgt	r7, r7, r3
   da4f0:	eba6 0601 	sub.w	r6, r6, r1
   da4f4:	bfd9      	ittee	le
   da4f6:	9306      	strle	r3, [sp, #24]
   da4f8:	2700      	movle	r7, #0
   da4fa:	fa09 f707 	lslgt.w	r7, r9, r7
   da4fe:	f8cd 9018 	strgt.w	r9, [sp, #24]
   da502:	eb08 0906 	add.w	r9, r8, r6
   da506:	9b03      	ldr	r3, [sp, #12]
   da508:	45c8      	cmp	r8, r9
   da50a:	4416      	add	r6, r2
   da50c:	441e      	add	r6, r3
   da50e:	4643      	mov	r3, r8
   da510:	bfa8      	it	ge
   da512:	464b      	movge	r3, r9
   da514:	42b3      	cmp	r3, r6
   da516:	bfa8      	it	ge
   da518:	4633      	movge	r3, r6
   da51a:	2b00      	cmp	r3, #0
   da51c:	bfc2      	ittt	gt
   da51e:	ebc3 0909 	rsbgt	r9, r3, r9
   da522:	1af6      	subgt	r6, r6, r3
   da524:	ebc3 0808 	rsbgt	r8, r3, r8
   da528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da52a:	2b00      	cmp	r3, #0
   da52c:	d164      	bne.n	da5f8 <_strtod_r+0x7c0>
   da52e:	f1b9 0f00 	cmp.w	r9, #0
   da532:	dc7a      	bgt.n	da62a <_strtod_r+0x7f2>
   da534:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da536:	2b00      	cmp	r3, #0
   da538:	f040 8081 	bne.w	da63e <_strtod_r+0x806>
   da53c:	2e00      	cmp	r6, #0
   da53e:	f300 8088 	bgt.w	da652 <_strtod_r+0x81a>
   da542:	f1b8 0f00 	cmp.w	r8, #0
   da546:	f300 808e 	bgt.w	da666 <_strtod_r+0x82e>
   da54a:	9a04      	ldr	r2, [sp, #16]
   da54c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da54e:	9802      	ldr	r0, [sp, #8]
   da550:	f000 ffff 	bl	db552 <__mdiff>
   da554:	4604      	mov	r4, r0
   da556:	2800      	cmp	r0, #0
   da558:	f43f aeb5 	beq.w	da2c6 <_strtod_r+0x48e>
   da55c:	68c3      	ldr	r3, [r0, #12]
   da55e:	9307      	str	r3, [sp, #28]
   da560:	2300      	movs	r3, #0
   da562:	60c3      	str	r3, [r0, #12]
   da564:	4629      	mov	r1, r5
   da566:	f000 ffd8 	bl	db51a <__mcmp>
   da56a:	2800      	cmp	r0, #0
   da56c:	f280 8089 	bge.w	da682 <_strtod_r+0x84a>
   da570:	9b07      	ldr	r3, [sp, #28]
   da572:	2b00      	cmp	r3, #0
   da574:	f040 8204 	bne.w	da980 <_strtod_r+0xb48>
   da578:	f1ba 0f00 	cmp.w	sl, #0
   da57c:	f040 8200 	bne.w	da980 <_strtod_r+0xb48>
   da580:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da584:	2b00      	cmp	r3, #0
   da586:	f040 81fb 	bne.w	da980 <_strtod_r+0xb48>
   da58a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da58e:	0d1b      	lsrs	r3, r3, #20
   da590:	051b      	lsls	r3, r3, #20
   da592:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da596:	f240 81f3 	bls.w	da980 <_strtod_r+0xb48>
   da59a:	6963      	ldr	r3, [r4, #20]
   da59c:	2b00      	cmp	r3, #0
   da59e:	d06c      	beq.n	da67a <_strtod_r+0x842>
   da5a0:	4621      	mov	r1, r4
   da5a2:	2201      	movs	r2, #1
   da5a4:	9802      	ldr	r0, [sp, #8]
   da5a6:	f000 ff67 	bl	db478 <__lshift>
   da5aa:	4629      	mov	r1, r5
   da5ac:	4604      	mov	r4, r0
   da5ae:	f000 ffb4 	bl	db51a <__mcmp>
   da5b2:	2800      	cmp	r0, #0
   da5b4:	f340 81e4 	ble.w	da980 <_strtod_r+0xb48>
   da5b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da5bc:	9a03      	ldr	r2, [sp, #12]
   da5be:	0d1b      	lsrs	r3, r3, #20
   da5c0:	051b      	lsls	r3, r3, #20
   da5c2:	2a00      	cmp	r2, #0
   da5c4:	f000 808c 	beq.w	da6e0 <_strtod_r+0x8a8>
   da5c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da5cc:	f300 8088 	bgt.w	da6e0 <_strtod_r+0x8a8>
   da5d0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   da5d4:	f300 81d6 	bgt.w	da984 <_strtod_r+0xb4c>
   da5d8:	9a02      	ldr	r2, [sp, #8]
   da5da:	2322      	movs	r3, #34	; 0x22
   da5dc:	f04f 0a00 	mov.w	sl, #0
   da5e0:	f04f 0b00 	mov.w	fp, #0
   da5e4:	6013      	str	r3, [r2, #0]
   da5e6:	9b05      	ldr	r3, [sp, #20]
   da5e8:	2b00      	cmp	r3, #0
   da5ea:	f040 81dc 	bne.w	da9a6 <_strtod_r+0xb6e>
   da5ee:	e1ee      	b.n	da9ce <_strtod_r+0xb96>
   da5f0:	2301      	movs	r3, #1
   da5f2:	2700      	movs	r7, #0
   da5f4:	9306      	str	r3, [sp, #24]
   da5f6:	e784      	b.n	da502 <_strtod_r+0x6ca>
   da5f8:	4629      	mov	r1, r5
   da5fa:	461a      	mov	r2, r3
   da5fc:	9802      	ldr	r0, [sp, #8]
   da5fe:	f000 feed 	bl	db3dc <__pow5mult>
   da602:	4605      	mov	r5, r0
   da604:	2800      	cmp	r0, #0
   da606:	f43f ae5e 	beq.w	da2c6 <_strtod_r+0x48e>
   da60a:	4601      	mov	r1, r0
   da60c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da60e:	9802      	ldr	r0, [sp, #8]
   da610:	f000 fe52 	bl	db2b8 <__multiply>
   da614:	9007      	str	r0, [sp, #28]
   da616:	2800      	cmp	r0, #0
   da618:	f43f ae55 	beq.w	da2c6 <_strtod_r+0x48e>
   da61c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da61e:	9802      	ldr	r0, [sp, #8]
   da620:	f000 fd64 	bl	db0ec <_Bfree>
   da624:	9b07      	ldr	r3, [sp, #28]
   da626:	9318      	str	r3, [sp, #96]	; 0x60
   da628:	e781      	b.n	da52e <_strtod_r+0x6f6>
   da62a:	464a      	mov	r2, r9
   da62c:	9918      	ldr	r1, [sp, #96]	; 0x60
   da62e:	9802      	ldr	r0, [sp, #8]
   da630:	f000 ff22 	bl	db478 <__lshift>
   da634:	9018      	str	r0, [sp, #96]	; 0x60
   da636:	2800      	cmp	r0, #0
   da638:	f47f af7c 	bne.w	da534 <_strtod_r+0x6fc>
   da63c:	e643      	b.n	da2c6 <_strtod_r+0x48e>
   da63e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da640:	9904      	ldr	r1, [sp, #16]
   da642:	9802      	ldr	r0, [sp, #8]
   da644:	f000 feca 	bl	db3dc <__pow5mult>
   da648:	9004      	str	r0, [sp, #16]
   da64a:	2800      	cmp	r0, #0
   da64c:	f47f af76 	bne.w	da53c <_strtod_r+0x704>
   da650:	e639      	b.n	da2c6 <_strtod_r+0x48e>
   da652:	4632      	mov	r2, r6
   da654:	9904      	ldr	r1, [sp, #16]
   da656:	9802      	ldr	r0, [sp, #8]
   da658:	f000 ff0e 	bl	db478 <__lshift>
   da65c:	9004      	str	r0, [sp, #16]
   da65e:	2800      	cmp	r0, #0
   da660:	f47f af6f 	bne.w	da542 <_strtod_r+0x70a>
   da664:	e62f      	b.n	da2c6 <_strtod_r+0x48e>
   da666:	4629      	mov	r1, r5
   da668:	4642      	mov	r2, r8
   da66a:	9802      	ldr	r0, [sp, #8]
   da66c:	f000 ff04 	bl	db478 <__lshift>
   da670:	4605      	mov	r5, r0
   da672:	2800      	cmp	r0, #0
   da674:	f47f af69 	bne.w	da54a <_strtod_r+0x712>
   da678:	e625      	b.n	da2c6 <_strtod_r+0x48e>
   da67a:	6923      	ldr	r3, [r4, #16]
   da67c:	2b01      	cmp	r3, #1
   da67e:	dc8f      	bgt.n	da5a0 <_strtod_r+0x768>
   da680:	e17e      	b.n	da980 <_strtod_r+0xb48>
   da682:	d161      	bne.n	da748 <_strtod_r+0x910>
   da684:	9a07      	ldr	r2, [sp, #28]
   da686:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da68a:	b322      	cbz	r2, da6d6 <_strtod_r+0x89e>
   da68c:	4946      	ldr	r1, [pc, #280]	; (da7a8 <_strtod_r+0x970>)
   da68e:	428b      	cmp	r3, r1
   da690:	465a      	mov	r2, fp
   da692:	d12e      	bne.n	da6f2 <_strtod_r+0x8ba>
   da694:	9b03      	ldr	r3, [sp, #12]
   da696:	4651      	mov	r1, sl
   da698:	b163      	cbz	r3, da6b4 <_strtod_r+0x87c>
   da69a:	4b44      	ldr	r3, [pc, #272]	; (da7ac <_strtod_r+0x974>)
   da69c:	4013      	ands	r3, r2
   da69e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da6a2:	d807      	bhi.n	da6b4 <_strtod_r+0x87c>
   da6a4:	0d1b      	lsrs	r3, r3, #20
   da6a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da6aa:	f04f 30ff 	mov.w	r0, #4294967295
   da6ae:	fa00 f303 	lsl.w	r3, r0, r3
   da6b2:	e001      	b.n	da6b8 <_strtod_r+0x880>
   da6b4:	f04f 33ff 	mov.w	r3, #4294967295
   da6b8:	428b      	cmp	r3, r1
   da6ba:	d11a      	bne.n	da6f2 <_strtod_r+0x8ba>
   da6bc:	493c      	ldr	r1, [pc, #240]	; (da7b0 <_strtod_r+0x978>)
   da6be:	428a      	cmp	r2, r1
   da6c0:	d102      	bne.n	da6c8 <_strtod_r+0x890>
   da6c2:	3301      	adds	r3, #1
   da6c4:	f43f adff 	beq.w	da2c6 <_strtod_r+0x48e>
   da6c8:	4b38      	ldr	r3, [pc, #224]	; (da7ac <_strtod_r+0x974>)
   da6ca:	4013      	ands	r3, r2
   da6cc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da6d0:	f04f 0a00 	mov.w	sl, #0
   da6d4:	e154      	b.n	da980 <_strtod_r+0xb48>
   da6d6:	b963      	cbnz	r3, da6f2 <_strtod_r+0x8ba>
   da6d8:	f1ba 0f00 	cmp.w	sl, #0
   da6dc:	d109      	bne.n	da6f2 <_strtod_r+0x8ba>
   da6de:	e76b      	b.n	da5b8 <_strtod_r+0x780>
   da6e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da6e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da6e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da6ec:	f04f 3aff 	mov.w	sl, #4294967295
   da6f0:	e146      	b.n	da980 <_strtod_r+0xb48>
   da6f2:	b117      	cbz	r7, da6fa <_strtod_r+0x8c2>
   da6f4:	ea17 0f0b 	tst.w	r7, fp
   da6f8:	e002      	b.n	da700 <_strtod_r+0x8c8>
   da6fa:	9b06      	ldr	r3, [sp, #24]
   da6fc:	ea13 0f0a 	tst.w	r3, sl
   da700:	f000 813e 	beq.w	da980 <_strtod_r+0xb48>
   da704:	9b07      	ldr	r3, [sp, #28]
   da706:	9a03      	ldr	r2, [sp, #12]
   da708:	4650      	mov	r0, sl
   da70a:	4659      	mov	r1, fp
   da70c:	b153      	cbz	r3, da724 <_strtod_r+0x8ec>
   da70e:	f7ff fb77 	bl	d9e00 <sulp>
   da712:	4602      	mov	r2, r0
   da714:	460b      	mov	r3, r1
   da716:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da71a:	f7fe fd9b 	bl	d9254 <__adddf3>
   da71e:	4682      	mov	sl, r0
   da720:	468b      	mov	fp, r1
   da722:	e12d      	b.n	da980 <_strtod_r+0xb48>
   da724:	f7ff fb6c 	bl	d9e00 <sulp>
   da728:	4602      	mov	r2, r0
   da72a:	460b      	mov	r3, r1
   da72c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da730:	f7fe fd8e 	bl	d9250 <__aeabi_dsub>
   da734:	2200      	movs	r2, #0
   da736:	2300      	movs	r3, #0
   da738:	4682      	mov	sl, r0
   da73a:	468b      	mov	fp, r1
   da73c:	f7ff f9a4 	bl	d9a88 <__aeabi_dcmpeq>
   da740:	2800      	cmp	r0, #0
   da742:	f47f af49 	bne.w	da5d8 <_strtod_r+0x7a0>
   da746:	e11b      	b.n	da980 <_strtod_r+0xb48>
   da748:	4629      	mov	r1, r5
   da74a:	4620      	mov	r0, r4
   da74c:	f001 f823 	bl	db796 <__ratio>
   da750:	ec57 6b10 	vmov	r6, r7, d0
   da754:	2200      	movs	r2, #0
   da756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da75a:	ee10 0a10 	vmov	r0, s0
   da75e:	4639      	mov	r1, r7
   da760:	f7ff f9a6 	bl	d9ab0 <__aeabi_dcmple>
   da764:	2800      	cmp	r0, #0
   da766:	d042      	beq.n	da7ee <_strtod_r+0x9b6>
   da768:	9b07      	ldr	r3, [sp, #28]
   da76a:	b123      	cbz	r3, da776 <_strtod_r+0x93e>
   da76c:	f04f 0800 	mov.w	r8, #0
   da770:	f8df 9040 	ldr.w	r9, [pc, #64]	; da7b4 <_strtod_r+0x97c>
   da774:	e011      	b.n	da79a <_strtod_r+0x962>
   da776:	f1ba 0f00 	cmp.w	sl, #0
   da77a:	d103      	bne.n	da784 <_strtod_r+0x94c>
   da77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da780:	b93b      	cbnz	r3, da792 <_strtod_r+0x95a>
   da782:	e01b      	b.n	da7bc <_strtod_r+0x984>
   da784:	f1ba 0f01 	cmp.w	sl, #1
   da788:	d103      	bne.n	da792 <_strtod_r+0x95a>
   da78a:	f1bb 0f00 	cmp.w	fp, #0
   da78e:	f43f af23 	beq.w	da5d8 <_strtod_r+0x7a0>
   da792:	f8df 9024 	ldr.w	r9, [pc, #36]	; da7b8 <_strtod_r+0x980>
   da796:	f04f 0800 	mov.w	r8, #0
   da79a:	2600      	movs	r6, #0
   da79c:	4f05      	ldr	r7, [pc, #20]	; (da7b4 <_strtod_r+0x97c>)
   da79e:	e039      	b.n	da814 <_strtod_r+0x9dc>
   da7a0:	fffffc02 	.word	0xfffffc02
   da7a4:	fffffbe2 	.word	0xfffffbe2
   da7a8:	000fffff 	.word	0x000fffff
   da7ac:	7ff00000 	.word	0x7ff00000
   da7b0:	7fefffff 	.word	0x7fefffff
   da7b4:	3ff00000 	.word	0x3ff00000
   da7b8:	bff00000 	.word	0xbff00000
   da7bc:	2200      	movs	r2, #0
   da7be:	4b98      	ldr	r3, [pc, #608]	; (daa20 <_strtod_r+0xbe8>)
   da7c0:	4630      	mov	r0, r6
   da7c2:	4639      	mov	r1, r7
   da7c4:	f7ff f96a 	bl	d9a9c <__aeabi_dcmplt>
   da7c8:	b940      	cbnz	r0, da7dc <_strtod_r+0x9a4>
   da7ca:	4630      	mov	r0, r6
   da7cc:	4639      	mov	r1, r7
   da7ce:	2200      	movs	r2, #0
   da7d0:	4b94      	ldr	r3, [pc, #592]	; (daa24 <_strtod_r+0xbec>)
   da7d2:	f7fe fef1 	bl	d95b8 <__aeabi_dmul>
   da7d6:	4606      	mov	r6, r0
   da7d8:	460f      	mov	r7, r1
   da7da:	e001      	b.n	da7e0 <_strtod_r+0x9a8>
   da7dc:	4f91      	ldr	r7, [pc, #580]	; (daa24 <_strtod_r+0xbec>)
   da7de:	2600      	movs	r6, #0
   da7e0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da7e4:	9614      	str	r6, [sp, #80]	; 0x50
   da7e6:	9315      	str	r3, [sp, #84]	; 0x54
   da7e8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   da7ec:	e012      	b.n	da814 <_strtod_r+0x9dc>
   da7ee:	4b8d      	ldr	r3, [pc, #564]	; (daa24 <_strtod_r+0xbec>)
   da7f0:	4630      	mov	r0, r6
   da7f2:	4639      	mov	r1, r7
   da7f4:	2200      	movs	r2, #0
   da7f6:	f7fe fedf 	bl	d95b8 <__aeabi_dmul>
   da7fa:	9b07      	ldr	r3, [sp, #28]
   da7fc:	4606      	mov	r6, r0
   da7fe:	460f      	mov	r7, r1
   da800:	b923      	cbnz	r3, da80c <_strtod_r+0x9d4>
   da802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da806:	900e      	str	r0, [sp, #56]	; 0x38
   da808:	930f      	str	r3, [sp, #60]	; 0x3c
   da80a:	e001      	b.n	da810 <_strtod_r+0x9d8>
   da80c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   da810:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   da814:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da818:	0d1b      	lsrs	r3, r3, #20
   da81a:	051b      	lsls	r3, r3, #20
   da81c:	9306      	str	r3, [sp, #24]
   da81e:	9a06      	ldr	r2, [sp, #24]
   da820:	4b81      	ldr	r3, [pc, #516]	; (daa28 <_strtod_r+0xbf0>)
   da822:	429a      	cmp	r2, r3
   da824:	d12b      	bne.n	da87e <_strtod_r+0xa46>
   da826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da82a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da82e:	ec4b ab10 	vmov	d0, sl, fp
   da832:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da836:	f000 feeb 	bl	db610 <__ulp>
   da83a:	4640      	mov	r0, r8
   da83c:	ec53 2b10 	vmov	r2, r3, d0
   da840:	4649      	mov	r1, r9
   da842:	f7fe feb9 	bl	d95b8 <__aeabi_dmul>
   da846:	4652      	mov	r2, sl
   da848:	465b      	mov	r3, fp
   da84a:	f7fe fd03 	bl	d9254 <__adddf3>
   da84e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da852:	0d1b      	lsrs	r3, r3, #20
   da854:	4a75      	ldr	r2, [pc, #468]	; (daa2c <_strtod_r+0xbf4>)
   da856:	051b      	lsls	r3, r3, #20
   da858:	4293      	cmp	r3, r2
   da85a:	4682      	mov	sl, r0
   da85c:	d90c      	bls.n	da878 <_strtod_r+0xa40>
   da85e:	4b74      	ldr	r3, [pc, #464]	; (daa30 <_strtod_r+0xbf8>)
   da860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da862:	429a      	cmp	r2, r3
   da864:	d103      	bne.n	da86e <_strtod_r+0xa36>
   da866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da868:	3301      	adds	r3, #1
   da86a:	f43f ad2c 	beq.w	da2c6 <_strtod_r+0x48e>
   da86e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; daa30 <_strtod_r+0xbf8>
   da872:	f04f 3aff 	mov.w	sl, #4294967295
   da876:	e072      	b.n	da95e <_strtod_r+0xb26>
   da878:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da87c:	e038      	b.n	da8f0 <_strtod_r+0xab8>
   da87e:	9b03      	ldr	r3, [sp, #12]
   da880:	b333      	cbz	r3, da8d0 <_strtod_r+0xa98>
   da882:	9b06      	ldr	r3, [sp, #24]
   da884:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da888:	d822      	bhi.n	da8d0 <_strtod_r+0xa98>
   da88a:	a35d      	add	r3, pc, #372	; (adr r3, daa00 <_strtod_r+0xbc8>)
   da88c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da890:	4630      	mov	r0, r6
   da892:	4639      	mov	r1, r7
   da894:	f7ff f90c 	bl	d9ab0 <__aeabi_dcmple>
   da898:	b1a8      	cbz	r0, da8c6 <_strtod_r+0xa8e>
   da89a:	4639      	mov	r1, r7
   da89c:	4630      	mov	r0, r6
   da89e:	f7ff f963 	bl	d9b68 <__aeabi_d2uiz>
   da8a2:	2800      	cmp	r0, #0
   da8a4:	bf08      	it	eq
   da8a6:	2001      	moveq	r0, #1
   da8a8:	f7fe fe10 	bl	d94cc <__aeabi_ui2d>
   da8ac:	9b07      	ldr	r3, [sp, #28]
   da8ae:	4606      	mov	r6, r0
   da8b0:	460f      	mov	r7, r1
   da8b2:	b923      	cbnz	r3, da8be <_strtod_r+0xa86>
   da8b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da8b8:	9010      	str	r0, [sp, #64]	; 0x40
   da8ba:	9311      	str	r3, [sp, #68]	; 0x44
   da8bc:	e001      	b.n	da8c2 <_strtod_r+0xa8a>
   da8be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da8c2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da8c6:	9a06      	ldr	r2, [sp, #24]
   da8c8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da8cc:	ebc2 0903 	rsb	r9, r2, r3
   da8d0:	ed9d 0b08 	vldr	d0, [sp, #32]
   da8d4:	f000 fe9c 	bl	db610 <__ulp>
   da8d8:	4640      	mov	r0, r8
   da8da:	ec53 2b10 	vmov	r2, r3, d0
   da8de:	4649      	mov	r1, r9
   da8e0:	f7fe fe6a 	bl	d95b8 <__aeabi_dmul>
   da8e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da8e8:	f7fe fcb4 	bl	d9254 <__adddf3>
   da8ec:	4682      	mov	sl, r0
   da8ee:	468b      	mov	fp, r1
   da8f0:	9b03      	ldr	r3, [sp, #12]
   da8f2:	bba3      	cbnz	r3, da95e <_strtod_r+0xb26>
   da8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da8f8:	0d1b      	lsrs	r3, r3, #20
   da8fa:	9a06      	ldr	r2, [sp, #24]
   da8fc:	051b      	lsls	r3, r3, #20
   da8fe:	429a      	cmp	r2, r3
   da900:	46d8      	mov	r8, fp
   da902:	d12c      	bne.n	da95e <_strtod_r+0xb26>
   da904:	4639      	mov	r1, r7
   da906:	4630      	mov	r0, r6
   da908:	f7ff f906 	bl	d9b18 <__aeabi_d2iz>
   da90c:	f7fe fdee 	bl	d94ec <__aeabi_i2d>
   da910:	460b      	mov	r3, r1
   da912:	4602      	mov	r2, r0
   da914:	4639      	mov	r1, r7
   da916:	4630      	mov	r0, r6
   da918:	f7fe fc9a 	bl	d9250 <__aeabi_dsub>
   da91c:	9b07      	ldr	r3, [sp, #28]
   da91e:	4606      	mov	r6, r0
   da920:	460f      	mov	r7, r1
   da922:	b92b      	cbnz	r3, da930 <_strtod_r+0xaf8>
   da924:	f1ba 0f00 	cmp.w	sl, #0
   da928:	d102      	bne.n	da930 <_strtod_r+0xaf8>
   da92a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da92e:	b183      	cbz	r3, da952 <_strtod_r+0xb1a>
   da930:	a335      	add	r3, pc, #212	; (adr r3, daa08 <_strtod_r+0xbd0>)
   da932:	e9d3 2300 	ldrd	r2, r3, [r3]
   da936:	4630      	mov	r0, r6
   da938:	4639      	mov	r1, r7
   da93a:	f7ff f8af 	bl	d9a9c <__aeabi_dcmplt>
   da93e:	2800      	cmp	r0, #0
   da940:	d131      	bne.n	da9a6 <_strtod_r+0xb6e>
   da942:	a333      	add	r3, pc, #204	; (adr r3, daa10 <_strtod_r+0xbd8>)
   da944:	e9d3 2300 	ldrd	r2, r3, [r3]
   da948:	4630      	mov	r0, r6
   da94a:	4639      	mov	r1, r7
   da94c:	f7ff f8c4 	bl	d9ad8 <__aeabi_dcmpgt>
   da950:	e004      	b.n	da95c <_strtod_r+0xb24>
   da952:	a331      	add	r3, pc, #196	; (adr r3, daa18 <_strtod_r+0xbe0>)
   da954:	e9d3 2300 	ldrd	r2, r3, [r3]
   da958:	f7ff f8a0 	bl	d9a9c <__aeabi_dcmplt>
   da95c:	bb18      	cbnz	r0, da9a6 <_strtod_r+0xb6e>
   da95e:	9918      	ldr	r1, [sp, #96]	; 0x60
   da960:	9802      	ldr	r0, [sp, #8]
   da962:	f000 fbc3 	bl	db0ec <_Bfree>
   da966:	9904      	ldr	r1, [sp, #16]
   da968:	9802      	ldr	r0, [sp, #8]
   da96a:	f000 fbbf 	bl	db0ec <_Bfree>
   da96e:	4629      	mov	r1, r5
   da970:	9802      	ldr	r0, [sp, #8]
   da972:	f000 fbbb 	bl	db0ec <_Bfree>
   da976:	4621      	mov	r1, r4
   da978:	9802      	ldr	r0, [sp, #8]
   da97a:	f000 fbb7 	bl	db0ec <_Bfree>
   da97e:	e56d      	b.n	da45c <_strtod_r+0x624>
   da980:	9b03      	ldr	r3, [sp, #12]
   da982:	b183      	cbz	r3, da9a6 <_strtod_r+0xb6e>
   da984:	4b2b      	ldr	r3, [pc, #172]	; (daa34 <_strtod_r+0xbfc>)
   da986:	930b      	str	r3, [sp, #44]	; 0x2c
   da988:	2300      	movs	r3, #0
   da98a:	930a      	str	r3, [sp, #40]	; 0x28
   da98c:	4650      	mov	r0, sl
   da98e:	4659      	mov	r1, fp
   da990:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da994:	f7fe fe10 	bl	d95b8 <__aeabi_dmul>
   da998:	4682      	mov	sl, r0
   da99a:	468b      	mov	fp, r1
   da99c:	b919      	cbnz	r1, da9a6 <_strtod_r+0xb6e>
   da99e:	b910      	cbnz	r0, da9a6 <_strtod_r+0xb6e>
   da9a0:	9a02      	ldr	r2, [sp, #8]
   da9a2:	2322      	movs	r3, #34	; 0x22
   da9a4:	6013      	str	r3, [r2, #0]
   da9a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   da9a8:	9802      	ldr	r0, [sp, #8]
   da9aa:	f000 fb9f 	bl	db0ec <_Bfree>
   da9ae:	9904      	ldr	r1, [sp, #16]
   da9b0:	9802      	ldr	r0, [sp, #8]
   da9b2:	f000 fb9b 	bl	db0ec <_Bfree>
   da9b6:	4629      	mov	r1, r5
   da9b8:	9802      	ldr	r0, [sp, #8]
   da9ba:	f000 fb97 	bl	db0ec <_Bfree>
   da9be:	9905      	ldr	r1, [sp, #20]
   da9c0:	9802      	ldr	r0, [sp, #8]
   da9c2:	f000 fb93 	bl	db0ec <_Bfree>
   da9c6:	4621      	mov	r1, r4
   da9c8:	9802      	ldr	r0, [sp, #8]
   da9ca:	f000 fb8f 	bl	db0ec <_Bfree>
   da9ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da9d0:	b113      	cbz	r3, da9d8 <_strtod_r+0xba0>
   da9d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da9d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da9d6:	6013      	str	r3, [r2, #0]
   da9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da9da:	b11b      	cbz	r3, da9e4 <_strtod_r+0xbac>
   da9dc:	4652      	mov	r2, sl
   da9de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da9e2:	e007      	b.n	da9f4 <_strtod_r+0xbbc>
   da9e4:	4652      	mov	r2, sl
   da9e6:	465b      	mov	r3, fp
   da9e8:	e004      	b.n	da9f4 <_strtod_r+0xbbc>
   da9ea:	2500      	movs	r5, #0
   da9ec:	462a      	mov	r2, r5
   da9ee:	2101      	movs	r1, #1
   da9f0:	f7ff bb41 	b.w	da076 <_strtod_r+0x23e>
   da9f4:	ec43 2b10 	vmov	d0, r2, r3
   da9f8:	b01d      	add	sp, #116	; 0x74
   da9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da9fe:	bf00      	nop
   daa00:	ffc00000 	.word	0xffc00000
   daa04:	41dfffff 	.word	0x41dfffff
   daa08:	94a03595 	.word	0x94a03595
   daa0c:	3fdfffff 	.word	0x3fdfffff
   daa10:	35afe535 	.word	0x35afe535
   daa14:	3fe00000 	.word	0x3fe00000
   daa18:	94a03595 	.word	0x94a03595
   daa1c:	3fcfffff 	.word	0x3fcfffff
   daa20:	3ff00000 	.word	0x3ff00000
   daa24:	3fe00000 	.word	0x3fe00000
   daa28:	7fe00000 	.word	0x7fe00000
   daa2c:	7c9fffff 	.word	0x7c9fffff
   daa30:	7fefffff 	.word	0x7fefffff
   daa34:	39500000 	.word	0x39500000

000daa38 <strtod>:
   daa38:	4b02      	ldr	r3, [pc, #8]	; (daa44 <strtod+0xc>)
   daa3a:	460a      	mov	r2, r1
   daa3c:	4601      	mov	r1, r0
   daa3e:	6818      	ldr	r0, [r3, #0]
   daa40:	f7ff b9fa 	b.w	d9e38 <_strtod_r>
   daa44:	2003e17c 	.word	0x2003e17c

000daa48 <rshift>:
   daa48:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa4a:	6906      	ldr	r6, [r0, #16]
   daa4c:	114b      	asrs	r3, r1, #5
   daa4e:	42b3      	cmp	r3, r6
   daa50:	f100 0514 	add.w	r5, r0, #20
   daa54:	da27      	bge.n	daaa6 <rshift+0x5e>
   daa56:	f011 011f 	ands.w	r1, r1, #31
   daa5a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   daa5e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   daa62:	d101      	bne.n	daa68 <rshift+0x20>
   daa64:	4629      	mov	r1, r5
   daa66:	e016      	b.n	daa96 <rshift+0x4e>
   daa68:	1d14      	adds	r4, r2, #4
   daa6a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   daa6e:	f1c1 0e20 	rsb	lr, r1, #32
   daa72:	40ca      	lsrs	r2, r1
   daa74:	462b      	mov	r3, r5
   daa76:	42b4      	cmp	r4, r6
   daa78:	d209      	bcs.n	daa8e <rshift+0x46>
   daa7a:	6827      	ldr	r7, [r4, #0]
   daa7c:	fa07 f70e 	lsl.w	r7, r7, lr
   daa80:	433a      	orrs	r2, r7
   daa82:	f843 2b04 	str.w	r2, [r3], #4
   daa86:	f854 2b04 	ldr.w	r2, [r4], #4
   daa8a:	40ca      	lsrs	r2, r1
   daa8c:	e7f3      	b.n	daa76 <rshift+0x2e>
   daa8e:	601a      	str	r2, [r3, #0]
   daa90:	b152      	cbz	r2, daaa8 <rshift+0x60>
   daa92:	3304      	adds	r3, #4
   daa94:	e008      	b.n	daaa8 <rshift+0x60>
   daa96:	42b2      	cmp	r2, r6
   daa98:	460b      	mov	r3, r1
   daa9a:	d205      	bcs.n	daaa8 <rshift+0x60>
   daa9c:	f852 3b04 	ldr.w	r3, [r2], #4
   daaa0:	f841 3b04 	str.w	r3, [r1], #4
   daaa4:	e7f7      	b.n	daa96 <rshift+0x4e>
   daaa6:	462b      	mov	r3, r5
   daaa8:	1b5b      	subs	r3, r3, r5
   daaaa:	109b      	asrs	r3, r3, #2
   daaac:	6103      	str	r3, [r0, #16]
   daaae:	b903      	cbnz	r3, daab2 <rshift+0x6a>
   daab0:	6143      	str	r3, [r0, #20]
   daab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000daab4 <__hexdig_fun>:
   daab4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   daab8:	2b09      	cmp	r3, #9
   daaba:	d801      	bhi.n	daac0 <__hexdig_fun+0xc>
   daabc:	3820      	subs	r0, #32
   daabe:	e00a      	b.n	daad6 <__hexdig_fun+0x22>
   daac0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   daac4:	2b05      	cmp	r3, #5
   daac6:	d801      	bhi.n	daacc <__hexdig_fun+0x18>
   daac8:	3847      	subs	r0, #71	; 0x47
   daaca:	e004      	b.n	daad6 <__hexdig_fun+0x22>
   daacc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   daad0:	2b05      	cmp	r3, #5
   daad2:	d802      	bhi.n	daada <__hexdig_fun+0x26>
   daad4:	3827      	subs	r0, #39	; 0x27
   daad6:	b2c0      	uxtb	r0, r0
   daad8:	4770      	bx	lr
   daada:	2000      	movs	r0, #0
   daadc:	4770      	bx	lr

000daade <__gethex>:
   daade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daae2:	b08b      	sub	sp, #44	; 0x2c
   daae4:	468a      	mov	sl, r1
   daae6:	4690      	mov	r8, r2
   daae8:	9306      	str	r3, [sp, #24]
   daaea:	9002      	str	r0, [sp, #8]
   daaec:	f7ff f8d2 	bl	d9c94 <_localeconv_r>
   daaf0:	6803      	ldr	r3, [r0, #0]
   daaf2:	9303      	str	r3, [sp, #12]
   daaf4:	4618      	mov	r0, r3
   daaf6:	f7ff f92f 	bl	d9d58 <strlen>
   daafa:	9b03      	ldr	r3, [sp, #12]
   daafc:	9001      	str	r0, [sp, #4]
   daafe:	4403      	add	r3, r0
   dab00:	f04f 0b00 	mov.w	fp, #0
   dab04:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dab08:	9307      	str	r3, [sp, #28]
   dab0a:	f8da 3000 	ldr.w	r3, [sl]
   dab0e:	3302      	adds	r3, #2
   dab10:	461f      	mov	r7, r3
   dab12:	f813 0b01 	ldrb.w	r0, [r3], #1
   dab16:	2830      	cmp	r0, #48	; 0x30
   dab18:	d102      	bne.n	dab20 <__gethex+0x42>
   dab1a:	f10b 0b01 	add.w	fp, fp, #1
   dab1e:	e7f7      	b.n	dab10 <__gethex+0x32>
   dab20:	f7ff ffc8 	bl	daab4 <__hexdig_fun>
   dab24:	4604      	mov	r4, r0
   dab26:	b9e0      	cbnz	r0, dab62 <__gethex+0x84>
   dab28:	9a01      	ldr	r2, [sp, #4]
   dab2a:	9903      	ldr	r1, [sp, #12]
   dab2c:	4638      	mov	r0, r7
   dab2e:	f7ff f93f 	bl	d9db0 <strncmp>
   dab32:	2800      	cmp	r0, #0
   dab34:	d134      	bne.n	daba0 <__gethex+0xc2>
   dab36:	9b01      	ldr	r3, [sp, #4]
   dab38:	5cf8      	ldrb	r0, [r7, r3]
   dab3a:	18fe      	adds	r6, r7, r3
   dab3c:	f7ff ffba 	bl	daab4 <__hexdig_fun>
   dab40:	b380      	cbz	r0, daba4 <__gethex+0xc6>
   dab42:	4633      	mov	r3, r6
   dab44:	7818      	ldrb	r0, [r3, #0]
   dab46:	2830      	cmp	r0, #48	; 0x30
   dab48:	461f      	mov	r7, r3
   dab4a:	f103 0301 	add.w	r3, r3, #1
   dab4e:	d0f9      	beq.n	dab44 <__gethex+0x66>
   dab50:	f7ff ffb0 	bl	daab4 <__hexdig_fun>
   dab54:	fab0 f580 	clz	r5, r0
   dab58:	096d      	lsrs	r5, r5, #5
   dab5a:	4634      	mov	r4, r6
   dab5c:	f04f 0b01 	mov.w	fp, #1
   dab60:	e001      	b.n	dab66 <__gethex+0x88>
   dab62:	2500      	movs	r5, #0
   dab64:	462c      	mov	r4, r5
   dab66:	463a      	mov	r2, r7
   dab68:	4616      	mov	r6, r2
   dab6a:	3201      	adds	r2, #1
   dab6c:	7830      	ldrb	r0, [r6, #0]
   dab6e:	f7ff ffa1 	bl	daab4 <__hexdig_fun>
   dab72:	2800      	cmp	r0, #0
   dab74:	d1f8      	bne.n	dab68 <__gethex+0x8a>
   dab76:	9a01      	ldr	r2, [sp, #4]
   dab78:	9903      	ldr	r1, [sp, #12]
   dab7a:	4630      	mov	r0, r6
   dab7c:	f7ff f918 	bl	d9db0 <strncmp>
   dab80:	b950      	cbnz	r0, dab98 <__gethex+0xba>
   dab82:	b954      	cbnz	r4, dab9a <__gethex+0xbc>
   dab84:	9b01      	ldr	r3, [sp, #4]
   dab86:	18f4      	adds	r4, r6, r3
   dab88:	4622      	mov	r2, r4
   dab8a:	4616      	mov	r6, r2
   dab8c:	3201      	adds	r2, #1
   dab8e:	7830      	ldrb	r0, [r6, #0]
   dab90:	f7ff ff90 	bl	daab4 <__hexdig_fun>
   dab94:	2800      	cmp	r0, #0
   dab96:	d1f8      	bne.n	dab8a <__gethex+0xac>
   dab98:	b134      	cbz	r4, daba8 <__gethex+0xca>
   dab9a:	1ba4      	subs	r4, r4, r6
   dab9c:	00a4      	lsls	r4, r4, #2
   dab9e:	e003      	b.n	daba8 <__gethex+0xca>
   daba0:	463e      	mov	r6, r7
   daba2:	e000      	b.n	daba6 <__gethex+0xc8>
   daba4:	4604      	mov	r4, r0
   daba6:	2501      	movs	r5, #1
   daba8:	7833      	ldrb	r3, [r6, #0]
   dabaa:	2b50      	cmp	r3, #80	; 0x50
   dabac:	d001      	beq.n	dabb2 <__gethex+0xd4>
   dabae:	2b70      	cmp	r3, #112	; 0x70
   dabb0:	d12a      	bne.n	dac08 <__gethex+0x12a>
   dabb2:	7873      	ldrb	r3, [r6, #1]
   dabb4:	2b2b      	cmp	r3, #43	; 0x2b
   dabb6:	d008      	beq.n	dabca <__gethex+0xec>
   dabb8:	2b2d      	cmp	r3, #45	; 0x2d
   dabba:	d003      	beq.n	dabc4 <__gethex+0xe6>
   dabbc:	1c71      	adds	r1, r6, #1
   dabbe:	f04f 0900 	mov.w	r9, #0
   dabc2:	e005      	b.n	dabd0 <__gethex+0xf2>
   dabc4:	f04f 0901 	mov.w	r9, #1
   dabc8:	e001      	b.n	dabce <__gethex+0xf0>
   dabca:	f04f 0900 	mov.w	r9, #0
   dabce:	1cb1      	adds	r1, r6, #2
   dabd0:	7808      	ldrb	r0, [r1, #0]
   dabd2:	f7ff ff6f 	bl	daab4 <__hexdig_fun>
   dabd6:	1e43      	subs	r3, r0, #1
   dabd8:	b2db      	uxtb	r3, r3
   dabda:	2b18      	cmp	r3, #24
   dabdc:	d814      	bhi.n	dac08 <__gethex+0x12a>
   dabde:	f1a0 0210 	sub.w	r2, r0, #16
   dabe2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dabe6:	f7ff ff65 	bl	daab4 <__hexdig_fun>
   dabea:	1e43      	subs	r3, r0, #1
   dabec:	b2db      	uxtb	r3, r3
   dabee:	2b18      	cmp	r3, #24
   dabf0:	d804      	bhi.n	dabfc <__gethex+0x11e>
   dabf2:	230a      	movs	r3, #10
   dabf4:	fb03 0202 	mla	r2, r3, r2, r0
   dabf8:	3a10      	subs	r2, #16
   dabfa:	e7f2      	b.n	dabe2 <__gethex+0x104>
   dabfc:	f1b9 0f00 	cmp.w	r9, #0
   dac00:	d000      	beq.n	dac04 <__gethex+0x126>
   dac02:	4252      	negs	r2, r2
   dac04:	4414      	add	r4, r2
   dac06:	e000      	b.n	dac0a <__gethex+0x12c>
   dac08:	4631      	mov	r1, r6
   dac0a:	f8ca 1000 	str.w	r1, [sl]
   dac0e:	b12d      	cbz	r5, dac1c <__gethex+0x13e>
   dac10:	f1bb 0f00 	cmp.w	fp, #0
   dac14:	bf14      	ite	ne
   dac16:	2000      	movne	r0, #0
   dac18:	2006      	moveq	r0, #6
   dac1a:	e17c      	b.n	daf16 <__gethex+0x438>
   dac1c:	1bf3      	subs	r3, r6, r7
   dac1e:	3b01      	subs	r3, #1
   dac20:	4629      	mov	r1, r5
   dac22:	2b07      	cmp	r3, #7
   dac24:	dd02      	ble.n	dac2c <__gethex+0x14e>
   dac26:	3101      	adds	r1, #1
   dac28:	105b      	asrs	r3, r3, #1
   dac2a:	e7fa      	b.n	dac22 <__gethex+0x144>
   dac2c:	9802      	ldr	r0, [sp, #8]
   dac2e:	f000 fa28 	bl	db082 <_Balloc>
   dac32:	9b01      	ldr	r3, [sp, #4]
   dac34:	f100 0a14 	add.w	sl, r0, #20
   dac38:	f04f 0900 	mov.w	r9, #0
   dac3c:	f1c3 0301 	rsb	r3, r3, #1
   dac40:	4605      	mov	r5, r0
   dac42:	f8cd a010 	str.w	sl, [sp, #16]
   dac46:	46cb      	mov	fp, r9
   dac48:	9308      	str	r3, [sp, #32]
   dac4a:	42b7      	cmp	r7, r6
   dac4c:	d22f      	bcs.n	dacae <__gethex+0x1d0>
   dac4e:	1e73      	subs	r3, r6, #1
   dac50:	9305      	str	r3, [sp, #20]
   dac52:	9a07      	ldr	r2, [sp, #28]
   dac54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dac58:	4293      	cmp	r3, r2
   dac5a:	d00b      	beq.n	dac74 <__gethex+0x196>
   dac5c:	f1bb 0f20 	cmp.w	fp, #32
   dac60:	d116      	bne.n	dac90 <__gethex+0x1b2>
   dac62:	9b04      	ldr	r3, [sp, #16]
   dac64:	f8c3 9000 	str.w	r9, [r3]
   dac68:	3304      	adds	r3, #4
   dac6a:	f04f 0900 	mov.w	r9, #0
   dac6e:	9304      	str	r3, [sp, #16]
   dac70:	46cb      	mov	fp, r9
   dac72:	e00d      	b.n	dac90 <__gethex+0x1b2>
   dac74:	9b05      	ldr	r3, [sp, #20]
   dac76:	9a08      	ldr	r2, [sp, #32]
   dac78:	4413      	add	r3, r2
   dac7a:	429f      	cmp	r7, r3
   dac7c:	d8ee      	bhi.n	dac5c <__gethex+0x17e>
   dac7e:	4618      	mov	r0, r3
   dac80:	9a01      	ldr	r2, [sp, #4]
   dac82:	9903      	ldr	r1, [sp, #12]
   dac84:	9309      	str	r3, [sp, #36]	; 0x24
   dac86:	f7ff f893 	bl	d9db0 <strncmp>
   dac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dac8c:	b168      	cbz	r0, dacaa <__gethex+0x1cc>
   dac8e:	e7e5      	b.n	dac5c <__gethex+0x17e>
   dac90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dac94:	f7ff ff0e 	bl	daab4 <__hexdig_fun>
   dac98:	f000 000f 	and.w	r0, r0, #15
   dac9c:	fa00 f00b 	lsl.w	r0, r0, fp
   daca0:	9b05      	ldr	r3, [sp, #20]
   daca2:	ea49 0900 	orr.w	r9, r9, r0
   daca6:	f10b 0b04 	add.w	fp, fp, #4
   dacaa:	461e      	mov	r6, r3
   dacac:	e7cd      	b.n	dac4a <__gethex+0x16c>
   dacae:	9804      	ldr	r0, [sp, #16]
   dacb0:	f840 9b04 	str.w	r9, [r0], #4
   dacb4:	ebca 0000 	rsb	r0, sl, r0
   dacb8:	1080      	asrs	r0, r0, #2
   dacba:	6128      	str	r0, [r5, #16]
   dacbc:	0147      	lsls	r7, r0, #5
   dacbe:	4648      	mov	r0, r9
   dacc0:	f000 faa4 	bl	db20c <__hi0bits>
   dacc4:	f8d8 6000 	ldr.w	r6, [r8]
   dacc8:	1a38      	subs	r0, r7, r0
   dacca:	42b0      	cmp	r0, r6
   daccc:	dd26      	ble.n	dad1c <__gethex+0x23e>
   dacce:	1b87      	subs	r7, r0, r6
   dacd0:	4639      	mov	r1, r7
   dacd2:	4628      	mov	r0, r5
   dacd4:	f000 fda3 	bl	db81e <__any_on>
   dacd8:	b1c8      	cbz	r0, dad0e <__gethex+0x230>
   dacda:	1e7b      	subs	r3, r7, #1
   dacdc:	1159      	asrs	r1, r3, #5
   dacde:	f003 021f 	and.w	r2, r3, #31
   dace2:	f04f 0901 	mov.w	r9, #1
   dace6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dacea:	fa09 f202 	lsl.w	r2, r9, r2
   dacee:	420a      	tst	r2, r1
   dacf0:	d00e      	beq.n	dad10 <__gethex+0x232>
   dacf2:	454b      	cmp	r3, r9
   dacf4:	dc02      	bgt.n	dacfc <__gethex+0x21e>
   dacf6:	f04f 0902 	mov.w	r9, #2
   dacfa:	e009      	b.n	dad10 <__gethex+0x232>
   dacfc:	1eb9      	subs	r1, r7, #2
   dacfe:	4628      	mov	r0, r5
   dad00:	f000 fd8d 	bl	db81e <__any_on>
   dad04:	2800      	cmp	r0, #0
   dad06:	d0f6      	beq.n	dacf6 <__gethex+0x218>
   dad08:	f04f 0903 	mov.w	r9, #3
   dad0c:	e000      	b.n	dad10 <__gethex+0x232>
   dad0e:	4681      	mov	r9, r0
   dad10:	4639      	mov	r1, r7
   dad12:	4628      	mov	r0, r5
   dad14:	f7ff fe98 	bl	daa48 <rshift>
   dad18:	443c      	add	r4, r7
   dad1a:	e00c      	b.n	dad36 <__gethex+0x258>
   dad1c:	da09      	bge.n	dad32 <__gethex+0x254>
   dad1e:	1a37      	subs	r7, r6, r0
   dad20:	4629      	mov	r1, r5
   dad22:	463a      	mov	r2, r7
   dad24:	9802      	ldr	r0, [sp, #8]
   dad26:	f000 fba7 	bl	db478 <__lshift>
   dad2a:	1be4      	subs	r4, r4, r7
   dad2c:	4605      	mov	r5, r0
   dad2e:	f100 0a14 	add.w	sl, r0, #20
   dad32:	f04f 0900 	mov.w	r9, #0
   dad36:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dad3a:	429c      	cmp	r4, r3
   dad3c:	dd08      	ble.n	dad50 <__gethex+0x272>
   dad3e:	9802      	ldr	r0, [sp, #8]
   dad40:	4629      	mov	r1, r5
   dad42:	f000 f9d3 	bl	db0ec <_Bfree>
   dad46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dad48:	2300      	movs	r3, #0
   dad4a:	6013      	str	r3, [r2, #0]
   dad4c:	20a3      	movs	r0, #163	; 0xa3
   dad4e:	e0e2      	b.n	daf16 <__gethex+0x438>
   dad50:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dad54:	4284      	cmp	r4, r0
   dad56:	da53      	bge.n	dae00 <__gethex+0x322>
   dad58:	1b04      	subs	r4, r0, r4
   dad5a:	42a6      	cmp	r6, r4
   dad5c:	dc2e      	bgt.n	dadbc <__gethex+0x2de>
   dad5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dad62:	2b02      	cmp	r3, #2
   dad64:	d01a      	beq.n	dad9c <__gethex+0x2be>
   dad66:	2b03      	cmp	r3, #3
   dad68:	d01c      	beq.n	dada4 <__gethex+0x2c6>
   dad6a:	2b01      	cmp	r3, #1
   dad6c:	d11d      	bne.n	dadaa <__gethex+0x2cc>
   dad6e:	42a6      	cmp	r6, r4
   dad70:	d11b      	bne.n	dadaa <__gethex+0x2cc>
   dad72:	2e01      	cmp	r6, #1
   dad74:	dc0b      	bgt.n	dad8e <__gethex+0x2b0>
   dad76:	9a06      	ldr	r2, [sp, #24]
   dad78:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dad7c:	6013      	str	r3, [r2, #0]
   dad7e:	2301      	movs	r3, #1
   dad80:	612b      	str	r3, [r5, #16]
   dad82:	f8ca 3000 	str.w	r3, [sl]
   dad86:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dad88:	2062      	movs	r0, #98	; 0x62
   dad8a:	601d      	str	r5, [r3, #0]
   dad8c:	e0c3      	b.n	daf16 <__gethex+0x438>
   dad8e:	1e71      	subs	r1, r6, #1
   dad90:	4628      	mov	r0, r5
   dad92:	f000 fd44 	bl	db81e <__any_on>
   dad96:	2800      	cmp	r0, #0
   dad98:	d1ed      	bne.n	dad76 <__gethex+0x298>
   dad9a:	e006      	b.n	dadaa <__gethex+0x2cc>
   dad9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dad9e:	2b00      	cmp	r3, #0
   dada0:	d0e9      	beq.n	dad76 <__gethex+0x298>
   dada2:	e002      	b.n	dadaa <__gethex+0x2cc>
   dada4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dada6:	2b00      	cmp	r3, #0
   dada8:	d1e5      	bne.n	dad76 <__gethex+0x298>
   dadaa:	9802      	ldr	r0, [sp, #8]
   dadac:	4629      	mov	r1, r5
   dadae:	f000 f99d 	bl	db0ec <_Bfree>
   dadb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dadb4:	2300      	movs	r3, #0
   dadb6:	6013      	str	r3, [r2, #0]
   dadb8:	2050      	movs	r0, #80	; 0x50
   dadba:	e0ac      	b.n	daf16 <__gethex+0x438>
   dadbc:	1e67      	subs	r7, r4, #1
   dadbe:	f1b9 0f00 	cmp.w	r9, #0
   dadc2:	d106      	bne.n	dadd2 <__gethex+0x2f4>
   dadc4:	b13f      	cbz	r7, dadd6 <__gethex+0x2f8>
   dadc6:	4639      	mov	r1, r7
   dadc8:	4628      	mov	r0, r5
   dadca:	f000 fd28 	bl	db81e <__any_on>
   dadce:	4681      	mov	r9, r0
   dadd0:	e001      	b.n	dadd6 <__gethex+0x2f8>
   dadd2:	f04f 0901 	mov.w	r9, #1
   dadd6:	117a      	asrs	r2, r7, #5
   dadd8:	2301      	movs	r3, #1
   dadda:	f007 071f 	and.w	r7, r7, #31
   dadde:	fa03 f707 	lsl.w	r7, r3, r7
   dade2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dade6:	4621      	mov	r1, r4
   dade8:	421f      	tst	r7, r3
   dadea:	4628      	mov	r0, r5
   dadec:	bf18      	it	ne
   dadee:	f049 0902 	orrne.w	r9, r9, #2
   dadf2:	1b36      	subs	r6, r6, r4
   dadf4:	f7ff fe28 	bl	daa48 <rshift>
   dadf8:	2702      	movs	r7, #2
   dadfa:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dadfe:	e000      	b.n	dae02 <__gethex+0x324>
   dae00:	2701      	movs	r7, #1
   dae02:	f1b9 0f00 	cmp.w	r9, #0
   dae06:	f000 8081 	beq.w	daf0c <__gethex+0x42e>
   dae0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dae0e:	2b02      	cmp	r3, #2
   dae10:	d00e      	beq.n	dae30 <__gethex+0x352>
   dae12:	2b03      	cmp	r3, #3
   dae14:	d010      	beq.n	dae38 <__gethex+0x35a>
   dae16:	2b01      	cmp	r3, #1
   dae18:	d176      	bne.n	daf08 <__gethex+0x42a>
   dae1a:	f019 0f02 	tst.w	r9, #2
   dae1e:	d073      	beq.n	daf08 <__gethex+0x42a>
   dae20:	f8da 0000 	ldr.w	r0, [sl]
   dae24:	ea49 0900 	orr.w	r9, r9, r0
   dae28:	f019 0f01 	tst.w	r9, #1
   dae2c:	d107      	bne.n	dae3e <__gethex+0x360>
   dae2e:	e06b      	b.n	daf08 <__gethex+0x42a>
   dae30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dae32:	f1c3 0301 	rsb	r3, r3, #1
   dae36:	9315      	str	r3, [sp, #84]	; 0x54
   dae38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dae3a:	2b00      	cmp	r3, #0
   dae3c:	d064      	beq.n	daf08 <__gethex+0x42a>
   dae3e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dae42:	f105 0314 	add.w	r3, r5, #20
   dae46:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dae4a:	eb03 0109 	add.w	r1, r3, r9
   dae4e:	2000      	movs	r0, #0
   dae50:	681a      	ldr	r2, [r3, #0]
   dae52:	f1b2 3fff 	cmp.w	r2, #4294967295
   dae56:	d002      	beq.n	dae5e <__gethex+0x380>
   dae58:	3201      	adds	r2, #1
   dae5a:	601a      	str	r2, [r3, #0]
   dae5c:	e020      	b.n	daea0 <__gethex+0x3c2>
   dae5e:	f843 0b04 	str.w	r0, [r3], #4
   dae62:	4299      	cmp	r1, r3
   dae64:	d8f4      	bhi.n	dae50 <__gethex+0x372>
   dae66:	68ab      	ldr	r3, [r5, #8]
   dae68:	459a      	cmp	sl, r3
   dae6a:	db12      	blt.n	dae92 <__gethex+0x3b4>
   dae6c:	6869      	ldr	r1, [r5, #4]
   dae6e:	9802      	ldr	r0, [sp, #8]
   dae70:	3101      	adds	r1, #1
   dae72:	f000 f906 	bl	db082 <_Balloc>
   dae76:	692a      	ldr	r2, [r5, #16]
   dae78:	3202      	adds	r2, #2
   dae7a:	f105 010c 	add.w	r1, r5, #12
   dae7e:	4683      	mov	fp, r0
   dae80:	0092      	lsls	r2, r2, #2
   dae82:	300c      	adds	r0, #12
   dae84:	f7fe ff0a 	bl	d9c9c <memcpy>
   dae88:	4629      	mov	r1, r5
   dae8a:	9802      	ldr	r0, [sp, #8]
   dae8c:	f000 f92e 	bl	db0ec <_Bfree>
   dae90:	465d      	mov	r5, fp
   dae92:	692b      	ldr	r3, [r5, #16]
   dae94:	1c5a      	adds	r2, r3, #1
   dae96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dae9a:	612a      	str	r2, [r5, #16]
   dae9c:	2201      	movs	r2, #1
   dae9e:	615a      	str	r2, [r3, #20]
   daea0:	2f02      	cmp	r7, #2
   daea2:	f105 0214 	add.w	r2, r5, #20
   daea6:	d111      	bne.n	daecc <__gethex+0x3ee>
   daea8:	f8d8 3000 	ldr.w	r3, [r8]
   daeac:	3b01      	subs	r3, #1
   daeae:	429e      	cmp	r6, r3
   daeb0:	d127      	bne.n	daf02 <__gethex+0x424>
   daeb2:	1171      	asrs	r1, r6, #5
   daeb4:	2301      	movs	r3, #1
   daeb6:	f006 061f 	and.w	r6, r6, #31
   daeba:	fa03 f606 	lsl.w	r6, r3, r6
   daebe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   daec2:	421e      	tst	r6, r3
   daec4:	bf0c      	ite	eq
   daec6:	2702      	moveq	r7, #2
   daec8:	2701      	movne	r7, #1
   daeca:	e01a      	b.n	daf02 <__gethex+0x424>
   daecc:	692b      	ldr	r3, [r5, #16]
   daece:	459a      	cmp	sl, r3
   daed0:	da0a      	bge.n	daee8 <__gethex+0x40a>
   daed2:	2101      	movs	r1, #1
   daed4:	4628      	mov	r0, r5
   daed6:	f7ff fdb7 	bl	daa48 <rshift>
   daeda:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daede:	3401      	adds	r4, #1
   daee0:	429c      	cmp	r4, r3
   daee2:	f73f af2c 	bgt.w	dad3e <__gethex+0x260>
   daee6:	e00b      	b.n	daf00 <__gethex+0x422>
   daee8:	f016 061f 	ands.w	r6, r6, #31
   daeec:	d008      	beq.n	daf00 <__gethex+0x422>
   daeee:	4491      	add	r9, r2
   daef0:	f1c6 0620 	rsb	r6, r6, #32
   daef4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   daef8:	f000 f988 	bl	db20c <__hi0bits>
   daefc:	42b0      	cmp	r0, r6
   daefe:	dbe8      	blt.n	daed2 <__gethex+0x3f4>
   daf00:	2701      	movs	r7, #1
   daf02:	f047 0720 	orr.w	r7, r7, #32
   daf06:	e001      	b.n	daf0c <__gethex+0x42e>
   daf08:	f047 0710 	orr.w	r7, r7, #16
   daf0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daf0e:	601d      	str	r5, [r3, #0]
   daf10:	9b06      	ldr	r3, [sp, #24]
   daf12:	4638      	mov	r0, r7
   daf14:	601c      	str	r4, [r3, #0]
   daf16:	b00b      	add	sp, #44	; 0x2c
   daf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daf1c <L_shift>:
   daf1c:	f1c2 0208 	rsb	r2, r2, #8
   daf20:	0092      	lsls	r2, r2, #2
   daf22:	b570      	push	{r4, r5, r6, lr}
   daf24:	f1c2 0620 	rsb	r6, r2, #32
   daf28:	6843      	ldr	r3, [r0, #4]
   daf2a:	6805      	ldr	r5, [r0, #0]
   daf2c:	fa03 f406 	lsl.w	r4, r3, r6
   daf30:	432c      	orrs	r4, r5
   daf32:	40d3      	lsrs	r3, r2
   daf34:	6004      	str	r4, [r0, #0]
   daf36:	f840 3f04 	str.w	r3, [r0, #4]!
   daf3a:	4288      	cmp	r0, r1
   daf3c:	d3f4      	bcc.n	daf28 <L_shift+0xc>
   daf3e:	bd70      	pop	{r4, r5, r6, pc}

000daf40 <__match>:
   daf40:	b530      	push	{r4, r5, lr}
   daf42:	6803      	ldr	r3, [r0, #0]
   daf44:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf48:	3301      	adds	r3, #1
   daf4a:	b14c      	cbz	r4, daf60 <__match+0x20>
   daf4c:	781a      	ldrb	r2, [r3, #0]
   daf4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   daf52:	2d19      	cmp	r5, #25
   daf54:	bf98      	it	ls
   daf56:	3220      	addls	r2, #32
   daf58:	42a2      	cmp	r2, r4
   daf5a:	d0f3      	beq.n	daf44 <__match+0x4>
   daf5c:	2000      	movs	r0, #0
   daf5e:	bd30      	pop	{r4, r5, pc}
   daf60:	6003      	str	r3, [r0, #0]
   daf62:	2001      	movs	r0, #1
   daf64:	bd30      	pop	{r4, r5, pc}

000daf66 <__hexnan>:
   daf66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf6a:	680b      	ldr	r3, [r1, #0]
   daf6c:	f8d0 b000 	ldr.w	fp, [r0]
   daf70:	115e      	asrs	r6, r3, #5
   daf72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   daf76:	f013 031f 	ands.w	r3, r3, #31
   daf7a:	b085      	sub	sp, #20
   daf7c:	bf18      	it	ne
   daf7e:	3604      	addne	r6, #4
   daf80:	1f35      	subs	r5, r6, #4
   daf82:	4617      	mov	r7, r2
   daf84:	2200      	movs	r2, #0
   daf86:	4682      	mov	sl, r0
   daf88:	9301      	str	r3, [sp, #4]
   daf8a:	f846 2c04 	str.w	r2, [r6, #-4]
   daf8e:	46a8      	mov	r8, r5
   daf90:	462c      	mov	r4, r5
   daf92:	9200      	str	r2, [sp, #0]
   daf94:	4691      	mov	r9, r2
   daf96:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   daf9a:	2900      	cmp	r1, #0
   daf9c:	d03c      	beq.n	db018 <__hexnan+0xb2>
   daf9e:	4608      	mov	r0, r1
   dafa0:	9203      	str	r2, [sp, #12]
   dafa2:	9102      	str	r1, [sp, #8]
   dafa4:	f7ff fd86 	bl	daab4 <__hexdig_fun>
   dafa8:	9a03      	ldr	r2, [sp, #12]
   dafaa:	bb00      	cbnz	r0, dafee <__hexnan+0x88>
   dafac:	9902      	ldr	r1, [sp, #8]
   dafae:	2920      	cmp	r1, #32
   dafb0:	d816      	bhi.n	dafe0 <__hexnan+0x7a>
   dafb2:	9b00      	ldr	r3, [sp, #0]
   dafb4:	4599      	cmp	r9, r3
   dafb6:	ddee      	ble.n	daf96 <__hexnan+0x30>
   dafb8:	4544      	cmp	r4, r8
   dafba:	d205      	bcs.n	dafc8 <__hexnan+0x62>
   dafbc:	2a07      	cmp	r2, #7
   dafbe:	dc03      	bgt.n	dafc8 <__hexnan+0x62>
   dafc0:	4641      	mov	r1, r8
   dafc2:	4620      	mov	r0, r4
   dafc4:	f7ff ffaa 	bl	daf1c <L_shift>
   dafc8:	42bc      	cmp	r4, r7
   dafca:	d923      	bls.n	db014 <__hexnan+0xae>
   dafcc:	2300      	movs	r3, #0
   dafce:	f1a4 0804 	sub.w	r8, r4, #4
   dafd2:	f844 3c04 	str.w	r3, [r4, #-4]
   dafd6:	f8cd 9000 	str.w	r9, [sp]
   dafda:	4644      	mov	r4, r8
   dafdc:	461a      	mov	r2, r3
   dafde:	e7da      	b.n	daf96 <__hexnan+0x30>
   dafe0:	2929      	cmp	r1, #41	; 0x29
   dafe2:	d148      	bne.n	db076 <__hexnan+0x110>
   dafe4:	f10b 0301 	add.w	r3, fp, #1
   dafe8:	f8ca 3000 	str.w	r3, [sl]
   dafec:	e014      	b.n	db018 <__hexnan+0xb2>
   dafee:	3201      	adds	r2, #1
   daff0:	2a08      	cmp	r2, #8
   daff2:	f109 0901 	add.w	r9, r9, #1
   daff6:	dd06      	ble.n	db006 <__hexnan+0xa0>
   daff8:	42bc      	cmp	r4, r7
   daffa:	d9cc      	bls.n	daf96 <__hexnan+0x30>
   daffc:	2300      	movs	r3, #0
   daffe:	f844 3c04 	str.w	r3, [r4, #-4]
   db002:	2201      	movs	r2, #1
   db004:	3c04      	subs	r4, #4
   db006:	6821      	ldr	r1, [r4, #0]
   db008:	f000 000f 	and.w	r0, r0, #15
   db00c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   db010:	6020      	str	r0, [r4, #0]
   db012:	e7c0      	b.n	daf96 <__hexnan+0x30>
   db014:	2208      	movs	r2, #8
   db016:	e7be      	b.n	daf96 <__hexnan+0x30>
   db018:	f1b9 0f00 	cmp.w	r9, #0
   db01c:	d02b      	beq.n	db076 <__hexnan+0x110>
   db01e:	4544      	cmp	r4, r8
   db020:	d205      	bcs.n	db02e <__hexnan+0xc8>
   db022:	2a07      	cmp	r2, #7
   db024:	dc03      	bgt.n	db02e <__hexnan+0xc8>
   db026:	4641      	mov	r1, r8
   db028:	4620      	mov	r0, r4
   db02a:	f7ff ff77 	bl	daf1c <L_shift>
   db02e:	42bc      	cmp	r4, r7
   db030:	d90c      	bls.n	db04c <__hexnan+0xe6>
   db032:	463b      	mov	r3, r7
   db034:	f854 2b04 	ldr.w	r2, [r4], #4
   db038:	f843 2b04 	str.w	r2, [r3], #4
   db03c:	42a5      	cmp	r5, r4
   db03e:	d2f9      	bcs.n	db034 <__hexnan+0xce>
   db040:	2200      	movs	r2, #0
   db042:	f843 2b04 	str.w	r2, [r3], #4
   db046:	429d      	cmp	r5, r3
   db048:	d2fb      	bcs.n	db042 <__hexnan+0xdc>
   db04a:	e00b      	b.n	db064 <__hexnan+0xfe>
   db04c:	9b01      	ldr	r3, [sp, #4]
   db04e:	b14b      	cbz	r3, db064 <__hexnan+0xfe>
   db050:	f1c3 0220 	rsb	r2, r3, #32
   db054:	f04f 33ff 	mov.w	r3, #4294967295
   db058:	40d3      	lsrs	r3, r2
   db05a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db05e:	4013      	ands	r3, r2
   db060:	f846 3c04 	str.w	r3, [r6, #-4]
   db064:	682b      	ldr	r3, [r5, #0]
   db066:	b943      	cbnz	r3, db07a <__hexnan+0x114>
   db068:	42bd      	cmp	r5, r7
   db06a:	d102      	bne.n	db072 <__hexnan+0x10c>
   db06c:	2301      	movs	r3, #1
   db06e:	602b      	str	r3, [r5, #0]
   db070:	e003      	b.n	db07a <__hexnan+0x114>
   db072:	3d04      	subs	r5, #4
   db074:	e7f6      	b.n	db064 <__hexnan+0xfe>
   db076:	2004      	movs	r0, #4
   db078:	e000      	b.n	db07c <__hexnan+0x116>
   db07a:	2005      	movs	r0, #5
   db07c:	b005      	add	sp, #20
   db07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db082 <_Balloc>:
   db082:	b570      	push	{r4, r5, r6, lr}
   db084:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db086:	4604      	mov	r4, r0
   db088:	460e      	mov	r6, r1
   db08a:	b93d      	cbnz	r5, db09c <_Balloc+0x1a>
   db08c:	2010      	movs	r0, #16
   db08e:	f7fb fb53 	bl	d6738 <malloc>
   db092:	6260      	str	r0, [r4, #36]	; 0x24
   db094:	6045      	str	r5, [r0, #4]
   db096:	6085      	str	r5, [r0, #8]
   db098:	6005      	str	r5, [r0, #0]
   db09a:	60c5      	str	r5, [r0, #12]
   db09c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db09e:	68eb      	ldr	r3, [r5, #12]
   db0a0:	b143      	cbz	r3, db0b4 <_Balloc+0x32>
   db0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db0a4:	68db      	ldr	r3, [r3, #12]
   db0a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db0aa:	b178      	cbz	r0, db0cc <_Balloc+0x4a>
   db0ac:	6802      	ldr	r2, [r0, #0]
   db0ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db0b2:	e017      	b.n	db0e4 <_Balloc+0x62>
   db0b4:	2221      	movs	r2, #33	; 0x21
   db0b6:	2104      	movs	r1, #4
   db0b8:	4620      	mov	r0, r4
   db0ba:	f000 fbd2 	bl	db862 <_calloc_r>
   db0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db0c0:	60e8      	str	r0, [r5, #12]
   db0c2:	68db      	ldr	r3, [r3, #12]
   db0c4:	2b00      	cmp	r3, #0
   db0c6:	d1ec      	bne.n	db0a2 <_Balloc+0x20>
   db0c8:	2000      	movs	r0, #0
   db0ca:	bd70      	pop	{r4, r5, r6, pc}
   db0cc:	2101      	movs	r1, #1
   db0ce:	fa01 f506 	lsl.w	r5, r1, r6
   db0d2:	1d6a      	adds	r2, r5, #5
   db0d4:	0092      	lsls	r2, r2, #2
   db0d6:	4620      	mov	r0, r4
   db0d8:	f000 fbc3 	bl	db862 <_calloc_r>
   db0dc:	2800      	cmp	r0, #0
   db0de:	d0f3      	beq.n	db0c8 <_Balloc+0x46>
   db0e0:	6046      	str	r6, [r0, #4]
   db0e2:	6085      	str	r5, [r0, #8]
   db0e4:	2300      	movs	r3, #0
   db0e6:	6103      	str	r3, [r0, #16]
   db0e8:	60c3      	str	r3, [r0, #12]
   db0ea:	bd70      	pop	{r4, r5, r6, pc}

000db0ec <_Bfree>:
   db0ec:	b570      	push	{r4, r5, r6, lr}
   db0ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db0f0:	4606      	mov	r6, r0
   db0f2:	460d      	mov	r5, r1
   db0f4:	b93c      	cbnz	r4, db106 <_Bfree+0x1a>
   db0f6:	2010      	movs	r0, #16
   db0f8:	f7fb fb1e 	bl	d6738 <malloc>
   db0fc:	6270      	str	r0, [r6, #36]	; 0x24
   db0fe:	6044      	str	r4, [r0, #4]
   db100:	6084      	str	r4, [r0, #8]
   db102:	6004      	str	r4, [r0, #0]
   db104:	60c4      	str	r4, [r0, #12]
   db106:	b13d      	cbz	r5, db118 <_Bfree+0x2c>
   db108:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db10a:	686a      	ldr	r2, [r5, #4]
   db10c:	68db      	ldr	r3, [r3, #12]
   db10e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db112:	6029      	str	r1, [r5, #0]
   db114:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db118:	bd70      	pop	{r4, r5, r6, pc}

000db11a <__multadd>:
   db11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db11e:	690d      	ldr	r5, [r1, #16]
   db120:	461f      	mov	r7, r3
   db122:	4606      	mov	r6, r0
   db124:	460c      	mov	r4, r1
   db126:	f101 0e14 	add.w	lr, r1, #20
   db12a:	2300      	movs	r3, #0
   db12c:	f8de 0000 	ldr.w	r0, [lr]
   db130:	b281      	uxth	r1, r0
   db132:	fb02 7101 	mla	r1, r2, r1, r7
   db136:	0c0f      	lsrs	r7, r1, #16
   db138:	0c00      	lsrs	r0, r0, #16
   db13a:	fb02 7000 	mla	r0, r2, r0, r7
   db13e:	b289      	uxth	r1, r1
   db140:	3301      	adds	r3, #1
   db142:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db146:	429d      	cmp	r5, r3
   db148:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db14c:	f84e 1b04 	str.w	r1, [lr], #4
   db150:	dcec      	bgt.n	db12c <__multadd+0x12>
   db152:	b1d7      	cbz	r7, db18a <__multadd+0x70>
   db154:	68a3      	ldr	r3, [r4, #8]
   db156:	429d      	cmp	r5, r3
   db158:	db12      	blt.n	db180 <__multadd+0x66>
   db15a:	6861      	ldr	r1, [r4, #4]
   db15c:	4630      	mov	r0, r6
   db15e:	3101      	adds	r1, #1
   db160:	f7ff ff8f 	bl	db082 <_Balloc>
   db164:	6922      	ldr	r2, [r4, #16]
   db166:	3202      	adds	r2, #2
   db168:	f104 010c 	add.w	r1, r4, #12
   db16c:	4680      	mov	r8, r0
   db16e:	0092      	lsls	r2, r2, #2
   db170:	300c      	adds	r0, #12
   db172:	f7fe fd93 	bl	d9c9c <memcpy>
   db176:	4621      	mov	r1, r4
   db178:	4630      	mov	r0, r6
   db17a:	f7ff ffb7 	bl	db0ec <_Bfree>
   db17e:	4644      	mov	r4, r8
   db180:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db184:	3501      	adds	r5, #1
   db186:	615f      	str	r7, [r3, #20]
   db188:	6125      	str	r5, [r4, #16]
   db18a:	4620      	mov	r0, r4
   db18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db190 <__s2b>:
   db190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db194:	460c      	mov	r4, r1
   db196:	4615      	mov	r5, r2
   db198:	461f      	mov	r7, r3
   db19a:	2209      	movs	r2, #9
   db19c:	3308      	adds	r3, #8
   db19e:	4606      	mov	r6, r0
   db1a0:	fb93 f3f2 	sdiv	r3, r3, r2
   db1a4:	2100      	movs	r1, #0
   db1a6:	2201      	movs	r2, #1
   db1a8:	429a      	cmp	r2, r3
   db1aa:	da02      	bge.n	db1b2 <__s2b+0x22>
   db1ac:	0052      	lsls	r2, r2, #1
   db1ae:	3101      	adds	r1, #1
   db1b0:	e7fa      	b.n	db1a8 <__s2b+0x18>
   db1b2:	4630      	mov	r0, r6
   db1b4:	f7ff ff65 	bl	db082 <_Balloc>
   db1b8:	9b08      	ldr	r3, [sp, #32]
   db1ba:	6143      	str	r3, [r0, #20]
   db1bc:	2d09      	cmp	r5, #9
   db1be:	f04f 0301 	mov.w	r3, #1
   db1c2:	6103      	str	r3, [r0, #16]
   db1c4:	dd11      	ble.n	db1ea <__s2b+0x5a>
   db1c6:	f104 0809 	add.w	r8, r4, #9
   db1ca:	46c1      	mov	r9, r8
   db1cc:	442c      	add	r4, r5
   db1ce:	f819 3b01 	ldrb.w	r3, [r9], #1
   db1d2:	4601      	mov	r1, r0
   db1d4:	3b30      	subs	r3, #48	; 0x30
   db1d6:	220a      	movs	r2, #10
   db1d8:	4630      	mov	r0, r6
   db1da:	f7ff ff9e 	bl	db11a <__multadd>
   db1de:	45a1      	cmp	r9, r4
   db1e0:	d1f5      	bne.n	db1ce <__s2b+0x3e>
   db1e2:	eb08 0405 	add.w	r4, r8, r5
   db1e6:	3c08      	subs	r4, #8
   db1e8:	e001      	b.n	db1ee <__s2b+0x5e>
   db1ea:	340a      	adds	r4, #10
   db1ec:	2509      	movs	r5, #9
   db1ee:	1b2d      	subs	r5, r5, r4
   db1f0:	1963      	adds	r3, r4, r5
   db1f2:	429f      	cmp	r7, r3
   db1f4:	dd08      	ble.n	db208 <__s2b+0x78>
   db1f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   db1fa:	4601      	mov	r1, r0
   db1fc:	3b30      	subs	r3, #48	; 0x30
   db1fe:	220a      	movs	r2, #10
   db200:	4630      	mov	r0, r6
   db202:	f7ff ff8a 	bl	db11a <__multadd>
   db206:	e7f3      	b.n	db1f0 <__s2b+0x60>
   db208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db20c <__hi0bits>:
   db20c:	0c03      	lsrs	r3, r0, #16
   db20e:	041b      	lsls	r3, r3, #16
   db210:	b913      	cbnz	r3, db218 <__hi0bits+0xc>
   db212:	0400      	lsls	r0, r0, #16
   db214:	2310      	movs	r3, #16
   db216:	e000      	b.n	db21a <__hi0bits+0xe>
   db218:	2300      	movs	r3, #0
   db21a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db21e:	bf04      	itt	eq
   db220:	0200      	lsleq	r0, r0, #8
   db222:	3308      	addeq	r3, #8
   db224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db228:	bf04      	itt	eq
   db22a:	0100      	lsleq	r0, r0, #4
   db22c:	3304      	addeq	r3, #4
   db22e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db232:	bf04      	itt	eq
   db234:	0080      	lsleq	r0, r0, #2
   db236:	3302      	addeq	r3, #2
   db238:	2800      	cmp	r0, #0
   db23a:	db03      	blt.n	db244 <__hi0bits+0x38>
   db23c:	0042      	lsls	r2, r0, #1
   db23e:	d503      	bpl.n	db248 <__hi0bits+0x3c>
   db240:	1c58      	adds	r0, r3, #1
   db242:	4770      	bx	lr
   db244:	4618      	mov	r0, r3
   db246:	4770      	bx	lr
   db248:	2020      	movs	r0, #32
   db24a:	4770      	bx	lr

000db24c <__lo0bits>:
   db24c:	6803      	ldr	r3, [r0, #0]
   db24e:	f013 0207 	ands.w	r2, r3, #7
   db252:	d00b      	beq.n	db26c <__lo0bits+0x20>
   db254:	07d9      	lsls	r1, r3, #31
   db256:	d422      	bmi.n	db29e <__lo0bits+0x52>
   db258:	079a      	lsls	r2, r3, #30
   db25a:	bf4b      	itete	mi
   db25c:	085b      	lsrmi	r3, r3, #1
   db25e:	089b      	lsrpl	r3, r3, #2
   db260:	6003      	strmi	r3, [r0, #0]
   db262:	6003      	strpl	r3, [r0, #0]
   db264:	bf4c      	ite	mi
   db266:	2001      	movmi	r0, #1
   db268:	2002      	movpl	r0, #2
   db26a:	4770      	bx	lr
   db26c:	b299      	uxth	r1, r3
   db26e:	b909      	cbnz	r1, db274 <__lo0bits+0x28>
   db270:	0c1b      	lsrs	r3, r3, #16
   db272:	2210      	movs	r2, #16
   db274:	f013 0fff 	tst.w	r3, #255	; 0xff
   db278:	bf04      	itt	eq
   db27a:	0a1b      	lsreq	r3, r3, #8
   db27c:	3208      	addeq	r2, #8
   db27e:	0719      	lsls	r1, r3, #28
   db280:	bf04      	itt	eq
   db282:	091b      	lsreq	r3, r3, #4
   db284:	3204      	addeq	r2, #4
   db286:	0799      	lsls	r1, r3, #30
   db288:	bf04      	itt	eq
   db28a:	089b      	lsreq	r3, r3, #2
   db28c:	3202      	addeq	r2, #2
   db28e:	07d9      	lsls	r1, r3, #31
   db290:	d402      	bmi.n	db298 <__lo0bits+0x4c>
   db292:	085b      	lsrs	r3, r3, #1
   db294:	d005      	beq.n	db2a2 <__lo0bits+0x56>
   db296:	3201      	adds	r2, #1
   db298:	6003      	str	r3, [r0, #0]
   db29a:	4610      	mov	r0, r2
   db29c:	4770      	bx	lr
   db29e:	2000      	movs	r0, #0
   db2a0:	4770      	bx	lr
   db2a2:	2020      	movs	r0, #32
   db2a4:	4770      	bx	lr

000db2a6 <__i2b>:
   db2a6:	b510      	push	{r4, lr}
   db2a8:	460c      	mov	r4, r1
   db2aa:	2101      	movs	r1, #1
   db2ac:	f7ff fee9 	bl	db082 <_Balloc>
   db2b0:	2201      	movs	r2, #1
   db2b2:	6144      	str	r4, [r0, #20]
   db2b4:	6102      	str	r2, [r0, #16]
   db2b6:	bd10      	pop	{r4, pc}

000db2b8 <__multiply>:
   db2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db2bc:	4614      	mov	r4, r2
   db2be:	690a      	ldr	r2, [r1, #16]
   db2c0:	6923      	ldr	r3, [r4, #16]
   db2c2:	429a      	cmp	r2, r3
   db2c4:	bfb8      	it	lt
   db2c6:	460b      	movlt	r3, r1
   db2c8:	4688      	mov	r8, r1
   db2ca:	bfbc      	itt	lt
   db2cc:	46a0      	movlt	r8, r4
   db2ce:	461c      	movlt	r4, r3
   db2d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db2d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db2d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db2dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db2e0:	eb07 0609 	add.w	r6, r7, r9
   db2e4:	429e      	cmp	r6, r3
   db2e6:	bfc8      	it	gt
   db2e8:	3101      	addgt	r1, #1
   db2ea:	f7ff feca 	bl	db082 <_Balloc>
   db2ee:	f100 0514 	add.w	r5, r0, #20
   db2f2:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db2f6:	462b      	mov	r3, r5
   db2f8:	2200      	movs	r2, #0
   db2fa:	4563      	cmp	r3, ip
   db2fc:	d202      	bcs.n	db304 <__multiply+0x4c>
   db2fe:	f843 2b04 	str.w	r2, [r3], #4
   db302:	e7fa      	b.n	db2fa <__multiply+0x42>
   db304:	f104 0214 	add.w	r2, r4, #20
   db308:	f108 0114 	add.w	r1, r8, #20
   db30c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db310:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db314:	9300      	str	r3, [sp, #0]
   db316:	9b00      	ldr	r3, [sp, #0]
   db318:	9201      	str	r2, [sp, #4]
   db31a:	4293      	cmp	r3, r2
   db31c:	d957      	bls.n	db3ce <__multiply+0x116>
   db31e:	f8b2 b000 	ldrh.w	fp, [r2]
   db322:	f1bb 0f00 	cmp.w	fp, #0
   db326:	d023      	beq.n	db370 <__multiply+0xb8>
   db328:	4689      	mov	r9, r1
   db32a:	46ae      	mov	lr, r5
   db32c:	f04f 0800 	mov.w	r8, #0
   db330:	f859 4b04 	ldr.w	r4, [r9], #4
   db334:	f8be a000 	ldrh.w	sl, [lr]
   db338:	b2a3      	uxth	r3, r4
   db33a:	fb0b a303 	mla	r3, fp, r3, sl
   db33e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db342:	f8de 4000 	ldr.w	r4, [lr]
   db346:	4443      	add	r3, r8
   db348:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db34c:	fb0b 840a 	mla	r4, fp, sl, r8
   db350:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db354:	46f2      	mov	sl, lr
   db356:	b29b      	uxth	r3, r3
   db358:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db35c:	454f      	cmp	r7, r9
   db35e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db362:	f84a 3b04 	str.w	r3, [sl], #4
   db366:	d901      	bls.n	db36c <__multiply+0xb4>
   db368:	46d6      	mov	lr, sl
   db36a:	e7e1      	b.n	db330 <__multiply+0x78>
   db36c:	f8ce 8004 	str.w	r8, [lr, #4]
   db370:	9b01      	ldr	r3, [sp, #4]
   db372:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db376:	3204      	adds	r2, #4
   db378:	f1ba 0f00 	cmp.w	sl, #0
   db37c:	d021      	beq.n	db3c2 <__multiply+0x10a>
   db37e:	682b      	ldr	r3, [r5, #0]
   db380:	462c      	mov	r4, r5
   db382:	4689      	mov	r9, r1
   db384:	f04f 0800 	mov.w	r8, #0
   db388:	f8b9 e000 	ldrh.w	lr, [r9]
   db38c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db390:	fb0a be0e 	mla	lr, sl, lr, fp
   db394:	44f0      	add	r8, lr
   db396:	46a3      	mov	fp, r4
   db398:	b29b      	uxth	r3, r3
   db39a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db39e:	f84b 3b04 	str.w	r3, [fp], #4
   db3a2:	f859 3b04 	ldr.w	r3, [r9], #4
   db3a6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db3aa:	0c1b      	lsrs	r3, r3, #16
   db3ac:	fb0a e303 	mla	r3, sl, r3, lr
   db3b0:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db3b4:	454f      	cmp	r7, r9
   db3b6:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db3ba:	d901      	bls.n	db3c0 <__multiply+0x108>
   db3bc:	465c      	mov	r4, fp
   db3be:	e7e3      	b.n	db388 <__multiply+0xd0>
   db3c0:	6063      	str	r3, [r4, #4]
   db3c2:	3504      	adds	r5, #4
   db3c4:	e7a7      	b.n	db316 <__multiply+0x5e>
   db3c6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db3ca:	b913      	cbnz	r3, db3d2 <__multiply+0x11a>
   db3cc:	3e01      	subs	r6, #1
   db3ce:	2e00      	cmp	r6, #0
   db3d0:	dcf9      	bgt.n	db3c6 <__multiply+0x10e>
   db3d2:	6106      	str	r6, [r0, #16]
   db3d4:	b003      	add	sp, #12
   db3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db3dc <__pow5mult>:
   db3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db3e0:	4615      	mov	r5, r2
   db3e2:	f012 0203 	ands.w	r2, r2, #3
   db3e6:	4606      	mov	r6, r0
   db3e8:	460f      	mov	r7, r1
   db3ea:	d007      	beq.n	db3fc <__pow5mult+0x20>
   db3ec:	3a01      	subs	r2, #1
   db3ee:	4c21      	ldr	r4, [pc, #132]	; (db474 <__pow5mult+0x98>)
   db3f0:	2300      	movs	r3, #0
   db3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db3f6:	f7ff fe90 	bl	db11a <__multadd>
   db3fa:	4607      	mov	r7, r0
   db3fc:	10ad      	asrs	r5, r5, #2
   db3fe:	d036      	beq.n	db46e <__pow5mult+0x92>
   db400:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db402:	b93c      	cbnz	r4, db414 <__pow5mult+0x38>
   db404:	2010      	movs	r0, #16
   db406:	f7fb f997 	bl	d6738 <malloc>
   db40a:	6270      	str	r0, [r6, #36]	; 0x24
   db40c:	6044      	str	r4, [r0, #4]
   db40e:	6084      	str	r4, [r0, #8]
   db410:	6004      	str	r4, [r0, #0]
   db412:	60c4      	str	r4, [r0, #12]
   db414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db418:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db41c:	b94c      	cbnz	r4, db432 <__pow5mult+0x56>
   db41e:	f240 2171 	movw	r1, #625	; 0x271
   db422:	4630      	mov	r0, r6
   db424:	f7ff ff3f 	bl	db2a6 <__i2b>
   db428:	2300      	movs	r3, #0
   db42a:	f8c8 0008 	str.w	r0, [r8, #8]
   db42e:	4604      	mov	r4, r0
   db430:	6003      	str	r3, [r0, #0]
   db432:	f04f 0800 	mov.w	r8, #0
   db436:	07eb      	lsls	r3, r5, #31
   db438:	d50a      	bpl.n	db450 <__pow5mult+0x74>
   db43a:	4639      	mov	r1, r7
   db43c:	4622      	mov	r2, r4
   db43e:	4630      	mov	r0, r6
   db440:	f7ff ff3a 	bl	db2b8 <__multiply>
   db444:	4639      	mov	r1, r7
   db446:	4681      	mov	r9, r0
   db448:	4630      	mov	r0, r6
   db44a:	f7ff fe4f 	bl	db0ec <_Bfree>
   db44e:	464f      	mov	r7, r9
   db450:	106d      	asrs	r5, r5, #1
   db452:	d00c      	beq.n	db46e <__pow5mult+0x92>
   db454:	6820      	ldr	r0, [r4, #0]
   db456:	b108      	cbz	r0, db45c <__pow5mult+0x80>
   db458:	4604      	mov	r4, r0
   db45a:	e7ec      	b.n	db436 <__pow5mult+0x5a>
   db45c:	4622      	mov	r2, r4
   db45e:	4621      	mov	r1, r4
   db460:	4630      	mov	r0, r6
   db462:	f7ff ff29 	bl	db2b8 <__multiply>
   db466:	6020      	str	r0, [r4, #0]
   db468:	f8c0 8000 	str.w	r8, [r0]
   db46c:	e7f4      	b.n	db458 <__pow5mult+0x7c>
   db46e:	4638      	mov	r0, r7
   db470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db474:	000dc858 	.word	0x000dc858

000db478 <__lshift>:
   db478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db47c:	460c      	mov	r4, r1
   db47e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db482:	6926      	ldr	r6, [r4, #16]
   db484:	6849      	ldr	r1, [r1, #4]
   db486:	68a3      	ldr	r3, [r4, #8]
   db488:	4456      	add	r6, sl
   db48a:	4607      	mov	r7, r0
   db48c:	4691      	mov	r9, r2
   db48e:	1c75      	adds	r5, r6, #1
   db490:	42ab      	cmp	r3, r5
   db492:	da02      	bge.n	db49a <__lshift+0x22>
   db494:	3101      	adds	r1, #1
   db496:	005b      	lsls	r3, r3, #1
   db498:	e7fa      	b.n	db490 <__lshift+0x18>
   db49a:	4638      	mov	r0, r7
   db49c:	f7ff fdf1 	bl	db082 <_Balloc>
   db4a0:	2300      	movs	r3, #0
   db4a2:	4680      	mov	r8, r0
   db4a4:	f100 0114 	add.w	r1, r0, #20
   db4a8:	461a      	mov	r2, r3
   db4aa:	4553      	cmp	r3, sl
   db4ac:	da03      	bge.n	db4b6 <__lshift+0x3e>
   db4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db4b2:	3301      	adds	r3, #1
   db4b4:	e7f9      	b.n	db4aa <__lshift+0x32>
   db4b6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db4ba:	6920      	ldr	r0, [r4, #16]
   db4bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db4c0:	f019 091f 	ands.w	r9, r9, #31
   db4c4:	f104 0114 	add.w	r1, r4, #20
   db4c8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db4cc:	d014      	beq.n	db4f8 <__lshift+0x80>
   db4ce:	f1c9 0c20 	rsb	ip, r9, #32
   db4d2:	2200      	movs	r2, #0
   db4d4:	6808      	ldr	r0, [r1, #0]
   db4d6:	fa00 f009 	lsl.w	r0, r0, r9
   db4da:	4302      	orrs	r2, r0
   db4dc:	469a      	mov	sl, r3
   db4de:	f843 2b04 	str.w	r2, [r3], #4
   db4e2:	f851 2b04 	ldr.w	r2, [r1], #4
   db4e6:	458e      	cmp	lr, r1
   db4e8:	fa22 f20c 	lsr.w	r2, r2, ip
   db4ec:	d8f2      	bhi.n	db4d4 <__lshift+0x5c>
   db4ee:	f8ca 2004 	str.w	r2, [sl, #4]
   db4f2:	b142      	cbz	r2, db506 <__lshift+0x8e>
   db4f4:	1cb5      	adds	r5, r6, #2
   db4f6:	e006      	b.n	db506 <__lshift+0x8e>
   db4f8:	3b04      	subs	r3, #4
   db4fa:	f851 2b04 	ldr.w	r2, [r1], #4
   db4fe:	f843 2f04 	str.w	r2, [r3, #4]!
   db502:	458e      	cmp	lr, r1
   db504:	d8f9      	bhi.n	db4fa <__lshift+0x82>
   db506:	3d01      	subs	r5, #1
   db508:	4638      	mov	r0, r7
   db50a:	f8c8 5010 	str.w	r5, [r8, #16]
   db50e:	4621      	mov	r1, r4
   db510:	f7ff fdec 	bl	db0ec <_Bfree>
   db514:	4640      	mov	r0, r8
   db516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db51a <__mcmp>:
   db51a:	6903      	ldr	r3, [r0, #16]
   db51c:	690a      	ldr	r2, [r1, #16]
   db51e:	1a9b      	subs	r3, r3, r2
   db520:	b510      	push	{r4, lr}
   db522:	d111      	bne.n	db548 <__mcmp+0x2e>
   db524:	0092      	lsls	r2, r2, #2
   db526:	3014      	adds	r0, #20
   db528:	3114      	adds	r1, #20
   db52a:	1883      	adds	r3, r0, r2
   db52c:	440a      	add	r2, r1
   db52e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db532:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db536:	428c      	cmp	r4, r1
   db538:	d002      	beq.n	db540 <__mcmp+0x26>
   db53a:	d307      	bcc.n	db54c <__mcmp+0x32>
   db53c:	2001      	movs	r0, #1
   db53e:	bd10      	pop	{r4, pc}
   db540:	4298      	cmp	r0, r3
   db542:	d3f4      	bcc.n	db52e <__mcmp+0x14>
   db544:	2000      	movs	r0, #0
   db546:	bd10      	pop	{r4, pc}
   db548:	4618      	mov	r0, r3
   db54a:	bd10      	pop	{r4, pc}
   db54c:	f04f 30ff 	mov.w	r0, #4294967295
   db550:	bd10      	pop	{r4, pc}

000db552 <__mdiff>:
   db552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db556:	460c      	mov	r4, r1
   db558:	4607      	mov	r7, r0
   db55a:	4611      	mov	r1, r2
   db55c:	4620      	mov	r0, r4
   db55e:	4615      	mov	r5, r2
   db560:	f7ff ffdb 	bl	db51a <__mcmp>
   db564:	1e06      	subs	r6, r0, #0
   db566:	d108      	bne.n	db57a <__mdiff+0x28>
   db568:	4631      	mov	r1, r6
   db56a:	4638      	mov	r0, r7
   db56c:	f7ff fd89 	bl	db082 <_Balloc>
   db570:	2301      	movs	r3, #1
   db572:	6103      	str	r3, [r0, #16]
   db574:	6146      	str	r6, [r0, #20]
   db576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db57a:	bfbc      	itt	lt
   db57c:	4623      	movlt	r3, r4
   db57e:	462c      	movlt	r4, r5
   db580:	4638      	mov	r0, r7
   db582:	6861      	ldr	r1, [r4, #4]
   db584:	bfba      	itte	lt
   db586:	461d      	movlt	r5, r3
   db588:	2601      	movlt	r6, #1
   db58a:	2600      	movge	r6, #0
   db58c:	f7ff fd79 	bl	db082 <_Balloc>
   db590:	692b      	ldr	r3, [r5, #16]
   db592:	60c6      	str	r6, [r0, #12]
   db594:	6926      	ldr	r6, [r4, #16]
   db596:	f105 0914 	add.w	r9, r5, #20
   db59a:	3414      	adds	r4, #20
   db59c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db5a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db5a4:	f100 0514 	add.w	r5, r0, #20
   db5a8:	f04f 0c00 	mov.w	ip, #0
   db5ac:	f854 3b04 	ldr.w	r3, [r4], #4
   db5b0:	f859 2b04 	ldr.w	r2, [r9], #4
   db5b4:	fa1c f183 	uxtah	r1, ip, r3
   db5b8:	fa1f fe82 	uxth.w	lr, r2
   db5bc:	0c12      	lsrs	r2, r2, #16
   db5be:	ebce 0101 	rsb	r1, lr, r1
   db5c2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db5c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db5ca:	b289      	uxth	r1, r1
   db5cc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db5d0:	45c8      	cmp	r8, r9
   db5d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db5d6:	46a6      	mov	lr, r4
   db5d8:	f845 3b04 	str.w	r3, [r5], #4
   db5dc:	d8e6      	bhi.n	db5ac <__mdiff+0x5a>
   db5de:	45be      	cmp	lr, r7
   db5e0:	d20e      	bcs.n	db600 <__mdiff+0xae>
   db5e2:	f85e 1b04 	ldr.w	r1, [lr], #4
   db5e6:	fa1c f281 	uxtah	r2, ip, r1
   db5ea:	1413      	asrs	r3, r2, #16
   db5ec:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db5f0:	b292      	uxth	r2, r2
   db5f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db5f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db5fa:	f845 2b04 	str.w	r2, [r5], #4
   db5fe:	e7ee      	b.n	db5de <__mdiff+0x8c>
   db600:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db604:	b90b      	cbnz	r3, db60a <__mdiff+0xb8>
   db606:	3e01      	subs	r6, #1
   db608:	e7fa      	b.n	db600 <__mdiff+0xae>
   db60a:	6106      	str	r6, [r0, #16]
   db60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db610 <__ulp>:
   db610:	4b12      	ldr	r3, [pc, #72]	; (db65c <__ulp+0x4c>)
   db612:	ee10 2a90 	vmov	r2, s1
   db616:	401a      	ands	r2, r3
   db618:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db61c:	2b00      	cmp	r3, #0
   db61e:	dd02      	ble.n	db626 <__ulp+0x16>
   db620:	2000      	movs	r0, #0
   db622:	4619      	mov	r1, r3
   db624:	e017      	b.n	db656 <__ulp+0x46>
   db626:	425b      	negs	r3, r3
   db628:	151b      	asrs	r3, r3, #20
   db62a:	2b13      	cmp	r3, #19
   db62c:	f04f 0000 	mov.w	r0, #0
   db630:	f04f 0100 	mov.w	r1, #0
   db634:	dc04      	bgt.n	db640 <__ulp+0x30>
   db636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db63a:	fa42 f103 	asr.w	r1, r2, r3
   db63e:	e00a      	b.n	db656 <__ulp+0x46>
   db640:	3b14      	subs	r3, #20
   db642:	2b1e      	cmp	r3, #30
   db644:	f04f 0201 	mov.w	r2, #1
   db648:	bfda      	itte	le
   db64a:	f1c3 031f 	rsble	r3, r3, #31
   db64e:	fa02 f303 	lslle.w	r3, r2, r3
   db652:	4613      	movgt	r3, r2
   db654:	4618      	mov	r0, r3
   db656:	ec41 0b10 	vmov	d0, r0, r1
   db65a:	4770      	bx	lr
   db65c:	7ff00000 	.word	0x7ff00000

000db660 <__b2d>:
   db660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db662:	6905      	ldr	r5, [r0, #16]
   db664:	f100 0614 	add.w	r6, r0, #20
   db668:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db66c:	1f2f      	subs	r7, r5, #4
   db66e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db672:	4620      	mov	r0, r4
   db674:	f7ff fdca 	bl	db20c <__hi0bits>
   db678:	f1c0 0320 	rsb	r3, r0, #32
   db67c:	280a      	cmp	r0, #10
   db67e:	600b      	str	r3, [r1, #0]
   db680:	dc14      	bgt.n	db6ac <__b2d+0x4c>
   db682:	f1c0 0e0b 	rsb	lr, r0, #11
   db686:	fa24 f10e 	lsr.w	r1, r4, lr
   db68a:	42be      	cmp	r6, r7
   db68c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db690:	bf34      	ite	cc
   db692:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db696:	2100      	movcs	r1, #0
   db698:	3015      	adds	r0, #21
   db69a:	fa04 f000 	lsl.w	r0, r4, r0
   db69e:	fa21 f10e 	lsr.w	r1, r1, lr
   db6a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db6a6:	ea40 0201 	orr.w	r2, r0, r1
   db6aa:	e023      	b.n	db6f4 <__b2d+0x94>
   db6ac:	42be      	cmp	r6, r7
   db6ae:	bf3a      	itte	cc
   db6b0:	f1a5 0708 	subcc.w	r7, r5, #8
   db6b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db6b8:	2100      	movcs	r1, #0
   db6ba:	380b      	subs	r0, #11
   db6bc:	d015      	beq.n	db6ea <__b2d+0x8a>
   db6be:	4084      	lsls	r4, r0
   db6c0:	f1c0 0520 	rsb	r5, r0, #32
   db6c4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db6c8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db6cc:	42b7      	cmp	r7, r6
   db6ce:	fa21 fe05 	lsr.w	lr, r1, r5
   db6d2:	ea44 030e 	orr.w	r3, r4, lr
   db6d6:	bf8c      	ite	hi
   db6d8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db6dc:	2400      	movls	r4, #0
   db6de:	fa01 f000 	lsl.w	r0, r1, r0
   db6e2:	40ec      	lsrs	r4, r5
   db6e4:	ea40 0204 	orr.w	r2, r0, r4
   db6e8:	e004      	b.n	db6f4 <__b2d+0x94>
   db6ea:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db6ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db6f2:	460a      	mov	r2, r1
   db6f4:	ec43 2b10 	vmov	d0, r2, r3
   db6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db6fa <__d2b>:
   db6fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db6fe:	460e      	mov	r6, r1
   db700:	2101      	movs	r1, #1
   db702:	ec59 8b10 	vmov	r8, r9, d0
   db706:	4615      	mov	r5, r2
   db708:	f7ff fcbb 	bl	db082 <_Balloc>
   db70c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db710:	4607      	mov	r7, r0
   db712:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db716:	b10c      	cbz	r4, db71c <__d2b+0x22>
   db718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db71c:	9301      	str	r3, [sp, #4]
   db71e:	f1b8 0f00 	cmp.w	r8, #0
   db722:	d019      	beq.n	db758 <__d2b+0x5e>
   db724:	a802      	add	r0, sp, #8
   db726:	f840 8d08 	str.w	r8, [r0, #-8]!
   db72a:	f7ff fd8f 	bl	db24c <__lo0bits>
   db72e:	9b00      	ldr	r3, [sp, #0]
   db730:	b148      	cbz	r0, db746 <__d2b+0x4c>
   db732:	9a01      	ldr	r2, [sp, #4]
   db734:	f1c0 0120 	rsb	r1, r0, #32
   db738:	fa02 f101 	lsl.w	r1, r2, r1
   db73c:	430b      	orrs	r3, r1
   db73e:	40c2      	lsrs	r2, r0
   db740:	617b      	str	r3, [r7, #20]
   db742:	9201      	str	r2, [sp, #4]
   db744:	e000      	b.n	db748 <__d2b+0x4e>
   db746:	617b      	str	r3, [r7, #20]
   db748:	9b01      	ldr	r3, [sp, #4]
   db74a:	61bb      	str	r3, [r7, #24]
   db74c:	2b00      	cmp	r3, #0
   db74e:	bf14      	ite	ne
   db750:	2102      	movne	r1, #2
   db752:	2101      	moveq	r1, #1
   db754:	6139      	str	r1, [r7, #16]
   db756:	e007      	b.n	db768 <__d2b+0x6e>
   db758:	a801      	add	r0, sp, #4
   db75a:	f7ff fd77 	bl	db24c <__lo0bits>
   db75e:	9b01      	ldr	r3, [sp, #4]
   db760:	617b      	str	r3, [r7, #20]
   db762:	2101      	movs	r1, #1
   db764:	6139      	str	r1, [r7, #16]
   db766:	3020      	adds	r0, #32
   db768:	b134      	cbz	r4, db778 <__d2b+0x7e>
   db76a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db76e:	4404      	add	r4, r0
   db770:	6034      	str	r4, [r6, #0]
   db772:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db776:	e009      	b.n	db78c <__d2b+0x92>
   db778:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db77c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db780:	6030      	str	r0, [r6, #0]
   db782:	6918      	ldr	r0, [r3, #16]
   db784:	f7ff fd42 	bl	db20c <__hi0bits>
   db788:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db78c:	6028      	str	r0, [r5, #0]
   db78e:	4638      	mov	r0, r7
   db790:	b003      	add	sp, #12
   db792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db796 <__ratio>:
   db796:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db79a:	4688      	mov	r8, r1
   db79c:	4669      	mov	r1, sp
   db79e:	4681      	mov	r9, r0
   db7a0:	f7ff ff5e 	bl	db660 <__b2d>
   db7a4:	a901      	add	r1, sp, #4
   db7a6:	4640      	mov	r0, r8
   db7a8:	ec55 4b10 	vmov	r4, r5, d0
   db7ac:	f7ff ff58 	bl	db660 <__b2d>
   db7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db7b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db7b8:	1a9a      	subs	r2, r3, r2
   db7ba:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db7be:	1ac9      	subs	r1, r1, r3
   db7c0:	ec57 6b10 	vmov	r6, r7, d0
   db7c4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db7c8:	2b00      	cmp	r3, #0
   db7ca:	bfcc      	ite	gt
   db7cc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db7d0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db7d4:	4632      	mov	r2, r6
   db7d6:	463b      	mov	r3, r7
   db7d8:	4620      	mov	r0, r4
   db7da:	4629      	mov	r1, r5
   db7dc:	f7fe f816 	bl	d980c <__aeabi_ddiv>
   db7e0:	ec41 0b10 	vmov	d0, r0, r1
   db7e4:	b003      	add	sp, #12
   db7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db7ea <__copybits>:
   db7ea:	3901      	subs	r1, #1
   db7ec:	b510      	push	{r4, lr}
   db7ee:	1149      	asrs	r1, r1, #5
   db7f0:	6914      	ldr	r4, [r2, #16]
   db7f2:	3101      	adds	r1, #1
   db7f4:	f102 0314 	add.w	r3, r2, #20
   db7f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db7fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db800:	42a3      	cmp	r3, r4
   db802:	4602      	mov	r2, r0
   db804:	d204      	bcs.n	db810 <__copybits+0x26>
   db806:	f853 2b04 	ldr.w	r2, [r3], #4
   db80a:	f840 2b04 	str.w	r2, [r0], #4
   db80e:	e7f7      	b.n	db800 <__copybits+0x16>
   db810:	2300      	movs	r3, #0
   db812:	428a      	cmp	r2, r1
   db814:	d202      	bcs.n	db81c <__copybits+0x32>
   db816:	f842 3b04 	str.w	r3, [r2], #4
   db81a:	e7fa      	b.n	db812 <__copybits+0x28>
   db81c:	bd10      	pop	{r4, pc}

000db81e <__any_on>:
   db81e:	f100 0214 	add.w	r2, r0, #20
   db822:	6900      	ldr	r0, [r0, #16]
   db824:	114b      	asrs	r3, r1, #5
   db826:	4298      	cmp	r0, r3
   db828:	b510      	push	{r4, lr}
   db82a:	db0c      	blt.n	db846 <__any_on+0x28>
   db82c:	dd0c      	ble.n	db848 <__any_on+0x2a>
   db82e:	f011 011f 	ands.w	r1, r1, #31
   db832:	d009      	beq.n	db848 <__any_on+0x2a>
   db834:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db838:	fa24 f001 	lsr.w	r0, r4, r1
   db83c:	fa00 f101 	lsl.w	r1, r0, r1
   db840:	428c      	cmp	r4, r1
   db842:	d10c      	bne.n	db85e <__any_on+0x40>
   db844:	e000      	b.n	db848 <__any_on+0x2a>
   db846:	4603      	mov	r3, r0
   db848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db84c:	4293      	cmp	r3, r2
   db84e:	d904      	bls.n	db85a <__any_on+0x3c>
   db850:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db854:	2900      	cmp	r1, #0
   db856:	d0f9      	beq.n	db84c <__any_on+0x2e>
   db858:	e001      	b.n	db85e <__any_on+0x40>
   db85a:	2000      	movs	r0, #0
   db85c:	bd10      	pop	{r4, pc}
   db85e:	2001      	movs	r0, #1
   db860:	bd10      	pop	{r4, pc}

000db862 <_calloc_r>:
   db862:	b538      	push	{r3, r4, r5, lr}
   db864:	fb02 f401 	mul.w	r4, r2, r1
   db868:	4621      	mov	r1, r4
   db86a:	f7fa ff85 	bl	d6778 <_malloc_r>
   db86e:	4605      	mov	r5, r0
   db870:	b118      	cbz	r0, db87a <_calloc_r+0x18>
   db872:	4622      	mov	r2, r4
   db874:	2100      	movs	r1, #0
   db876:	f7fe fa37 	bl	d9ce8 <memset>
   db87a:	4628      	mov	r0, r5
   db87c:	bd38      	pop	{r3, r4, r5, pc}

000db87e <link_code_end>:
	...

000db880 <dynalib_user>:
   db880:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db890:	0000 0000 6f63 6e6e 6365 6974 676e 7420     ....connecting t
   db8a0:	206f 514d 5454 2e2e 7200 7465 7972 6e69     o MQTT...retryin
   db8b0:	2067 514d 5454 6320 6e6f 656e 7463 6f69     g MQTT connectio
   db8c0:	6e6f 6920 206e 2035 6573 6f63 646e 2e73     on in 5 seconds.
   db8d0:	2e2e 4d00 5451 2054 6f63 6e6e 6365 6574     ...MQTT connecte
   db8e0:	2164 7400 6d65 6570 6172 7574 6572 6920     d!.temperature i
   db8f0:	3a73 2520 2e30 3230 0a66 6400 7369 6c70     s: %0.02f..displ
   db900:	7961 7720 726f 696b 676e 7300 696f 206c     ay working.soil 
   db910:	6176 756c 2065 7369 203a 6925 000a 6f63     value is: %i..co
   db920:	636e 6e65 7274 7461 6f69 206e 203d 3025     ncentration = %0
   db930:	302e 6632 000a 6370 2f73 2e30 3130 6663     .02f..pcs/0.01cf
   db940:	0a20 4100 2051 6f63 6564 203a 6925 000a      ..AQ code: %i..
   db950:	6f6e 2074 7570 706d 6465 6400 7375 2074     not pumped.dust 
   db960:	6573 736e 726f 6520 676e 6761 6465 7000     sensor engaged.p
   db970:	6e69 6967 676e 4d20 5451 0a54 6400 7369     inging MQTT..dis
   db980:	6f63 6e6e 6365 6974 676e 0a20 6d00 7561     connecting ..mau
   db990:	6972 6963 766f 3939 6900 2e6f 6461 6661     riciov99.io.adaf
   db9a0:	7572 7469 632e 6d6f 6100 6f69 745f 4f7a     ruit.com.aio_tzO
   db9b0:	356d 4230 7033 6e70 4b58 4c6a 436c 5759     m50B3ppnXKjLlCYW
   db9c0:	436c 7776 3866 6476 004b 616d 7275 6369     lCvwf8vdK.mauric
   db9d0:	6f69 3976 2f39 6566 6465 2f73 7570 706d     iov99/feeds/pump
   db9e0:	6e69 0067 616d 7275 6369 6f69 3976 2f39     ing.mauriciov99/
   db9f0:	6566 6465 2f73 7270 626f 5665 6c61 6575     feeds/probeValue
   dba00:	6d00 7561 6972 6963 766f 3939 662f 6565     .mauriciov99/fee
   dba10:	7364 722f 6f6f 546d 6d65 0070 616d 7275     ds/roomTemp.maur
   dba20:	6369 6f69 3976 2f39 6566 6465 2f73 6573     iciov99/feeds/se
   dba30:	6565 4164 5351 6e65 6f73 0072 616d 7275     eedAQSensor.maur
   dba40:	6369 6f69 3976 2f39 6566 6465 2f73 6573     iciov99/feeds/se
   dba50:	6565 4464 7375 5374 6e65 6f73 0072 0000     eedDustSensor...

000dba60 <_ZTVN8particle13__SPISettingsE>:
	...
   dba68:	47fd 000d 6564 6166 6c75 2074 4d00 4253     .G..default .MSB
   dba78:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dba88:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dba98:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dbaa8:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000dbab4 <_ZTV16Adafruit_SSD1306>:
	...
   dbabc:	40cf 000d 46ef 000d 593d 000d 6b75 000d     .@...F..=Y..uk..
   dbacc:	5239 000d 563d 000d 50c1 000d 4f4d 000d     9R..=V...P..MO..
   dbadc:	56fd 000d 5793 000d 57cb 000d 57e7 000d     .V...W...W...W..

000dbaec <_ZTV12Adafruit_GFX>:
	...
   dbafc:	593d 000d 6b75 000d 40a9 000d 563d 000d     =Y..uk...@..=V..
   dbb0c:	575d 000d 5779 000d 56fd 000d 5793 000d     ]W..yW...V...W..
   dbb1c:	57cb 000d 57e7 000d                         .W...W..

000dbb24 <_ZL4font>:
   dbb24:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dbb34:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dbb44:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dbb54:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dbb64:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dbb74:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dbb84:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dbb94:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dbba4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dbbb4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dbbc4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dbbd4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dbbe4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dbbf4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dbc04:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dbc14:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dbc24:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dbc34:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dbc44:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dbc54:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dbc64:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dbc74:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dbc84:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dbc94:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dbca4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dbcb4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dbcc4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dbcd4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dbce4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dbcf4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dbd04:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dbd14:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dbd24:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dbd34:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dbd44:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dbd54:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dbd64:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dbd74:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dbd84:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dbd94:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dbda4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dbdb4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dbdc4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dbdd4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dbde4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dbdf4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dbe04:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dbe14:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dbe24:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dbe34:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dbe44:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dbe54:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dbe64:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dbe74:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dbe84:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dbe94:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dbea4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dbeb4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dbec4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dbed4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dbee4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dbef4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dbf04:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dbf14:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dbf24:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dbf34:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dbf44:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dbf54:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dbf64:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   dbf74:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   dbf84:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   dbf94:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   dbfa4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   dbfb4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   dbfc4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   dbfd4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   dbfe4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   dbff4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   dc004:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   dc014:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000dc020 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   dc028:	40cd 000d 46e1 000d 59d1 000d 5a7d 000d     .@...F...Y..}Z..
   dc038:	5aaf 000d 59e5 000d 5a25 000d               .Z...Y..%Z..

000dc044 <_ZTV13Adafruit_MQTT>:
	...
   dc054:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   dc064:	40a9 000d                                   .@..

000dc068 <CSWTCH.52>:
   dc068:	c0cb 000d c0df 000d c0af 000d c0f1 000d     ................
   dc078:	c136 000d c17b 000d c19b 000d c1ce 000d     6...{...........
   dc088:	c1e8 000d c21f 000d 5b20 7830 3000 5d00     ........ [0x.0.]
   dc098:	202c 0a00 0009 7244 706f 6570 2064 2061     , ....Dropped a 
   dc0a8:	6170 6b63 7465 5500 6b6e 6f6e 6e77 6520     packet.Unknown e
   dc0b8:	7272 726f 4d00 5451 0054 2525 6425 252e     rror.MQTT.%%%d.%
   dc0c8:	6664 4600 6961 656c 2064 6f74 7320 6275     df.Failed to sub
   dc0d8:	6373 6972 6562 4300 6e6f 656e 7463 6f69     scribe.Connectio
   dc0e8:	206e 6166 6c69 6465 5400 6568 5320 7265     n failed.The Ser
   dc0f8:	6576 2072 6f64 7365 6e20 746f 7320 7075     ver does not sup
   dc108:	6f70 7472 7420 6568 6c20 7665 6c65 6f20     port the level o
   dc118:	2066 6874 2065 514d 5454 7020 6f72 6f74     f the MQTT proto
   dc128:	6f63 206c 6572 7571 7365 6574 0064 6854     col requested.Th
   dc138:	2065 6c43 6569 746e 6920 6564 746e 6669     e Client identif
   dc148:	6569 2072 7369 6320 726f 6572 7463 5520     ier is correct U
   dc158:	4654 382d 6220 7475 6e20 746f 6120 6c6c     TF-8 but not all
   dc168:	776f 6465 6220 2079 6874 2065 6553 7672     owed by the Serv
   dc178:	7265 5400 6568 4d20 5451 2054 6573 7672     er.The MQTT serv
   dc188:	6369 2065 7369 7520 616e 6176 6c69 6261     ice is unavailab
   dc198:	656c 5400 6568 6420 7461 2061 6e69 7420     le.The data in t
   dc1a8:	6568 7520 6573 2072 616e 656d 6f20 2072     he user name or 
   dc1b8:	6170 7373 6f77 6472 6920 2073 616d 666c     password is malf
   dc1c8:	726f 656d 0064 6f4e 2074 7561 6874 726f     ormed.Not author
   dc1d8:	7a69 6465 7420 206f 6f63 6e6e 6365 0074     ized to connect.
   dc1e8:	7845 6563 6465 6465 7220 6365 6e6f 656e     Exceeded reconne
   dc1f8:	7463 7220 7461 2065 696c 696d 2e74 5020     ct rate limit. P
   dc208:	656c 7361 2065 7274 2079 6761 6961 206e     lease try again 
   dc218:	616c 6574 2e72 5900 756f 6820 7661 2065     later..You have 
   dc228:	6562 6e65 6220 6e61 656e 2064 7266 6d6f     been banned from
   dc238:	6320 6e6f 656e 7463 6e69 2e67 5020 656c      connecting. Ple
   dc248:	7361 2065 6f63 746e 6361 2074 6874 2065     ase contact the 
   dc258:	514d 5454 7320 7265 6576 2072 6461 696d     MQTT server admi
   dc268:	696e 7473 6172 6f74 2072 6f66 2072 6f6d     nistrator for mo
   dc278:	6572 6420 7465 6961 736c 002e               re details..

000dc284 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   dc284:	0002 0000                                   ....

000dc288 <_ZN16AirQualitySensor9FRESH_AIRE>:
   dc288:	0003 0000                                   ....

000dc28c <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   dc28c:	0001 0000                                   ....

000dc290 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   dc290:	0000 0000                                   ....

000dc294 <_ZTVN5spark13EthernetClassE>:
	...
   dc29c:	67f7 000d 67ed 000d 67e3 000d 67d9 000d     .g...g...g...g..
   dc2ac:	67cd 000d 67c1 000d 67b5 000d 67ad 000d     .g...g...g...g..
   dc2bc:	67a3 000d 6799 000d 7a45 000d               .g...g..Ez..

000dc2c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dc2c8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   dc2d8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   dc2e8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   dc2f8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   dc308:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   dc318:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   dc328:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   dc338:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dc348:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   dc358:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   dc368:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   dc378:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dc388:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dc398:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   dc3a8:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   dc3b8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dc3c8:	6d69 0065                                   ime.

000dc3cc <_ZTV9IPAddress>:
	...
   dc3d4:	6e35 000d 6e25 000d 6e27 000d               5n..%n..'n..

000dc3e0 <_ZTV9USBSerial>:
	...
   dc3e8:	6f39 000d 6f89 000d 6f97 000d 6b75 000d     9o...o...o..uk..
   dc3f8:	6f75 000d 6f3b 000d 6f51 000d 6f83 000d     uo..;o..Qo...o..
   dc408:	6f67 000d 6f35 000d                         go..5o..

000dc410 <_ZTV11USARTSerial>:
	...
   dc418:	7045 000d 7095 000d 70a3 000d 6b75 000d     Ep...p...p..uk..
   dc428:	7059 000d 707b 000d 7067 000d 708f 000d     Yp..{p..gp...p..
   dc438:	7047 000d 704b 000d                         Gp..Kp..

000dc440 <_ZTV7TwoWire>:
	...
   dc448:	7149 000d 7193 000d 716b 000d 714b 000d     Iq...q..kq..Kq..
   dc458:	7173 000d 717b 000d 7183 000d 718b 000d     sq..{q...q...q..

000dc468 <_ZTVN5spark9MeshClassE>:
	...
   dc470:	72b5 000d 72ab 000d 72a1 000d 7297 000d     .r...r...r...r..
   dc480:	728b 000d 727f 000d 7273 000d 726b 000d     .r...r..sr..kr..
   dc490:	7261 000d 7257 000d 7a45 000d               ar..Wr..Ez..

000dc49c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc4a4:	7459 000d 745f 000d 7947 000d 746d 000d     Yt.._t..Gy..mt..
   dc4b4:	745b 000d                                   [t..

000dc4b8 <_ZTV9TCPClient>:
	...
   dc4c0:	40d1 000d 4105 000d 73d1 000d 73eb 000d     .@...A...s...s..
   dc4d0:	77ed 000d 753f 000d 7511 000d 7415 000d     .w..?u...u...t..
   dc4e0:	76c9 000d 75c5 000d 7573 000d 77bd 000d     .v...u..su...w..
   dc4f0:	7417 000d 744f 000d 73fd 000d 7471 000d     .t..Ot...s..qt..
   dc500:	74f1 000d 6977 6972 676e 7200 6365 2076     .t..wiring.recv 
   dc510:	7265 6f72 2072 203d 6425 0000               error = %d..

000dc51c <_ZTVN5spark9WiFiClassE>:
	...
   dc524:	79bd 000d 79b3 000d 79a9 000d 795f 000d     .y...y...y.._y..
   dc534:	799d 000d 7991 000d 7985 000d 797d 000d     .y...y...y..}y..
   dc544:	7973 000d 7969 000d 7a45 000d               sy..iy..Ez..

000dc550 <_ZTVN5spark12NetworkClassE>:
	...
   dc558:	79dd 000d 79e7 000d 79f1 000d 79fb 000d     .y...y...y...y..
   dc568:	7a05 000d 7a11 000d 7a1d 000d 7a29 000d     .z...z...z..)z..
   dc578:	7a31 000d 7a3b 000d 7a45 000d               1z..;z..Ez..

000dc584 <_ZSt7nothrow>:
   dc584:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dc590 <TWO52>:
   dc590:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dc5a0 <_ctype_>:
   dc5a0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc5b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc5c0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc5d0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc5e0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc5f0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc600:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc610:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc620:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc6a4 <__sf_fake_stdin>:
	...

000dc6c4 <__sf_fake_stdout>:
	...

000dc6e4 <__sf_fake_stderr>:
	...
   dc704:	0043 4f50 4953 0058                         C.POSIX.

000dc70c <fpi.5344>:
   dc70c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc71c:	0000 0000                                   ....

000dc720 <fpinan.5380>:
   dc720:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc730:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000dc740 <tinytens>:
   dc740:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc750:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc760:	6f43 64ac 0628 1168                         Co.d(.h.

000dc768 <__mprec_tens>:
   dc768:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc778:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc788:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc798:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc7a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc7b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc7c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc7d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc7e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc7f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc808:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc818:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc828:	9db4 79d9 7843 44ea                         ...yCx.D

000dc830 <__mprec_bigtens>:
   dc830:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc840:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc850:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc858 <p05.5387>:
   dc858:	0005 0000 0019 0000 007d 0000               ........}...

000dc864 <link_const_variable_data_end>:
   dc864:	000d46fd 	.word	0x000d46fd
   dc868:	000d4f47 	.word	0x000d4f47
   dc86c:	000d5639 	.word	0x000d5639
   dc870:	000d59cd 	.word	0x000d59cd
   dc874:	000d5b0f 	.word	0x000d5b0f
   dc878:	000d6143 	.word	0x000d6143
   dc87c:	000d620d 	.word	0x000d620d
   dc880:	000d6801 	.word	0x000d6801
   dc884:	000d6a89 	.word	0x000d6a89
   dc888:	000d6b4d 	.word	0x000d6b4d
   dc88c:	000d6cb1 	.word	0x000d6cb1
   dc890:	000d6cc1 	.word	0x000d6cc1
   dc894:	000d6cf9 	.word	0x000d6cf9
   dc898:	000d7381 	.word	0x000d7381
   dc89c:	000d79c9 	.word	0x000d79c9
   dc8a0:	000d7b11 	.word	0x000d7b11
   dc8a4:	000d7d49 	.word	0x000d7d49
   dc8a8:	000d7dcd 	.word	0x000d7dcd
   dc8ac:	000d7e91 	.word	0x000d7e91
   dc8b0:	000d7f55 	.word	0x000d7f55

000dc8b4 <link_constructors_end>:
	...
